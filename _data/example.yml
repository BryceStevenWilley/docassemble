"action-button-html": |-
  mandatory: True
  question: |
    Need more information?
  subquestion: |
    ${ action_button_html("https://docassemble.org", label="Visit our web site", color="primary", size="md") }
"action-buttons": "question: | \n  I will give you \n  ${ quantity_noun(num_apples,\
  \ 'apple') }.\nfield: show_quantity\naction buttons:\n  - label: More\n    action:\
  \ change_quantity\n    arguments:\n      amount: 1\n    color: success\n    icon:\
  \ chevron-up\n  - label: Less\n    action: change_quantity\n    arguments:\n   \
  \   amount: -1\n    color: danger\n    icon: chevron-down\n---\nevent: change_quantity\n\
  code: |\n  num_apples += action_argument('amount')"
"action-buttons-before": "question: | \n  I will give you \n  ${ quantity_noun(num_apples,\
  \ 'apple') }.\nfield: show_quantity\naction buttons:\n  - label: More\n    action:\
  \ change_quantity\n    arguments:\n      amount: 1\n    color: success\n    icon:\
  \ chevron-up\n    placement: before\n  - label: Less\n    action: change_quantity\n\
  \    arguments:\n      amount: -1\n    color: danger\n    icon: chevron-down\n \
  \   placement: before\n---\nevent: change_quantity\ncode: |\n  num_apples += action_argument('amount')"
"action-buttons-code": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  question: |
    Thank you for that information.
  field: thank_user
  action buttons:
    code: |
      [{'action': 'eat',
        'arguments': {'fruit': favorite_fruit},
        'label': 'Eat ' + favorite_fruit,
        'color': 'secondary'}]
  ---
  event: eat
  code: |
    log('Nom nom nom.  That ' + action_argument('fruit') + ' was good.', "info")
    set_save_status('ignore')
"action-buttons-http": |-
  question: |
    You may wish to wait until
    ${ today().plus(weeks=3) }
    to file your complaint.
  subquestion: |
    It is up to you whether you wish
    to continue with the interview.

    If you leave, you will be directed
    back to the web site.
  field: wishes_to_continue
  action buttons:
    - label: Come back later
      action: https://docassemble.org
      color: warning
      icon: sign-out-alt
"actions": |-
  question: |
    Review your information.
  subquestion: |
    Your favorite color is
    ${ color }.
    [Change this]( ${ url_action('color') } )
  field: info_is_verified
  ---
  question: |
    What is your favorite color?
  fields:
    - Favorite Color: color
"actions-parameters": |-
  initial: True
  code: |
    process_action()
  ---
  question: |
    Review your information.
  subquestion: |
    You have ${ fishes['blue'] } blue
    fishes.
    [Add blue fish]( ${ url_action('add',
      color='blue') } )

    You have ${ fishes['red'] } red
    fishes.
    [Add red fish]( ${ url_action('add',
      color='red') } )
  field: info_is_verified
  ---
  event: add
  code: |
    fishes[action_argument('color')] += 1
"add-separators": "mandatory: True\nquestion: |\n  Fruits\nsubquestion: |\n  You like:\n\
  \    \n  % for item in add_separators(fruit):\n  * ${ item }\n  % endfor\nattachment:\n\
  \  docx template file: add-separators.docx\nbuttons:\n  - Try another: restart"
"address-autocomplete": |-
  question: |
    What is the address of the adverse
    party?
  fields:
    - Address: defendant.address.address
      address autocomplete: True
    - City: defendant.address.city
    - State: defendant.address.state
      code: |
        states_list()
    - Zip: defendant.address.zip
      required: False
    - County: defendant.address.county
"address-autocomplete-nz": |-
  question: |
    What is the address of the adverse
    party?
  fields:
    - Address: defendant.address.address
      address autocomplete: True
    - Suburb: defendant.address.sublocality_level_1
    - City: defendant.address.city
    - Postal Code: defendant.address.postal_code
      required: False
"address-autocomplete-test": |-
  question: |
    Test address autocomplete
  fields:
    - address: the_address.address
      address autocomplete: True
    - note: |
        The following attribute names are Google Place components.
    - "administrative_area_&#8203;level_1": the_address.administrative_area_level_1
      required: False
    - "administrative_area_&#8203;level_2": the_address.administrative_area_level_2
      required: False
    - "administrative_area_&#8203;level_3": the_address.administrative_area_level_3
      required: False
    - "administrative_area_&#8203;level_4": the_address.administrative_area_level_4
      required: False
    - "administrative_area_&#8203;level_5": the_address.administrative_area_level_5
      required: False
    - colloquial_area: the_address.colloquial_area
      required: False
    - country: the_address.country
      required: False
    - floor: the_address.floor
      required: False
    - intersection: the_address.intersection
      required: False
    - locality: the_address.locality
      required: False
    - neighborhood: the_address.neighborhood
      required: False
    - post_box: the_address.post_box
      required: False
    - postal_code: the_address.postal_code
      required: False
    - postal_code_prefix: the_address.postal_code_prefix
      required: False
    - postal_code_suffix: the_address.postal_code_suffix
      required: False
    - postal_town: the_address.postal_town
      required: False
    - premise: the_address.premise
      required: False
    - room: the_address.room
      required: False
    - route: the_address.route
      required: False
    - suite: the_address.suite
      required: False
    - street_number: the_address.street_number
      required: False
    - sublocality: the_address.sublocality
      required: False
    - sublocality_level_1: the_address.sublocality_level_1
      required: False
    - sublocality_level_2: the_address.sublocality_level_2
      required: False
    - sublocality_level_3: the_address.sublocality_level_3
      required: False
    - sublocality_level_4: the_address.sublocality_level_4
      required: False
    - sublocality_level_5: the_address.sublocality_level_5
      required: False
    - subpremise: the_address.subpremise
      required: False
    - note: |
        The following attribute names are built in to **docassemble**.
        They have different names than Google Place component names.
    - unit: the_address.unit
      required: False
    - city: the_address.city
      required: False
    - state: the_address.state
      required: False
    - zip: the_address.zip
      required: False
"address-block": |-
  objects:
    address: Address
  ---
  question: |
    What is your address?
  fields:
    - Address: address.address
    - Unit: address.unit
      required: False
    - City: address.city
    - State: address.state
      required: False
    - Postal Code: address.postal_code
      required: False
    - Country: address.country
      code: |
        countries_list()
      required: False
  ---
  mandatory: True
  question: Your address block
  subquestion: |
    Default:

    ${ address }

    Showing the country:

    ${ address.block(show_country=True) }

    International:

    ${ address.block(international=True) }
"age_in_years": |-
  question: |
    What is your date of birth?
  fields:
    - no label: user.birthdate
      datatype: date
  ---
  question: |
    You are ${ user.age_in_years() }
    years old.
  mandatory: True
"ajax-calc": |-
  question: |
    Let's calculate some stuff.
  fields:
    - A: var_a
      datatype: number
    - B: var_b
      datatype: number
    - C: var_c
      datatype: number
  check in: add_numbers
  ---
  mandatory: true
  question: |
    % if var_c == var_a * var_b:
    The correct answer is ${ var_c }.
    % else:
    That answer is not right!
    % endif
  ---
  event: add_numbers
  code: |
    if action_argument('var_a') != '' and action_argument('var_b') != '':
      answer = float(action_argument('var_a')) * float(action_argument('var_b'))
      background_response({'var_c': answer}, 'fields')
    background_response()
"ajax-calc-javascript": |-
  question: |
    Let's calculate some stuff.
  fields:
    - A: var_a
      datatype: number
    - B: var_b
      datatype: number
    - C: var_c
      datatype: number
  check in: add_numbers
  ---
  mandatory: true
  question: |
    % if var_c == var_a * var_b:
    The correct answer is ${ var_c }.
    % else:
    That answer is not right!
    % endif
  ---
  event: add_numbers
  code: |
    if action_argument('var_a') != '' and action_argument('var_b') != '':
      answer = float(action_argument('var_a')) * float(action_argument('var_b'))
      background_response('flash("Hint: C should be " + ' + str(answer) + ', "success")', 'javascript')
    background_response()
"ajax-flash": |-
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
    - Favorite drink: favorite_drink
  check in: criticize_food
  ---
  code: |
    favorite_food_interim = ''
  ---
  event: criticize_food
  code: |
    if action_argument('favorite_food') and action_argument('favorite_food') != favorite_food_interim:
      favorite_food_interim = action_argument('favorite_food')
      background_response("What? You like " + favorite_food_interim.upper() + "?", 'flash')
    background_response()
"ajax-refresh": |-
  mandatory: True
  code: |
    number_of_things = 3
  ---
  question: |
    Tell me which thing you want.
  fields:
    - "How many things are there?": number_of_things
      datatype: integer
      min: 1
      max: 10
    - "Which thing do you want?": thing
      input type: radio
      code: |
        range(1, number_of_things + 1)
  check in: set_number_of_things
  ---
  event: set_number_of_things
  code: |
    if action_argument('number_of_things') and number_of_things != int(action_argument('number_of_things')):
      number_of_things = int(action_argument('number_of_things'))
      if number_of_things < 1:
        number_of_things = 1
      elif number_of_things > 10:
        number_of_things = 10
      background_response('refresh')
    background_response()
"alarm-clock": |-
  mandatory: True
  code: |
    email_sent = False
    multi_user = True
    allow_cron = True
    counter = 0
"alignment": |-
  question: Here is your document.
  subquestion: It has aligned text.
  attachments:
    - name: A test document
      filename: test_document
      content: |
        [BOLDCENTER] A Document That
        Explains Things To You

        This is a big important document.
        It addresses all of the concerns
        that you might have with the
        benefits to which you may be
        entitled, now, in the future,
        or in the past, whichever comes
        first.

        [CENTER] Benefits Summary

        ${ client } is entitled to
        benefits plan ${ benefits }.

        For more information about the
        benefits to which you may or may
        not be entitled, whether on this
        planet or another planet in the
        solar system, contact:

        [FLUSHLEFT] Andrea Advocate [BR]
        123 Riverside Drive [BR]
        Fort Franklin, AR 92302

        By comparison, this uses the
        standard Markdown flushleft
        environment:

        | Andrea Advocate
        | 123 Riverside Drive
        | Fort Franklin, AR 92302
  mandatory: True
"all-false": "question: |\n  Please tell me what you think.\nfields:\n  - \"Select\
  \ the fruits you like\": likes_fruit\n    datatype: checkboxes\n    choices:\n \
  \     - Apples\n      - Peaches\n      - Pears\n      - Plums\n---\nmandatory: True\n\
  question: |\n  Summary of your answer\nsubquestion: |\n  It is\n  % if likes_fruit.all_false():\n\
  \  true\n  % else:\n  not true\n  % endif\n  that you don't like any of the fruit.\n\
  \  \n  It is\n  % if likes_fruit.all_false('Apples', 'Pears'):\n  true\n  % else:\n\
  \  not true\n  % endif\n  that you do not like apples or pears.\n\n  It is\n  %\
  \ if likes_fruit.all_false('Apples', 'Pears', exclusive=True):\n  true\n  % else:\n\
  \  not true\n  % endif\n  that apples and pears are the only fruits you do not like.\n\
  \n  It is\n  % if likes_fruit.any_false():\n  true\n  % else:\n  not true\n  % endif\n\
  \  that there is at least one fruit you do not like."
"all-mandatory": |-
  mandatory: True
  question: |
    How are you doing?
  field: how_doing
  choices:
    - Fine
    - Ill
  ---
  mandatory: True
  question: |
    What is your favorite color?
  fields:
    Color: favorite_color
  ---
  mandatory: True
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    % if how_doing == 'Fine':
    I am glad you are doing well.
    % else:
    I am sorry you aren't feeling 100%.
    % endif
"all-true": "question: |\n  Please tell me what you think.\nfields:\n  - \"Select\
  \ the fruits you like\": likes_fruit\n    datatype: checkboxes\n    choices:\n \
  \     - Apples\n      - Peaches\n      - Pears\n      - Plums\n---\nmandatory: True\n\
  question: |\n  Summary of your answer\nsubquestion: |\n  It is\n  % if likes_fruit.all_true():\n\
  \  true\n  % else:\n  not true\n  % endif\n  that you like all fruit.\n  \n  It\
  \ is\n  % if likes_fruit.all_true('Apples', 'Pears'):\n  true\n  % else:\n  not\
  \ true\n  % endif\n  that you like apples and pears.\n\n  It is\n  % if likes_fruit.all_true('Apples',\
  \ 'Pears', exclusive=True):\n  true\n  % else:\n  not true\n  % endif\n  that apples\
  \ and pears are the only fruits you like.\n\n  It is\n  % if likes_fruit.any_true():\n\
  \  true\n  % else:\n  not true\n  % endif\n  that you like at least one fruit."
"all_variables": "mandatory: True\nquestion: |\n  Interview dictionary\nsubquestion:\
  \ |\n  The variables in the dictionary are:\n    \n  `${ all_variables() }`"
"allow-downloading-true": |-
  mandatory: True
  question: Your documents are ready.
  allow downloading: True
  attachments:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
    - name: |
        A goodbye cruel world document
      filename: Goodbye_Cruel_World
      description: |
        Another document with a classic
        message
      content: |
        Goodbye, cruel world!
"allow-downloading-true-zip-filename": |-
  mandatory: True
  question: Your documents are ready.
  allow downloading: True
  zip filename: Hello_Goodbye.zip
  attachments:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
    - name: |
        A goodbye cruel world document
      filename: Goodbye_Cruel_World
      description: |
        Another document with a classic
        message
      content: |
        Goodbye, cruel world!
"allow-emailing-false": |-
  mandatory: True
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
  allow emailing: False
"allow-emailing-false-pdf": |-
  mandatory: True
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World
      valid formats:
        - pdf
      description: |
        A document with a classic message
      content: |
        Hello, world!
  allow emailing: False
"allow-emailing-true": |-
  mandatory: True
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
"always-include": |-
  mandatory: True
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
      valid formats:
        - pdf
        - docx
  always include editable files: True
"animal": |-
  question: What is your favorite animal?
  fields:
    - Animal: favorite_animal
  ---
  question: What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
  ---
  mandatory: True
  question: What a coincidence!
  subquestion: |
    My favorite animal is the ${ favorite_animal }, too!
  buttons:
    - Exit: exit
"append-list": "objects:\n  - person: DAList.using(object_type=Individual, there_are_any=True)\n\
  \  - doctor: Individual\n---\nquestion: |\n  What is the name of the ${ ordinal(i)\
  \ } person?\nfields:\n  - First name: person[i].name.first\n  - Last name: person[i].name.last\n\
  ---\nquestion: |\n  What ${ person[i].possessive('age') }?\nfields:\n  - Age in\
  \ years: person[i].age\n    datatype: integer\n---\nquestion: |\n  Is there another\
  \ person?\nyesno: person.there_is_another\n---\nquestion: |\n  Who is your doctor?\n\
  fields:\n  - \"Someone already mentioned\": doctor\n    datatype: object\n    choices:\n\
  \      - person\n    disable others: True\n  - First name: doctor.name.first\n \
  \ - Last name: doctor.name.last\n---\nmandatory: True\ncode: |\n  person.gather()\n\
  \  need(doctor.name.first, doctor.name.last)\n  if doctor not in person:\n    person.append(doctor,\
  \ set_instance_name=True)\n  finish_screen\n---\nevent: finish_screen\nquestion:\
  \ All done\nsubquestion: |\n  The people are:\n    \n  % for y in person:\n  * ${\
  \ y } is ${ y.age } years old.\n  % endfor"
"as-datetime": "question: |\n  The Delorean will go back in time to \n  ${ as_datetime('11/5/1955').year\
  \ }.\nmandatory: True"
"assemble-in-background": |-
  mandatory: True
  code: |
    need(sweetheart)
    if the_task.ready():
      final_screen
    else:
      waiting_screen
  ---
  question: |
    What is the name of your
    sweetheart?
  fields:
    - Name: sweetheart
  ---
  code: |
    the_task = background_action('assembly_task', 'refresh')
  ---
  event: assembly_task
  code: |
    background_response_action('assembly_done', document=the_document)
  ---
  attachment:
    name: A letter
    filename: letter
    variable name: the_document
    content: |
      ${ sweetheart }, will you
      marry me?
  ---
  event: assembly_done
  code: |
    the_letter = action_argument('document')
    background_response()
  ---
  event: waiting_screen
  question: |
    Please wait...
  ---
  event: final_screen
  question: |
    Document created
  subquestion: |
    Don't read this letter, just send
    it to ${ sweetheart } immediately.
  attachment code: the_letter
"assets": |-
  objects:
    - decedent: Individual
    - estate: Thing
    - estate.asset: Asset
  ---
  question: |
    Who is the decedent?
  fields:
    - First Name: decedent.name.first
    - Last Name: decedent.name.last
  ---
  code: |
    estate.name.text = "estate of " + decedent.name.full()
  ---
  question: |
    Does the ${ estate } have
    any assets?
  yesno: estate.asset.there_are_any
  ---
  question: |
    What type of asset does
    the ${ estate } have?
  fields:
    - Type of asset: estate.asset.new_item_name
      hint: |
        e.g., real estate, 401(k), jewelry
  ---
  question: |
    What is the value of ${ i }
    in the ${ estate }?
  fields:
    - Value: estate.asset[i].value
      datatype: currency
  ---
  question: |
    Is there another asset in
    the ${ estate }?
  yesno: estate.asset.there_is_another
  ---
  mandatory: True
  question: |
    Summary of the ${ estate }.
  subquestion: |
    The total value of
    ${ decedent.possessive('estate') }
    is
    ${ currency(estate.asset.total()) }.
"attachment": |-
  question: Your document is ready.
  sets: provide_user_with_document
  attachment:
    - name: A hello world document
      filename: Hello_World
      valid formats:
        - pdf
      description: |
        A document with a classic message
      content: |
        Hello, world!
"attachment-code": |-
  mandatory: True
  question: |
    Here are your documents!
  attachment code: |
    [doc_one, doc_two, doc_three]
  ---
  attachment:
    name: The first document
    filename: document_one
    description: |
      This is the first document
      of a series.
    variable name: doc_one
    content: |
      Hello, world number one!
  ---
  attachment:
    name: The second document
    filename: document_two
    description: |
      This is the second document
      of a series.
    variable name: doc_two
    content: |
      Hello, world number two!
  ---
  attachment:
    name: The third document
    filename: document_three
    description: |
      This is the third document
      of a series.
    variable name: doc_three
    content: |
      Hello, world number three!
"attachment-notice": |-
  question: Here is your document.
  attachments:
    - name: Praecipe to discontinue
      docx template file: praecipe_discontinue.docx
      valid formats:
        - pdf
  include attachment notice: False
  include download tab: False
  mandatory: True
"attachment-simple": |-
  mandatory: True
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
"attorney": |-
  modules:
    - docassemble.demo.attorney
  ---
  imports:
    - us
  ---
  objects:
    - lawyer: Attorney
  ---
  mandatory: True
  question: |
    % if lawyer.can_practice_in('MA'):
    ${ lawyer } can practice in Massachusetts.
    % else:
    Sorry, ${ lawyer } cannot practice in Massachusetts.
    % endif
  ---
  generic object: Attorney
  question: |
    In what state(s) ${ x.is_are_you() } admitted to practice?
  fields:
    - no label: x.bar_admissions
      datatype: checkboxes
      code: |
        us.states.mapping('abbr', 'name')
  ---
  generic object: Attorney
  question: |
    What is the attorney's name?
  fields:
    - First Name: x.name.first
    - Last Name: x.name.last
"audio": |-
  audio: schumann-clip-1.mp3
  question: You need to relax.
  subquestion: |
    Listen to some Schumann, and then
    proceed.
  field: user_is_relaxed
"audio-upload": |-
  question: Upload an audio file.
  fields:
    - no label: my_file
      datatype: microphone
  ---
  mandatory: True
  question: Listen to this!
  subquestion: |
    Best song ever:

    ${ my_file }

    Don't you think so?
"auto-terms": |-
  auto terms:
    creeper: |
      A tall green creature that explodes if
      you get too close.
    zombie pigman: |
      A harmless creature who carries a gold
      sword.
  ---
  question: Have you ever met a creeper?
  subquestion: |
    If you have met a zombie pigman, you
    have almost certainly met a creeper.
  yesno: met_a_creeper
"background-error-action": "mandatory: True\ncode: |\n  if the_task.ready():\n   \
  \ if the_task.failed():\n      error_screen\n    else:\n      final_screen\n  else:\n\
  \    waiting_screen\n---\ncode: |\n  the_task = background_action('bg_task', additional=value_to_add)\n\
  ---\nquestion: |\n  How much shall I add to 553?\nfields:\n  - Number: value_to_add\n\
  \    datatype: integer\n---\nevent: bg_task\ncode: |\n  # This is where time-consuming\
  \ code\n  # would go\n  background_error_action('bg_fail', stage='calculation')\n\
  \  value = 553 + action_argument('additional') / 0\n  background_response_action('bg_resp',\
  \ ans=value)\n---\nevent: bg_resp\ncode: |\n  answer = action_argument('ans')\n\
  \  background_response()\n---\nevent: bg_fail\ncode: |\n  errmess = \"Failure at\
  \ the \" \\\n            + action_argument('stage') \\\n            + \" stage due\
  \ to a \" \\\n            + action_argument('error_type') \\\n            + \" error\"\
  \n  background_response('handled_error')\n---\nevent: error_screen\nquestion: |\n\
  \  There was an error.\nsubquestion: |\n  The saved error message was\n  ${ errmess\
  \ }.\n  \n  The value was\n  `${ the_task.get() }`.\n  \n  The error was\n  `${\
  \ the_task.result().error_type }`.\n\n  The trace was\n  \n  ${ indent(the_task.result().error_trace)\
  \ }\n\n  The message was\n  \n  ${ indent(the_task.result().error_message) }\n\n\
  \  The variables were\n  `${ repr(the_task.result().variables) }`.\n---\nevent:\
  \ final_screen\nquestion: |\n  The answer is ${ answer }.\n---\nevent: waiting_screen\n\
  question: |\n  Hang tight.\n  Still waiting for an answer.\nsubquestion: |\n  This\
  \ screen will reload every\n  ten seconds until the answer\n  is available.\nreload:\
  \ True"
"background-error-action-demo": |-
  question: |
    Give me some numbers.
  fields:
   - Numerator: b
     datatype: number
   - Denominator: c
     datatype: number
  ---
  code: |
    need(b, c)
    task = background_action('bg_task')
  ---
  mandatory: True
  code: |
    if task.ready():
      show_result
    else:
      show_waiting_screen
  ---
  event: show_waiting_screen
  reload: True
  question: |
    Waiting for result...
  ---
  event: show_result
  question: |
    Result of task
  subquestion: |
    % if computation_ok:
    The result was ${ answer }.
    % else:
    There was an error.
    % endif
  ---
  event: bg_task
  code: |
    # This is where time-consuming code
    # would go.
    background_error_action('bg_failure')
    a = b / c
    background_response_action('bg_success', answer=a)
  ---
  event: bg_success
  code: |
    computation_ok = True
    answer = action_argument('answer')
    background_response()
  ---
  event: bg_failure
  code: |
    computation_ok = False
    background_response()
"background_action": |-
  mandatory: True
  code: |
    the_task
    if the_task.ready():
      final_screen
    else:
      waiting_screen
  ---
  code: |
    the_task = background_action('bg_task', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    # This is where time-consuming code
    # would go.
    background_response(553 + action_argument('additional'))
  ---
  event: waiting_screen
  question: |
    Hang tight.
    Still waiting for an answer.
  subquestion: |
    This screen will reload every
    ten seconds until the answer
    is available.
  reload: True
  ---
  event: final_screen
  question: |
    The answer is ${ the_task.get() }.
"background_action_fields": |-
  code: |
    the_task = background_action('bg_task', 'fields', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    the_answer = 553 + action_argument('additional')
    background_response({'the_number': the_answer})
"background_action_flash": |-
  code: |
    the_task = background_action('bg_task', 'flash', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    the_answer = str(553 + action_argument('additional'))
    background_response("The answer is " + the_answer + ".")
"background_action_javascript": |-
  code: |
    the_task = background_action('bg_task', 'javascript', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    the_answer = str(553 + action_argument('additional'))
    background_response("alert('The answer is " + the_answer + ".');")
"background_action_refresh": |-
  code: |
    the_task = background_action('bg_task', 'refresh', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    value = 553 + action_argument('additional')
    background_response_action('bg_resp', ans=value)
  ---
  event: bg_resp
  code: |
    answer = action_argument('ans')
    background_response()
"background_action_test_timing": |-
  mandatory: True
  code: |
    if the_task.ready():
      final_screen
    else:
      waiting_screen
  ---
  code: |
    need(value_to_add)
    the_task = background_action('bg_task')
    import time
    time.sleep(2)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    # This is where time-consuming code
    # would go.
    background_response(553 + value_to_add)
  ---
  event: waiting_screen
  question: |
    Hang tight.
    Still waiting for an answer.
  subquestion: |
    This screen will reload every
    ten seconds until the answer
    is available.
  reload: True
  ---
  event: final_screen
  question: |
    The answer is ${ the_task.get() }.
"background_action_with_response_action": |-
  event: bg_task
  code: |
    # This is where time-consuming code
    # would go
    value = 553 + action_argument('additional')
    background_response_action('bg_resp', ans=value)
  ---
  event: bg_resp
  code: |
    answer = action_argument('ans')
    background_response()
  ---
  event: final_screen
  question: |
    The answer is ${ answer }.
"background_response_action_flash": |-
  code: |
    the_task = background_action('bg_task', 'flash', additional=value_to_add)
  ---
  question: |
    How much shall I add to 553?
  fields:
    - Number: value_to_add
      datatype: integer
  ---
  event: bg_task
  code: |
    value = 553 + action_argument('additional')
    background_response_action('bg_resp', ans=value)
  ---
  event: bg_resp
  code: |
    answer = action_argument('ans')
    background_response("The answer is " + str(answer) + ".")
"blank-label-field": |-
  question: |
    What is your Zodiac sign?
  fields:
    - "": target_variable
"branch-error": |-
  objects:
    - tree: DAObject
    - long_branch: DAObject
  ---
  mandatory: True
  question: |
    The length of the branch is
    ${ tree.branch.length }.
  ---
  code: |
    tree.branch = long_branch
  ---
  question: |
    What is the length of the branch
    on the tree?
  fields:
    - Length: tree.branch.length
"branch-no-error": |-
  objects:
    - tree: DAObject
    - tree.branch: DAObject
  ---
  mandatory: True
  question: |
    The length of the branch is
    ${ tree.branch.length }.
  ---
  question: |
    What is the length of the branch
    on the tree?
  fields:
    - Length: tree.branch.length
"buttons": |-
  question: |
    What type of belly button do you
    have?
  field: target_variable
  buttons:
    - Innie
    - Outie
    - No belly button
"buttons-code": |-
  question: What kind of car do you want?
  buttons:
    - Ford Focus:
        code: |
          car_model = "Focus"
          car_make = "Ford"
    - Toyota Camry:
        code: |
          car_model = "Camry"
          car_make = "Toyota"
"buttons-code-color": |-
  question: What is your favorite color?
  buttons:
    - Red:
        question: Dark red or light red?
        field: favorite_color
        buttons:
          - Dark Red
          - Light Red
    - Green:
        question: Dark green or light green?
        field: favorite_color
        buttons:
          - Dark Green
          - Light Green
"buttons-code-color-iterator": |-
  objects:
    person: DAList.using(object_type=Individual, there_are_any=True)
"buttons-code-iterator": |-
  objects:
    person: DAList.using(object_type=Individual, there_are_any=True)
"buttons-code-list": |-
  field: target_variable
  question: |
    Your use of this system does not
    mean that you have a lawyer.  Do
    you understand this?
  buttons:
    code: |
      [{'understands': "I understand"},
       {'does not understand': "I do not understand"},
       {'unsure': "I'm not sure"}]
"buttons-code-list-equivalent": |-
  field: target_variable
  question: |
    Your use of this system does not
    mean that you have a lawyer.  Do
    you understand this?
  buttons:
    - "I understand": understands
    - "I do not understand": does not understand
    - "I'm not sure": unsure
"buttons-code-list-label-value": |-
  field: target_variable
  question: |
    Your use of this system does not
    mean that you have a lawyer.  Do
    you understand this?
  buttons:
    code: |
      [{'label': "I understand", 'value': 'understands'},
       {'label': "I do not understand", 'value': 'does not understand'},
       {'label': "I'm not sure", 'value': 'unsure'}]
"buttons-code-list-partial": |-
  field: target_variable
  question: |
    Your use of this system does not
    mean that you have a lawyer.  Do
    you understand this?
  buttons:
    - "I understand": understands
    - code: |
        [{'does not understand':"I do not understand"}, {'unsure':"I'm not sure"}]
"buttons-icons": |-
  question: |
    What is the most important question
    to ask?
  field: interrogatory
  buttons:
    - "When?": when
      image: calendar
    - "Where?": where
      image: map
"buttons-icons-code": |-
  question: |
    What is the most important question
    to ask?
  field: interrogatory
  buttons:
    code: myoptions
  ---
  code: |
    myoptions = \
      [{"when": "When?",
        "image": "calendar"},
       {"where": "Where?",
        "image": "map"}]
"buttons-icons-code-upload": |-
  question: |
    What is the most important question
    to ask?
  field: interrogatory
  buttons:
    code: myoptions
  ---
  code: |
    myoptions = \
      [{"when": "When?",
        "image": uploaded_file},
       {"where": "Where?",
        "image": "map"}]
  ---
  question: |
    Please upload an image.
  fields:
    - Image: uploaded_file
      datatype: file
"buttons-labels": |-
  question: |
    How would you like to pay for your
    car?
  field: target_variable
  buttons:
    - Buy it: purchaser
    - Lease it: borrower
"buttons-variation-1": |-
  field: user_gender
  question: What is your gender?
  buttons:
    - Male
    - Female
"buttons-variation-2": |-
  field: user_gender
  question: What is your gender?
  buttons:
    - Male: Male
    - Female: Female
"capitalize": |-
  question: |
    ${ capitalize(color) } is your
    favorite color, but ${ color } is
    not your favorite color of eggs.
  sets: all_done
"catchall": "features:\n  use catchall: True\n---\ngeneric object: DACatchAll\nquestion:\
  \ |\n  What is ${ x.object_name() }?\nfields:\n  - no label: x.value\nvalidation\
  \ code: |\n  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'float'\n\
  generic object: DACatchAll\nquestion: |\n  How much is ${ x.object_name() }?\nfields:\n\
  \  - Amount: x.value\n    datatype: currency\nvalidation code: |\n  define(x.instanceName,\
  \ x.value)\n---\nmandatory: True\nquestion: Summary\nsubquestion: |\n  Your name\
  \ is ${ user_name }.\n  \n  You earn ${ currency(salary) } each year."
"catchall-guess": |-
  if: |
    x.data_type_guess() in ('float', 'int')
  generic object: DACatchAll
  question: |
    How much is ${ x.object_name() }?
  fields:
    - Amount: x.value
      datatype: currency
  validation code: |
    define(x.instanceName, x.value)
"centered": |-
  features:
    centered: False
"chart": |-
  features:
    javascript: https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.js
  ---
  mandatory: True
  question: Your stuff
  subquestion: |
    <div class="chart-container" style="position: relative; height:450px; width:100%">
      <canvas id="myChart" width="600" height="400"></canvas>
    </div>
  script: |
    <script>
      var ctx = $("#myChart");
      var myDoughnutChart = new Chart(ctx, {
       type: 'doughnut',
       data: ${ json.dumps(data) }
      });
    </script>
  ---
  code: |
    data = {'datasets': [{'data': [how_many[y] for y in things],
                          'backgroundColor': [color[y] for y in range(len(things))]}],
            'labels': things}
  ---
  variable name: color
  data:
    - '#3366CC'
    - '#DC3912'
    - '#FF9900'
    - '#109618'
    - '#990099'
    - '#3B3EAC'
    - '#0099C6'
    - '#DD4477'
    - '#66AA00'
    - '#B82E2E'
    - '#316395'
    - '#994499'
    - '#22AA99'
    - '#AAAA11'
    - '#6633CC'
    - '#E67300'
    - '#8B0707'
    - '#329262'
    - '#5574A6'
    - '#3B3EAC'
"chat": |-
  interview help: |
    This is the interview help.
"chat-example-1": |-
  mandatory: True
  code: |
    set_live_help_status(availability='available', mode='help', partner_roles=['advocate', 'family law'])
  ---
  mandatory: True
  question: |
    What types of support are you seeking?
  fields:
    - no label: support_types
      datatype: checkboxes
      choices:
        - Child Support
        - Spousal Support
"chat-example-2": |-
  mandatory: True
  code: |
    multi_user = True
    set_live_help_status(availability='available', mode='peerhelp', partner_roles=['advocate'])
"chat-partners-available": |-
  mandatory: True
  question: |
    Live chat status
  subquestion: |
    % if chat_partners_available('advocate').help > 0:
    An advocate is available to assist you.
    % else:
    No advocates are available to assist
    you at this time.
    % endif
"check-in": |-
  mandatory: True
  code: |
    counter = 0
    drafts = set()
  ---
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
  check in: track_drafts
  ---
  event: track_drafts
  code: |
    counter += 1
    if action_argument('favorite_food'):
      drafts.add(action_argument('favorite_food'))
  ---
  mandatory: True
  question: |
    Your favorite food
  subquestion: |
    Your favorite food is ${ favorite_food }.

    You checked in ${ counter } times.

    Your draft choices were
    ${ comma_and_list(drafts) }.
"checkbox-dict-dict": |-
  objects:
    - foods: DADict.using(object_type=DAList.using(object_type=Thing), keys=('fr.uit', 've.get$able'), there_is_another=False, complete_attribute='complete')
"checkbox-export-value": |-
  question: |
    Here is your PDF form
  attachment:
    name: A filled-in form
    filename: filled-form
    pdf template file: sample-form-checkbox-export-value.pdf
    checkbox export value: "yes"
    fields:
      - Your Name: |
          ${ user }
      - Your Organization: |
          ${ user.organization }
      - Apple Checkbox: |
          ${ likes_apples }
      - Orange Checkbox: |
          ${ likes_oranges }
      - Pear Checkbox: |
          ${ likes_pears }
      - Toast Checkbox: |
          ${ likes_toast }
  mandatory: True
"choices": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  choices:
    - Sneakers
    - Sandals
    - Clogs
    - Other
"choices-combobox": |-
  question: |
    What is your favorite color?
  field: favorite_color
  combobox:
    - Red: red
    - Green: green
    - Purple: purple
"choices-dropdown": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  dropdown:
    - Sneakers
    - Sandals
    - Clogs
    - Other
"choices-from-code": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  choices:
    code: |
      [{'sneakers': "Sneakers",
        'help': "Comfortable shoes."},
       {'sandals': "Sandals",
        'help': "For summer."},
       {'clogs': "Clogs",
        'help': "For hippies."},
       {'other': "Other",
        'default': True,
        'help': "Because the other types suck."}]
"choices-icons": |-
  question: |
    What is the most important question
    to ask?
  field: interrogatory
  choices:
    - "When?": when
      image: calendar
    - "Where?": where
      image: map
"choices-with-default": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  default: Sandals
  choices:
    - Sneakers
    - Sandals
    - Clogs
    - Other
"choices-with-default-item": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  choices:
    - Sneakers: sneakers
    - Sandals: sandals
      default: True
    - Clogs: clogs
    - Other: other
"choices-with-help": |-
  question: |
    What type of shoes do you wear?
  field: target_variable
  choices:
    - Sneakers: sneakers
      help: |
        Comfortable shoes.
    - Sandals: sandals
      help: |
        For summer.
    - Clogs: clogs
      help: |
        For hippies.
    - Other: other
      default: True
      help: |
        Because the other types suck.
"classify": |-
  code: |
    entry = ml.one_unclassified_entry()
  ---
  mandatory: true
  code: |
    while True:
      if entry is None:
        del entry
        no_entries
      else:
        entry.classify()
        del entry
  ---
  question: |
    How do you classify this?
  subquestion: |
    ${ quote_paragraphs(entry.independent) }
  fields:
    - no label: entry.dependent
      datatype: radio
      choices:
        - Happy
        - Unhappy
        - Angry
        - Sad
"code": |-
  code: |
    fruits = peaches + pears
  ---
  question: |
    How many peaches do you have?
  fields:
    - no label: peaches
      datatype: integer
  ---
  question: |
    How many pears do you have?
  fields:
    - no label: pears
      datatype: integer
  ---
  question: |
    You have ${ fruits } pieces of fruit.
  mandatory: True
"code-example-01": |-
  code: |
    answer = 2 + 2
  ---
  question: |
    The answer is ${ answer }.
  mandatory: True
"code-example-02": |-
  code: |
    a = 2
    b = 3
    answer = a + b
"code-example-03": |-
  code: |
    a = 2
    b = 3
    answer = a + b
    b = 1
"code-example-04": |-
  question: |
    The answer is ${ 2 + 2 }.
  mandatory: True
"code-example-05": |-
  question: |
    The answer is ${ ( 42 + 4 ) * 50 / ( 5 - 2 ) }.
  mandatory: True
"code-example-06": |-
  question: |
    The answer is ${(42+4)*50/(5-2)}.
  mandatory: True
"code-example-07": |-
  code: |
    a = 4
    b = 5
    if b > a:
      b = 62
      answer = 20 + b
    else:
      answer = 40 + b
    b = 0
  ---
  question: |
    The answer is ${ answer }.
  mandatory: True
"code-example-08": |-
  code: |
    a = 4
    b = 5
    c = 2
    d = 6
    if b > a:
      b = 62
      if c < d:
        answer = 20 + b
      else:
        answer = 20 + c - d
      d = a + b
    else:
      answer = 40 + b
    b = 0
"combobox": |-
  question: |
    What is your favorite color?
  field: favorite_color
  combobox:
    - Red: red
    - Green: green
    - Purple: purple
  ---
  mandatory: True
  question: All done
  subquestion: |
    Your favorite color is ${ favorite_color }.
"command": |-
  mandatory: True
  code: |
    command('exit', url="https://google.com")
"comment": |-
  question: Do you like turnips?
  yesno: likes_turnips
  comment: |
    This question may be the most important
    question of the interview!
"comment-weather": "question: |\n  Do you agree the weather\n  is nice today? \nyesno:\
  \ day_is_nice\ncomment: |\n  We might wish to consider\n  taking out this question.\n\
  \  It does not seem necessary."
"continue": |-
  continue button field: target_variable
  question: |
    Welcome to the interview.
  subquestion: |
    When you are ready to begin, press
    Continue.
"continue-button-field": |-
  question: |
    Welcome to the interview!
  subquestion: |
    Your participation means a lot to us.
  fields:
    - Your phone number: phone_number
  continue button field: user_saw_intro
  ---
  question: Result of question
  subquestion: |
    `user_saw_intro` is
    `${ user_saw_intro }`
  mandatory: True
"continue-button-label": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  continue button label: Keep going
"continue-participation": |-
  question: |
    Welcome to the interview!
  subquestion: |
    Your participation means a lot to us.
  continue button field: user_saw_intro
"continue-serial": |-
  mandatory: true
  question: |
    This is the first screen
  buttons:
    Continue: continue
"continue-special": |-
  id: favorite_food stage 2
  question: |
    Ok, are any of these your favorite food?
  choices:
    - Strawberries:
        code: |
          favorite_food = 'strawberries'
    - Grapes:
        code: |
          favorite_food = 'grapes'
    - Kiwi:
        code: |
          favorite_food = 'kiwi'
    - Something else: continue
  ---
  id: favorite_food stage 1
  question: |
    What is your favorite food?
  choices:
    - Apples:
        code: |
          favorite_food = 'apples'
    - Oranges:
        code: |
          favorite_food = 'oranges'
    - Something else: continue
"copy-deep": |-
  objects:
    - orig_company: DAObject
  ---
  code: |
    other_company = orig_company.copy_deep('other_company')
"copy-shallow": |-
  objects:
    - orig_company: DAObject
  ---
  code: |
    other_company = orig_company.copy_shallow('other_company')
"country": |-
  question: |
    Where do you live?
  fields:
    - Country: user_country
      code: countries_list()
      default: US
  ---
  mandatory: True
  question: |
    You live in
    ${ country_name(user_country) },
    which is abbreviated
    ${ user_country }.
"cron": |-
  mandatory: True
  code: |
    allow_cron = True
    multi_user = True
    counter = 0
  ---
  event: cron_hourly
  code: |
    counter += 1
    if counter > 48:
      command('exit')
    background_response()
"css": |-
  question: |
    Do you want to build a snowman?
  yesno: wants_to_build_snowman
  css: |
    <style>
      body {
        background-image: url('${ url_of('docassemble.base:data/static/snowman.png') }');
        background-repeat: repeat;
      }
    </style>
"css-class": |-
  css class: first-question
  mandatory: True
  question: |
    View the source and look for
    the word `first-question`.
"currency": |-
  question: |
    If you sold ${ number } fish for
    a dollar each, you would get
    ${ currency(number) }.
  mandatory: True
"current-datetime": |-
  question: |
    % if current_datetime() < as_datetime('October 14, 1066'):
    The Normans have not yet invaded
    England.
    % else:
    Unfortunately, the Normans have
    already invaded England.
    % endif
  mandatory: True
"dadatetime": |-
  question: |
    Enter a date.
  subquestion: |
    The session ID of this interview is
    `${ user_info().session }`.
  fields:
    - Date: date_variable
      datatype: date
"dadict": |-
  objects:
    - player: DADict
  ---
  mandatory: True
  code: |
    player.initializeObject('trustee', DAObject)
    player.initializeObject('beneficiary', DAObject)
    player.initializeObject('grantor', DAObject)
    player.gathered = True
  ---
  mandatory: True
  question: The players
  subquestion: |
    % for type in player.keys():
    ${ player[type].firstname }
    ${ player[type].lastname } is here.

    % endfor
  ---
  generic object: DAObject
  question: |
    What is
    ${ x[i].object_possessive('name') }?
  fields:
    - First Name: x[i].firstname
    - Last Name: x[i].lastname
"dafile": |-
  imports:
    - PIL
  ---
  objects:
    - myfile: DAFile
  ---
  mandatory: True
  code: |
    myfile.initialize(filename="foo.jpg")
    im = PIL.Image.new("RGB",
                       (512, 512),
                       "green")
    im.save(myfile.path())
  ---
  mandatory: True
  question: |
    Here is the picture.
  subquestion: |
    ${ myfile }
"dafile-url-for": |-
  mandatory: True
  question: |
    This interview is all done.
  subquestion: |
    To start your case,
    [download your pleading],
    print it, and take it
    to clerk's office at the
    court.

    [download your pleading]: ${ complaint.pdf.url_for() }
  ---
  attachment:
    filename: complaint
    name: Complaint
    variable name: complaint
    content: |
      This is a complaint.

      Blah, blah, blah
"dafile-url-for-temporary": |-
  mandatory: True
  question: |
    This interview is all done.
  subquestion: |
    To start your case,
    [download your pleading]
    in the next sixty seconds,
    print it, and take it
    to clerk's office at the
    court.

    [download your pleading]: ${ complaint.pdf.url_for(temporary=True, seconds=60) }
  ---
  attachment:
    filename: complaint
    name: Complaint
    variable name: complaint
    content: |
      This is a complaint.

      Blah, blah, blah
"dalink": |-
  objects:
    - the_link: DALink
  ---
  question: |
    Tell me about a hyperlink.
  fields:
    - URL: the_link.url
      hint: "https://google.com"
    - Anchor text: the_link.anchor_text
      hint: Google
  ---
  mandatory: True
  question: |
    Hyperlinks
  subquestion: |
    You can find all the information
    you need at ${ the_link }.
  attachment:
    name: Hyperlink demonstration
    filename: hyperlink_demo
    docx template file: dalink.docx
"dalist": |-
  modules:
    - docassemble.base.legal
  ---
  objects:
    - people: PartyList
  ---
  question: |
    What is the person's name?
  fields:
    - First: people[i].name.first
    - Last: people[i].name.last
  ---
  question: |
    Do you have any people to add to the list?
  yesno: people.there_are_any
  ---
  question: |
    Do you have more people for me?
  subquestion: |
    So far you have told me about ${ people }.
  yesno: people.there_is_another
"dalist2": |-
  objects:
    - thing: DAList
"daobject": |-
  objects:
    - park: DAObject
    - turnip: DAObject
  ---
  mandatory: True
  code: |
    park.front_gate = DAObject()
  ---
  mandatory: True
  question: |
    The ${ turnip.color } turnip sat
    before the
    ${ park.front_gate.color } gate.
  ---
  generic object: DAObject
  question: |
    What is the color of the ${ x }?
  fields:
    - Color: x.color
"dastore": |-
  objects:
    - userdata: DAStore
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: preferences.favorite_fruit
  ---
  code: |
    preferences = userdata.get("prefs") or DAObject('preferences')
  ---
  mandatory: True
  code: |
    preferences.favorite_fruit
    if not userdata.defined("prefs"):
      userdata.set("prefs", preferences)
  ---
  mandatory: True
  code: |
    final_screen
  ---
  event: final_screen
  question: All done
  subquestion: |
    ${ userdata.get("prefs").favorite_fruit }
"data": |-
  variable name: fruits
  data:
    Apple:
      description: |
        The apple is a tasty red fruit.

        Everyone on ${ planet } loves
        to eat apples.
      seeds: 5
    Orange:
      description: |
        The orange is, surprisingly,
        orange-colored.  Most people
        on ${ planet } dislike
        eating oranges.
      seeds: 10
    Peach:
      description: |
        The peach is a fragile fruit.

        There are 165,323 peach
        orchards on ${ planet }.
      seeds: 1
    Pear:
      description: |
        The pear is variously yellow,
        green, or brown.

        The planet ${ planet } is
        shaped like a pear.
      seeds: 0
  ---
  question: |
    On what planet were you born?
  fields:
    Planet: planet
  ---
  question: |
    What is your favorite fruit?
  field: user_favorite_fruit
  choices:
    code: fruits.keys()
  ---
  mandatory: True
  question: |
    Summary of ${ user_favorite_fruit }
  subquestion: |
    ${ fruits[user_favorite_fruit]['description'] }

    The ${ user_favorite_fruit } has
    ${ nice_number(fruits[user_favorite_fruit]['seeds']) }
    seeds.
"data-code": |-
  variable name: fruits
  data from code:
    Apple:
      description: |
        ', '.join(['red', 'shiny', 'for teachers'])
      seeds: 10/2
    Orange:
      description: |
        capitalize('round') + " and orange"
      seeds: seeds_in_orange
    Peach:
      description: peach_description
      seeds: 10**6
    Pear:
      description: |
        "Like an apple, but not like an apple."
      seeds: 0
  ---
  question: |
    How many seeds in an orange?
  fields:
    - no label: seeds_in_orange
      datatype: range
      min: 0
      max: 100
  ---
  question: |
    How would you describe a peach?
  fields:
    - no label: peach_description
  ---
  question: |
    What is your favorite fruit?
  field: user_favorite_fruit
  choices:
    code: fruits.keys()
  ---
  mandatory: True
  question: |
    Summary of ${ user_favorite_fruit }
  subquestion: |
    ${ fruits[user_favorite_fruit]['description'] }

    The ${ user_favorite_fruit } has
    ${ nice_number(fruits[user_favorite_fruit]['seeds']) }
    seeds.
"data-simple": |-
  variable name: fruits
  data:
    - Apple
    - Orange
    - Peach
    - Pear
  ---
  question: |
    What is your favorite fruit?
  field: user_favorite_fruit
  dropdown:
    code: fruits
"database_storage": "mandatory: True\ncode: |\n  write_record('fruit', favorite_fruit)\n\
  ---\nreconsider: True\ncode: |\n  fruit_summary = ''\n  records = read_records('fruit')\n\
  \  for id in records:\n    fruit_summary += \"* \" + str(records[id]) + \"\\n\"\n\
  ---\nmandatory: True\nquestion: |\n  Contents of database\nsubquestion: |\n  The\
  \ following fruits have\n  been reported:\n  \n  ${ fruit_summary }"
"date-and-time-fields": |-
  question: |
    When is your appointment?
  fields:
    - Date: appt_date
      datatype: date
    - Time: appt_time
      datatype: time
  ---
  code: |
    appt_datetime = appt_date.replace_time(appt_time)
"date-default": |-
  question: What is your date of birth?
  fields:
    - Your birthday: birthdate
      datatype: date
      default: |
        ${ today().minus(years=100) }
"date-demo": |-
  question: |
    When did you file the complaint?
  fields:
    - Date: date_of_filing
      datatype: date
  ---
  code: |
    response_deadline = date_of_filing.plus(days=20)
    christmas = response_deadline.replace(month=12, day=25)
  ---
  mandatory: True
  question: |
    % if christmas > response_deadline:
    Your response is due
    ${ int(date_difference(starting=date_of_filing, ending=christmas).weeks) }
    weeks before Christmas.
    % else:
    Your response is due soon after Christmas!
    % endif
"date-difference": |-
  code: |
    birthday = as_datetime('5/17/2016')
    christmas = as_datetime('12/25/2016')
    interval = date_difference(starting=birthday, ending=christmas)
  ---
  question: |
    The length of time between my
    birthday and Christmas can be
    described several ways.
  subquestion: |
    * ${ interval.weeks } weeks
    * ${ interval.days } days
    * ${ interval.hours } hours
    * ${ interval.minutes } minutes
    * ${ interval.seconds } seconds
  mandatory: True
"date-field": |-
  question: |
    What is your date of birth?
  fields:
    - Birthdate: target_variable
      datatype: date
"date-interval": |-
  question: |
    In three days, it will be
    ${ format_date( current_datetime() + date_interval(days=3) ) }.
  mandatory: True
"date-limit": |-
  question: What is your date of birth?
  fields:
    - Your birthday: birthdate
      datatype: date
      max: ${ today() }
"date-parts": |-
  mandatory: True
  question: |
    The date ${ some_date }, explained.
  subquestion: |
    The year is ${ year_of(some_date) }.

    The month is ${ month_of(some_date) }.

    The month as a word is
    ${ month_of(some_date, as_word=True) }.

    The day of month is
    ${ day_of(some_date) }.

    The day of week is
    ${ dow_of(some_date) }.

    The day of week as a word is
    ${ dow_of(some_date, as_word=True) }.
"datetime-field": |-
  question: |
    When is your appointment?
  fields:
    - Date and time: target_variable
      datatype: datetime
"daweb": "objects:\n  - web: DAWeb.using(base_url='https://api.spacexdata.com/v3')\n\
  ---\ncode: |\n  launch_info = web.get('launches/latest')\n---\ncode: |\n  ship_info\
  \ = web.get('ships',\n                      data={'ship_type': 'Tug'})\n---\nmandatory:\
  \ True\nquestion: |\n  SpaceX information\nsubquestion: |\n  The latest SpaceX launch\
  \ involved a\n  ${ launch_info['rocket']['rocket_name'] }.\n\n  [FILE ${ launch_info['links']['flickr_images'][0]\
  \ }]\n  \n  SpaceX operates the following tug boats:\n  \n  % for item in ship_info:\n\
  \  * ${ item['ship_name'] }\n  % endfor"
"dead-end": |-
  mandatory: True
  code: |
    # insert interview logic here
    all_done
  ---
  question: |
    You have reached the end of the
    interview.
  subquestion: |
    I hope you had a good time!
  sets: all_done
"debug-mode": |-
  features:
    debug: False
"declarative": |-
  objects:
    injury_location: Address
    defendant_address: Address
    plaintiff_address: Address
    court: Court
"declarative-classes": ""
"decoration": |-
  decoration: kids
  question:
    Do you have children?
  yesno: has_children
"def": "def: my_explanation\nmako: |\n  <%def name=\"explain(fruit)\">\n  ${ fruit\
  \ } are a type of fruit, and\n  they are delicious.\n  </%def>\n  <%def name=\"\
  deride(fruit)\">\n  ${ fruit } are disgusting, and they\n  are basically inedible.\n\
  \  </%def>\n---\nquestion: The world of fruit\nsubquestion: |\n  There are many\
  \ types of fruit in the\n  world.\n  \n  ${ explain(\"Peaches\") }\n  ${ explain(\"\
  Oranges\") }\n  ${ deride(\"Strawberries\") }\nusedefs:\n - my_explanation\nmandatory:\
  \ True"
"default-date-min": |-
  features:
    default date min: "1950-01-01"
    default date max: "2029-12-31"
  ---
  question: |
    What is the date?
  fields:
    - Date: the_date
      datatype: date
"default-screen-parts": |-
  default screen parts:
    under: |
      You have seen
      ${ quantity_noun(counter, 'screen') }
      of this interview so far.
    help label: |
      About
    continue button label: |
      Go to next step
    subtitle: |
      A _groovy_ interview
    pre: |
      The text below **does not**
      constitute legal advice.
    submit: |
      Please re-read the question
      before moving forward.
    post: |
      This interview was generously
      sponsored by Example, Inc.
    css class: normalquestion
"default-screen-parts-override": |-
  interview help: |
    This interview demonstrates the
    `default screen parts` feature.
"default-validation-messages": |-
  default validation messages:
    required: |
      I would really like to know this.
      Please tell me!
    max: |
      No more than %s, please!
"define": |-
  code: |
    define('favorite_fruit', 'apple')
  ---
  question: Summary
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.
  mandatory: True
"defined": |-
  question: Summary
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.

    % if defined('favorite_vegetable'):
    Your favorite vegetable
    is ${ favorite_vegetable }.
    % else:
    I do not know your favorite
    vegetable.
    % endif
  mandatory: True
"del": |-
  mandatory: True
  code: |
    if user_is_communist and user_reconsidering_communism:
      user_reconsidering_communism = False
      del user_is_communist
"depends-on": |-
  question: |
    What is A?
  fields:
    - A: a
      datatype: number
  ---
  question: |
    What is the square of ${ a }?
  fields:
    - B: b
      datatype: number
  depends on:
    - a
  ---
  code: |
    c = a + b
  depends on:
    - a
    - b
  ---
  event: review_screen
  skip undefined: False
  question: |
    Review your answers.
  review:
    - label: Edit A
      field: a
      button: |
        A is ${ a }.
    - label: Edit B
      field: b
      button: |
        B is ${ b }.
    - note: |
        C is ${ c }.
  ---
  mandatory: True
  code: |
    need(a, b, c)
    review_screen
"depends-on-code": |-
  question: |
    What is A?
  fields:
    - A: a
      datatype: number
  ---
  code: |
    b = a * a
  depends on:
    - a
  ---
  code: |
    c = a + b
  depends on:
    - a
    - b
  ---
  event: review_screen
  skip undefined: False
  question: |
    Review your answers.
  review:
    - label: Edit A
      field: a
      button: |
        A is ${ a }.
    - note: |
        B is ${ b }.
    - note: |
        C is ${ c }.
  ---
  mandatory: True
  code: |
    need(a, b, c)
    review_screen
"depends-on-iterator": |-
  objects:
    - people: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
  ---
  question: |
    How much does ${ people[i] }
    get paid per pay period?
  fields:
    - Amount: people[i].income
      datatype: currency
  depends on:
    - people[i].pay_period
  ---
  question: |
    How frequently does
    ${ people[i] } get paid?
  fields:
    - no label: people[i].pay_period
      datatype: number
      choices:
        - Monthly: 12.0
        - Biweekly: 26.0
        - Semi-monthly: 24.0
        - Weekly: 52.0
  ---
  code: |
    people[i].annual_income = people[i].income * people[i].pay_period
  depends on:
    - people[i].pay_period
    - people[i].income
  ---
  question: |
    What is the name of the
    ${ ordinal(i) } person?
  fields:
    - First name: people[i].name.first
    - Last name: people[i].name.last
  ---
  code: |
    people[i].name.first
    people[i].annual_income
    people[i].complete = True
  ---
  question: |
    Is there another person?
  yesno: people.there_is_another
  ---
  field: review_screen
  question: Review
  subquestion: |
    ${ people.table }

    ${ people.add_action() }
  ---
  table: people.table
  rows: people
  columns:
    - Name: row_item.name
    - Annual income: currency(row_item.annual_income)
  edit:
    - name.first
    - pay_period
  ---
  event: final_screen
  question: Summary
  subquestion: |
    % for person in people:
    ${ person }
    makes
    ${ currency(person.income) }
    ${ nice_number(person.pay_period) }
    times per year, for an annual income of
    ${ currency(person.annual_income) }.

    % endfor

    [Review](${ url_action('review_screen') })
  ---
  mandatory: True
  code: |
    people.gather()
    people.table
    final_screen
"device": |-
  question: |
    % if device().is_mobile:
    You are on a phone.
    % elif device().is_tablet:
    You are on a tablet.
    % elif device().is_pc:
    You are on a PC.
    % elif device().is_bot:
    You are a bot.
    % else:
    Your device is: ${ device() }.
    % endif
  subquestion: |
    % if device().is_touch_capable:
    You are using a touchscreen device.
    % else:
    You are not using a touchscreen device.
    % endif
  mandatory: True
"device-ip": |-
  question: |
    Your IP address is
    ${ device(ip=True) }.
  mandatory: True
"device-local": |-
  mandatory: True
  code: |
    multi_user = True
  ---
  mandatory: True
  code: |
    device_local.how_doing
    final_screen
  ---
  question: |
    How are you doing today?
  field: device_local.how_doing
  choices:
    - Well: well
    - Poorly: poor
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Favorite fruit: favorite_fruit
  ---
  event: final_screen
  question: |
    Your favorite fruit is ${ favorite_fruit }
  subquestion: |
    % if device_local.how_doing == 'well':
    I am glad you are doing well.
    % else:
    I am sorry you are poorly today.
    % endif

    Try re-joining this interview by
    using a different web browser, an
    incognito tab, or by closing your
    browser application and opening it
    again, and visiting this URL:

    [${ interview_url() }](${ interview_url() })
"dialog-box": |-
  mandatory: True
  code: |
    if task_not_yet_performed('show current date'):
      mark_task_as_performed('show current date')
      force_ask('show_date')
  ---
  event: show_date
  question: |
    The current date is ${ format_date(current_datetime()) }.
  buttons:
    - Ok: continue
"disable-others": |-
  question: |
    What is your favorite color?
  fields:
    - Favorite color: favorite_color
      choices:
        - Red
        - Blue
        - Green
        - Purple
      disable others: True
    - note: |
        If your favorite color is
        not listed, enter your
        favorite color here.
    - Other: favorite_color
  ---
  question: |
    Your favorite color is
    ${ favorite_color }.
  mandatory: True
"disable-others-list": |-
  question: |
    What is your favorite color?
  fields:
    - Favorite color: favorite_color
      choices:
        - Red
        - Blue
        - Green
        - Purple
      disable others:
        - favorite_color
        - second_favorite_color
    - note: |
        If your favorite color is
        not listed, enter your
        favorite color here.
    - Other: favorite_color
    - Second favorite color: second_favorite_color
    - Explain your reasoning: reason
      input type: area
  ---
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    Your reasoning is:

    ${ reason }
  mandatory: True
"dispatch": |-
  mandatory: True
  code: |
    dispatch('main_menu_selection')
    final_screen
  ---
  question: |
    Main menu
  field: main_menu_selection
  buttons:
    - Fruit: fruit_menu
    - Vegetables: vegetable_menu
    - Rocks: rocks_page
    - Continue: Null
  ---
  code: |
    fruit_menu = dispatch('fruit_menu_selection')
  ---
  question: |
    Fruit menu
  field: fruit_menu_selection
  choices:
    - Apple: apple
    - Peach: peach
    - Back: Null
  ---
  code: |
    vegetable_menu = dispatch('vegetable_menu_selection')
  ---
  question: |
    Vegetable menu
  field: vegetable_menu_selection
  choices:
    - Turnip: turnip
    - Potato: potato
    - Back: Null
  ---
  question: Rocks screen
  field: rocks_page
  ---
  question: Apples screen
  subquestion: |
    % if likes_apples:
    You like apples.
    % endif
  field: apple
  ---
  question: |
    Do you like apples?
  yesno: likes_apples
  ---
  question: Peaches screen
  subquestion: |
    You selected
    ${ main_menu_selection }
    on the main menu and
    ${ fruit_menu_selection }
    on the fruit menu.
  field: peach
  ---
  event: turnip
  question: Turnip screen
  subquestion: |
    You cannot go forward from
    the turnip screen.
  ---
  question: Potato screen
  field: potato
  ---
  event: final_screen
  question: |
    Done with the interview.
"dispatch-count": |-
  mandatory: True
  code: |
    visited_apple = 0
    visited_orange = 0
  ---
  mandatory: True
  code: |
    dispatch('main_menu_selection')
    final_screen
  ---
  question: |
    Main menu
  field: main_menu_selection
  buttons:
    - Apple: apple
    - Orange: orange
    - Continue: Null
  ---
  question: Apple screen
  field: apple
  need: apple_tracked
  ---
  reconsider: True
  code: |
    visited_apple += 1
    apple_tracked = True
  ---
  question: Orange screen
  field: orange
  need: orange_tracked
  ---
  reconsider: True
  code: |
    visited_orange += 1
    orange_tracked = True
  ---
  event: final_screen
  question: |
    All done.
  subquestion: |
    % if visited_apple > 0:
    You visited the apple screen
    ${ nice_number(visited_apple) }
    times.
    % endif

    % if visited_orange > 0:
    You visited the orange screen
    ${ nice_number(visited_orange) }
    times.
    % endif
"dispatch-track": |-
  mandatory: True
  code: |
    visited_apple = False
    visited_orange = False
  ---
  mandatory: True
  code: |
    dispatch('main_menu_selection')
    final_screen
  ---
  question: |
    Main menu
  field: main_menu_selection
  buttons:
    - Apple: apple
    - Orange: orange
    - Continue: Null
  ---
  question: Apple screen
  field: apple
  need: apple_tracked
  ---
  code: |
    visited_apple = True
    apple_tracked = True
  ---
  question: Orange screen
  field: orange
  need: orange_tracked
  ---
  code: |
    visited_orange = True
    orange_tracked = True
  ---
  event: final_screen
  question: |
    All done.
  subquestion: |
    % if visited_apple:
    You visited the apple menu.
    % endif

    % if visited_orange:
    You visited the orange menu.
    % endif
"document": |-
  question: Here is your document.
  attachments:
    - name: Summary of Benefits
      filename: benefits_summary
      content: |
        [BOLDCENTER] Summary of Benefits

        ${ client } is entitled to
        benefits plan ${ benefits }.
  mandatory: True
"document-cache": "question: |\n  What is your name?\nfields:\n  First Name: firstname\n\
  ---\nmandatory: True\nfield: first_round\nquestion: |\n  Here are your documents,\
  \ ${ firstname }.\nsubquestion: |\n  Look at the Preview tab of each\n  document\
  \ and note the time.\n  This is the time the document\n  was generated.\nallow emailing:\
  \ False\nattachments:\n  - name: Apples\n    filename: apples\n    variable name:\
  \ apples\n    content: |\n      ${ firstname },\n\n      Apples are tasty as of\n\
  \      ${ format_time(current_datetime(), format='long') }.\n  - name: Oranges\n\
  \    filename: oranges\n    variable name: oranges\n    content: |\n      ${ firstname\
  \ },\n\n      Oranges are tasty as of\n      ${ format_time(current_datetime(),\
  \ format='long') }.\n---\nattachment:\n  name: Grapes\n  filename: grapes\n  variable\
  \ name: grapes\n  content: |\n      ${ firstname },\n\n      Grapes are tasty as\
  \ of\n      ${ format_time(current_datetime(), format='long') }.\n---\nmandatory:\
  \ True\nfield: second_round\nquestion: |\n  Here is another set of documents,\n\
  \  ${ firstname }.\nsubquestion: |\n  You saw the Apples document on the\n  previous\
  \ screen.  The Grapes\n  document is new.  The Apples\n  document has not changed.\n\
  \  \n  When you press Continue, I will ask\n  you again for your name.  Put in a\n\
  \  different name this time.\nallow emailing: False\nattachment code: |\n  [apples,\
  \ grapes]\n---\nmandatory: True\ncode: |\n  del firstname\n---\nmandatory: True\n\
  code: |\n  firstname\n---\nmandatory: True\nquestion: |\n  Here is your final set\
  \ of documents,\n  ${ firstname }.\nsubquestion: |\n  Note that even though your\
  \ name\n  changed, the documents did not.\nallow emailing: False\nattachment code:\
  \ |\n  [apples, oranges, grapes]"
"document-cache-invalidate": "mandatory: True\ncode: |\n  client = \"Jane Doe\"\n\
  \  benefits = \"G-432\"\n---\nmandatory: True\ncode: |\n  document_initially_shown\n\
  \  first_draft_deleted\n  client = \"John Doe\"\n  benefits = \"H-545\"\n  document_shown_again\n\
  ---\nattachment:\n  name: Summary of Benefits\n  filename: benefits_summary\n  variable\
  \ name: benefits_summary\n  content: |\n    [BOLDCENTER] Summary of Benefits\n \
  \   \n    ${ client } is entitled to\n    benefits plan ${ benefits }.\n---\nquestion:\
  \ |\n  Here is your document.\nattachment code: benefits_summary\nfield: document_initially_shown\n\
  ---\ncode: |\n  del benefits_summary\n  first_draft_deleted = True\n---\nquestion:\
  \ Here is your document again.\nattachment code: benefits_summary\nevent: document_shown_again"
"document-docx": "question: Here is your document.\nattachments:\n  - name: Summary\
  \ of Benefits\n    filename: benefits_summary\n    valid formats:\n      - docx\n\
  \      - pdf    \n    content: |\n      [BOLDCENTER] Summary of Benefits\n\n   \
  \   ${ client } is entitled to\n      benefits plan ${ benefits }.\nmandatory: True"
"document-docx-from-rtf": "question: Here is your document.\nattachments:\n  - name:\
  \ Summary of Benefits\n    filename: benefits_summary\n    valid formats:\n    \
  \  - rtf to docx\n      - pdf    \n    content: |\n      [BOLDCENTER] Summary of\
  \ Benefits\n\n      ${ client } is entitled to\n      benefits plan ${ benefits\
  \ }.\nmandatory: True"
"document-email-custom": |-
  mandatory: True
  question: Your document is ready.
  email template: hello_email
  email address default: |
    ${ user_email }
  attachment:
    - name: A hello world document
      filename: Hello_World
      description: |
        A document with a classic message
      content: |
        Hello, world!
      valid formats:
        - pdf
        - docx
  always include editable files: True
  ---
  template: hello_email
  subject: |
    Your hello world document
  content: |
    Dear sir or madam,

    Your hello world document is attached hereto for your perusal.
  ---
  code: |
    user_email = 'user@aol.com'
"document-file": |-
  question: Your document is ready.
  attachment:
    - name: A *hello world* document
      filename: Hello_World_Document
      content file: hello.md
  mandatory: True
"document-file-code": |-
  code: |
    template_file_to_use = 'hello.md'
  ---
  question: Your document is ready.
  attachment:
    - name: A *hello world* document
      filename: Hello_World_Document
      content file:
        code: template_file_to_use
  mandatory: True
"document-language": "initial: True\ncode: |\n  set_language('es')\n---\nmandatory:\
  \ True\nlanguage: es\nquestion: El documento est\xE1 listo.\nattachment:\n  - name:\
  \ Alimentos\n    language: en\n    filename: food_order\n    content: |\n      This\
  \ customer would like to order\n      ${ comma_and_list('fries', 'a Coke') }."
"document-language-docx": "initial: True\ncode: |\n  set_language('es')\n---\ncode:\
  \ |\n  food_list = DAList(elements=['fries', 'a Coke'])\n---\nmandatory: True\n\
  language: es\nquestion: El documento est\xE1 listo.\nattachment:\n  - name: Alimentos\n\
  \    language: en\n    filename: food_order\n    docx template file: document-language.docx\n\
  \    field variables:\n      - food_list"
"document-links": |-
  mandatory: True
  question: |
    This interview is all done.
  subquestion: |
    To start your case,
    [download your pleading],
    print it, and take it
    to clerk's office at the
    court.

    ${ complaint }

    If you want to make changes
    to it first, you can download
    the [RTF version].

    [download your pleading]: ${ complaint.url_for() }
    [RTF version]: ${ complaint.rtf.url_for() }
  ---
  attachment:
    filename: complaint
    name: Complaint
    variable name: complaint
    content: |
      This is a complaint.

      Blah, blah, blah
"document-links-limited": "mandatory: True\nquestion: |\n  This interview is all done.\n\
  subquestion: |\n  Here is your document!\n  \n  ${ complaint }\n---\nattachment:\n\
  \  filename: complaint\n  name: Complaint\n  variable name: complaint\n  content:\
  \ |\n    This is a complaint.\n\n    Blah, blah, blah\n  valid formats:\n    - pdf"
"document-markup": "mandatory: True\nquestion: Here is your document.\nattachment:\n\
  \  name: A demonstration\n  filename: demo_document\n  description: |\n    This\
  \ document demonstrates the\n    markup codes you can insert into\n    document\
  \ text.\n  valid formats:\n    - pdf\n    - tex\n  metadata:\n    FirstFooterLeft:\
  \ |\n      First of [TOTALPAGES] pages\n    HeaderLeft: |\n      Page [PAGENUM]\
  \ of [TOTALPAGES]\n  content: |\n    [BOLDCENTER] Lorem Ipsum Dolor Sit\n    Amet\n\
  \n    [BEGIN_CAPTION]\n    Consectetur adipiscing elit.\n    \n    Integer nec ${\
  \ client_name } odio.\n\n    Praesent libero.\n\n    [VERTICAL_LINE]\n\n    Sed\
  \ cursus ante dapibus diam.\n\n    Sed nisi.\n    [END_CAPTION]\n\n    [CENTER]\
  \ Nulla quis sem at\n    nibh elementum imperdiet.\n\n    Duis sagittis ipsum. Praesent\n\
  \    mauris. Fusce nec tellus sed\n    augue semper porta. Mauris massa.\n    Proin\
  \ ut ligula vel nunc egestas\n    porttitor.\n    \n    Vestibulum lacinia arcu\
  \ eget nulla. \n    Class aptent taciti sociosqu ad\n    litora torquent per conubia\
  \ nostra,\n    per inceptos himenaeos.\n    \n    Curabitur sodales\n    ligula\
  \ in libero. Praesent\n    mauris. Fusce nec tellus sed\n    augue semper porta.\
  \ Mauris massa.\n    Proin ut ligula vel nunc egestas\n    porttitor.\n\n    [FLUSHLEFT]\
  \ Sed dignissim. [NEWLINE]\n    Lacinia nunc. [NEWLINE]\n    Curabitur tortor. [NEWLINE]\n\
  \    These lines are [NEWLINE]\n    flushed left.\n\n    Pellentesque nibh.\n\n\
  \    [NOINDENT] Primis tacimates eos\n    in. Vel affert vituperata te, eos\n  \
  \  te melius legimus temporibus. At\n    quaeque aliquando contentiones\n    his.\
  \ First-line indentation is\n    suppressed in this paragraph.\n    \n    [FILE\
  \ stareps.eps]\n    \n    Unless a width is specified, images\n    will be displayed\
  \ four inches wide.\n    Maecenas mattis. Sed convallis\n    tristique sem.\n\n\
  \    [FLUSHRIGHT] Proin ut ligula\n    vel nunc egestas porttitor.\n    [NEWLINE]\n\
  \    Quisque volutpat condimentum\n    velit. [NEWLINE]\n    We are flushed right.\n\
  \    \n    Morbi lectus risus, iaculis vel,\n    suscipit quis, luctus non, massa.\n\
  \    Time for a page break.\n\n    [PAGEBREAK]\n\n    Nulla facilisi. Ut fringilla.\n\
  \    Suspendisse potenti.\n    \n    [INDENTBY 3in] Curabitur tortor.\n    Pellentesque\
  \ nibh. Aenean quam.\n    In scelerisque sem at dolor.\n    Maecenas mattis. Sed\
  \ convallis\n    tristique sem. Proin ut ligula\n    vel nunc egestas porttitor.\
  \ I\n    am indented by three inches.\n\n    [INDENTBY 1in 1in] Morbi lectus\n \
  \   risus, iaculis vel, suscipit quis,\n    luctus non, massa.  Fusce ac\n    turpis\
  \ quis ligula lacinia\n    aliquet. Sed convallis tristique\n    sem. I am indented\
  \ by one inch\n    on each side.\n\n    Now, let's put text in two columns\n   \
  \ side by side.\n    \n    [BEGIN_TWOCOL]\n\n    This is the first column.\n   \
  \ \n    Nulla facilisi.\n\n    Let's insert some vertical space.\n\n    [SKIPLINE]\n\
  \    Cras metus.\n\n    [BREAK]\n\n    This is the second column.\n    \n    Cras\
  \ metus. Let's have some\n    vertical space again.\n\n    [SKIPLINE]\n\n    Integer\
  \ id quam.\n\n    Morbi mi.\n\n    [END_TWOCOL]\n\n    \n    Quisque nisl felis,\
  \ venenatis\n    tristique, dignissim in,\n    ultrices sit amet, augue.\n\n   \
  \ [FLUSHLEFT] [FILE bluediamond.png, 0.5in]\n\n    Maecenas mattis. Sed convallis\n\
  \    tristique sem.\n    \n    [BORDER] Vestibulum ante ipsum\n    primis in faucibus\
  \ orci luctus et\n    ultrices posuere cubilia\n    Curae; [FILE bluediamond.png,\
  \ 10pt]\n    Morbi lacinia molestie dui. \n\n    Here we see various types of dashes.\n\
  \    Praesent[HYPHEN]mauris.  Nulla \n    quis [ENDASH] sem at nibh\n    elementum\
  \ imperdiet.  Duis\n    sagittis[EMDASH]ipsum.\n\n    [BORDER] Class aptent\n  \
  \  taciti sociosqu ad litora torquent\n    per conubia nostra, per inceptos \n \
  \   himenaeos.\n    [NEWPAR]\n    Curabitur sodales ligula in libero.\n    Sed dignissim\
  \ lacinia nunc.\n    [NEWPAR]\n    You can include paragraph breaks \n    inside\
  \ of a border.\n\n    Aenean quam. In scelerisque sem at \n    dolor. Maecenas mattis.\
  \ Sed \n    convallis tristique sem.  Let us \n    now stop indenting the first\
  \ line \n    of each paragraph.\n\n    [STOP_INDENTATION]\n\n    Duis sagittis ipsum.\
  \ Praesent\n    mauris. Fusce nec tellus sed\n    augue semper porta. Mauris massa.\n\
  \    Proin ut ligula vel nunc egestas\n    porttitor.\n\n    Praesent mauris. Fusce\
  \ nec tellus sed\n    augue semper porta. \n\n    [TAB] Even though we are no longer\n\
  \    indenting the first line of each \n    paragraph automatically, we can \n \
  \   still indent manually.\n    \n    Vestibulum lacinia arcu eget nulla. \n   \
  \ Class aptent taciti sociosqu ad\n    litora torquent per conubia nostra,\n   \
  \ per inceptos himenaeos.  Let us go\n    back to indenting the first line\n   \
  \ of each paragraph.  \n\n    [START_INDENTATION]\n\n    Duis sagittis ipsum. Praesent\
  \ mauris. \n    Fusce nec tellus sed augue semper \n    porta. Mauris massa.  Proin\
  \ ut \n    ligula vel nunc egestas porttitor.\n    \n    Vestibulum lacinia arcu\
  \ eget nulla. \n    Class aptent taciti sociosqu ad\n    litora torquent per conubia\
  \ nostra,\n    per inceptos himenaeos.  Let's try\n    single spacing now.\n\n \
  \   [SINGLESPACING]\n\n    Ullum primis scripserit ne vis, ad eam\n    quem dictas\
  \ dissentias. Alia\n    scripserit vel cu, choro delicata\n    dissentiunt mel no,\
  \ reque persequeris\n    mei an. Paulo graeci ex eos, no usu\n    dicit inimicus.\
  \ In putant ornatus\n    forensibus cum, percipit mediocrem\n    in vel.\n\n   \
  \ Alii timeam eos ut, habeo oblique\n    ocurreret ei sea. Quis utroque\n    definiebas\
  \ et per, ad sumo\n    repudiandae eam, pro no sale\n    adolescens. Habeo splendide\n\
  \    evertitur has eu, in has vocent\n    signiferumque. Ex qui homero graeci\n\
  \    quaerendum, nulla veniam blandit\n    ei mea. Sea at idque referrentur.\n \
  \   Sit autem liberavisse te.  Let's \n    go back to double spacing now.\n\n  \
  \  [DOUBLESPACING]\n\n    Sea ad tacimates elaboraret, \n    vel simul urbanitas\
  \ efficiantur id. \n    Id mel option denique. Ludus essent\n    eu ius, natum option\
  \ appareat cu mea, \n    in saepe deterruisset pri. Mei et vero \n    admodum. At\
  \ quas pertinax sed, et mel \n    modo probo iriure. Per te sententiae \n    elaboraret.\
  \ Cum tritani delectus \n    definitionem ne."
"document-variable-name": |-
  mandatory: True
  question: Ok, all done.
  subquestion: |
    % if submit_to_authority:
      % if sent_ok:
    Your document was sent.
      % else:
    For some reason, I was not able to
    send your document.
      % endif
    % else:
    Ok, I will not send your document to
    The Man.
    % endif
  ---
  question: Your document is ready.
  subquestion: |
    Would you like to submit the document
    below to the authorities?
  yesno: submit_to_authority
  attachment:
    - name: A *hello world* document
      filename: Hello_World_Document
      variable name: hello_file
      content: |
        Hello, world!
  ---
  code: |
    sent_ok = send_email(to=[authority],
                         template=my_email,
                         attachments=[hello_file])
"document-variable-name-link": |-
  attachment:
    filename: Hello_World
    variable name: my_file
    content: |
      Hello, world!
  ---
  mandatory: True
  question: |
    All done.
  subquestion: |
    You can download your document in
    [PDF](${ my_file.pdf.url_for() })
    or
    [RTF](${ my_file.rtf.url_for() })
    format.
"docx-jinja2-demo": |-
  event: document_shown
  question: |
    Here is the document.
  attachment:
    docx template file: docx-jinja2-demo.docx
"docx-recipe": |-
  mandatory: True
  question: |
    Here is your recipe.  Enjoy!
  attachment:
    name: Your recipe
    filename: recipe
    docx template file: recipe_template.docx
    fields:
      - title: Mandelbrot cookies
      - oven_temperature: ${ oven_degrees } degrees
      - ingredients:
          - apple sauce
          - ${ special_ingredient }
          - flour
          - sugar
      - preparation_time: 48 hours
"docx-table-columns": |-
  generic object: Individual
  question: |
    How much does ${ x } receive from ${ i }?
  fields:
    - Income: x.income[i]
      datatype: currency
"docx-template": |-
  question: |
    Here is your document.
  subquestion: |
    Does it meet your approval?
  yesno: user_approves
  attachment:
    name: Your letter
    filename: letter
    docx template file: letter_template.docx
    valid formats:
      - pdf
      - docx
"docx-template-auto": ""
"docx-template-code": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    name: Your letter
    filename: letter
    docx template file: letter_template_code.docx
    valid types:
      - pdf
    fields:
      "letter_date": ${ format_date(today()) }
      "phone_number": 202-555-1234
      "subject_matter": ${ subject_matter }
      "address_block": ${ adverse_party.address_block() }
      "signature": ${ user.signature }
    code: |
      dict(full_name=user.name.full())
"docx-template-code-2": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    name: Your letter
    filename: letter
    docx template file: letter_template_code.docx
    code: |
      dict(full_name=user.name.full(),
           letter_date=format_date(today()),
           phone_number='202-555-1234',
           subject_matter=subject_matter,
           address_block=adverse_party.address_block(),
           signature=user.signature)
"docx-template-multiple": |-
  question: |
    Tell me about a fruit.
  fields:
    - Name: seeds_of_fruit.new_item_name
    - Seeds: seeds_of_fruit.new_item_value
      datatype: integer
      min: 0
"docx-template-table": |-
  objects:
    seeds_of_fruit: DADict
  ---
  mandatory: true
  code: |
    seeds_of_fruit.there_are_any = True
    introduction_shown
  ---
  question: |
    Tell me about a fruit.
  fields:
    - Name: seeds_of_fruit.new_item_name
    - Seeds: seeds_of_fruit.new_item_value
      datatype: integer
      min: 0
  ---
  question: |
    Are there any other fruits you would
    like to describe?
  yesno: seeds_of_fruit.there_is_another
  ---
  mandatory: True
  question: |
    Here is your document.
  attachment:
    docx template file: table_template.docx
"doors": |-
  question: |
    Which door do you choose?
  field: door_choice
  choices:
    - Door Number 1
    - Door Number 2
  ---
  mandatory: True
  code: |
    if door_choice == 'Door Number 1':
      good_luck
    if door_choice == 'Door Number 2':
      bad_luck
  ---
  question: |
    You walk into a field of clover.
  event: good_luck
  ---
  question: |
    You walk into a stinky swamp.
  event: bad_luck
"dual-dict": |-
  mandatory: True
  code: |
    veggies = DADict('veggies')
    veggies.object_type = DAList
    veggies.initializeObject('potato')
    veggies.initializeObject('turnip')
    fruit.object_type = DAObject
    fruit.initializeObject('a')
    fruit['a'].seed_info = DAObject("fruit['a']")
    fruit['a'].seed_info.tally = dict()
    fruit['a'].seed_info.tally['b'] = DAObject("fruit['a'].seed_info.tally['b']")
    fruit['a'].seed_info.tally['b'].molecules = DAList("fruit['a'].seed_info.tally['b'].molecules")
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[0]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[1]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[2]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[3]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[4]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[5]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[6]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[7]"))
    fruit['a'].seed_info.tally['b'].molecules.append(DAObject("fruit['a'].seed_info.tally['b'].molecules[8]"))
"edit-list": "mandatory: True\nquestion: |\n  All done\nsubquestion: |\n  The people\
  \ are ${ person }.\n\n  Your favorite is ${ favorite }.\n  \n  ${ person.table }\n\
  \  \n  ${ person.add_action() }\n---\ntable: person.table\nrows: person\ncolumns:\n\
  \  - Name: |\n      row_item.name.full()\n  - Fruit: |\n      row_item.favorite_fruit\n\
  edit:\n  - name.first\n  - favorite_fruit"
"edit-list-complete-complex": "objects:\n  - person: DAList.using(object_type=Individual,\n\
  \                         there_are_any=True,\n                         complete_attribute='complete')\n\
  ---\ncode: |\n  person[i].name.first\n  if person[i].favorite_fruit == 'apple':\n\
  \    person[i].favorite_apple\n  person[i].complete = True\n---\nquestion: |\n \
  \ Who is the ${ ordinal(i) } person?\nfields:\n  - First Name: person[i].name.first\n\
  \  - Last Name: person[i].name.last\n---\nquestion: |\n  What is ${ person[i].possessive('favorite\
  \ fruit') }?\nfields:\n  - Fruit: person[i].favorite_fruit\n---\nquestion: |\n \
  \ What is ${ person[i].possessive('favorite apple') }?\nfields:\n  - Variety: person[i].favorite_apple\n\
  ---\nquestion: |\n  Are there any more people\n  you would like to mention?\nyesno:\
  \ person.there_is_another\n---\nmandatory: true\nquestion: |\n  Summary of answers\n\
  subquestion: |\n  ${ person.table }\n  \n  ${ person.add_action() }\n---\ntable:\
  \ person.table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
  \  - Fruit: |\n      row_item.favorite_fruit\nedit:\n  - name.first\n  - favorite_fruit"
"edit-list-manual": "objects:\n  - person: DAList\n---\nmandatory: True\ncode: |\n\
  \  person.object_type = Individual\n  person.there_are_any = True\n  person.complete_attribute\
  \ = 'complete'\n---\ncode: |\n  person[i].name.first\n  person[i].favorite_fruit\n\
  \  person[i].complete = True\n---\nquestion: |\n  Who is the ${ ordinal(i) } person?\n\
  fields:\n  - First Name: person[i].name.first\n  - Last Name: person[i].name.last\n\
  ---\nquestion: |\n  What is ${ person[i].possessive('favorite fruit') }?\nfields:\n\
  \  - Fruit: person[i].favorite_fruit\n---\nquestion: |\n  Are there any more people\n\
  \  you would like to mention?\nyesno: person.there_is_another\n---\nquestion: |\n\
  \  Who is your favorite person?\nfields:\n  - Favorite: favorite\n    code: person\n\
  ---\nmandatory: True\nquestion: |\n  All done\nsubquestion: |\n  The people are\
  \ ${ person }.\n\n  Your favorite is ${ favorite }.\n  \n  ${ people_table }\n \
  \ \n  [<i class=\"fas fa-plus-circle\"></i> Add another person](${ url_action('person_add')\
  \ })\n---\ntable: people_table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
  \  - Fruit: |\n      row_item.favorite_fruit\n  - Action: |\n      '[:pencil-alt:]('\
  \ + url_action(row_item.instanceName + '.review') + ')&nbsp;&nbsp;&nbsp;&nbsp;'\
  \ + \\\n      '[:trash:](' + url_action('person_del', item=row_item.instanceName)\
  \ + ')'\n---\nevent: person[i].review\nquestion: |\n  Edit information about \n\
  \  ${ person[i] }.\nreview:\n  - Edit name: person[i].name.first\n    button: |\n\
  \      **Name**: ${ person[i] }\n  - Edit fruit: person[i].favorite_fruit\n    button:\
  \ |\n      **Favorite fruit**: \n      ${ person[i].favorite_fruit }\n---\nevent:\
  \ person_del\ncode: |\n  person.remove(value(action_argument('item')))\n---\nevent:\
  \ person_add\ncode: |\n  person.appendObject()\n  person.reset_gathered()\n  person.there_is_another\
  \ = False"
"edit-list-non-editable": |-
  mandatory: true
  question: |
    Thank you for your answers!
  subquestion: |
    ${ person.table.show(editable=False) }

    You can
    [edit your answers](${ url_action('review_interview') })
    if you want.
"edit-list-string": "question: |\n  Who is the ${ ordinal(i) } person?\nfields:\n\
  \  - Name: person[i]\n---\nquestion: |\n  Are there any more people\n  you would\
  \ like to mention?\nyesno: person.there_is_another\n---\nmandatory: True\nquestion:\
  \ |\n  All done\nsubquestion: |\n  The people are ${ person }.\n\n  ${ person.table\
  \ }\n  \n  ${ person.add_action() }\n---\ntable: person.table\nrows: person\ncolumns:\n\
  \  - \"#\": |\n      row_index + 1\n  - Name: |\n      row_item\nedit: True"
"email-field": |-
  question: |
    What is your e-mail address?
  fields:
    - E-mail: target_variable
      datatype: email
      required: False
"email-to-case": "mandatory: true\ncode: |\n  multi_user = True\n  email = None\n\
  ---\nmandatory: true\ncode: |\n  intro_seen\n  if email is None:\n    waiting_screen\n\
  \  else:\n    all_done\n---\nquestion: |\n  E-mailing to the interview\nsubquestion:\
  \ |\n  When you press continue, you will be\n  provided with an e-mail address to\n\
  \  which you can send an email.\nfield: intro_seen\n---\nevent: waiting_screen\n\
  question: |\n  E-mailing to the interview\nsubquestion: |\n  Send an e-mail to:\n\
  \  \n  > ${ interview_email() }\n  \n  Once the e-mail is received and processed,\n\
  \  you can click refresh to see the e-mail.\nbuttons:\n  - Refresh: refresh\n---\n\
  event: all_done\nquestion: |\n  E-mails received\nsubquestion: |\n  The latest e-mail\
  \ was:\n  \n  * Subject: ${ email.subject }\n  * To: ${ email.to_address }\n  *\
  \ From: ${ email.from_address }\n  * Reply to: ${ email.reply_to }\n  * Return path:\
  \ ${ email.return_path }\n  % if email.body_text:\n  * Body text: ${ email.body_text\
  \ }\n  % endif\n  % if email.body_html:\n  * Body HTML: ${ email.body_html.slurp()\
  \ }\n  % endif\n  % if len(email.attachment):\n  * Attachment: ${ email.attachment[0]\
  \ }\n  % endif\n---\nevent: incoming_email\ncode: |\n  # Time-consuming code that\
  \ processes the\n  # e-mail can go here.\n  background_response_action('save_email',\
  \ email=action_argument('email'))\n---\nevent: save_email\ncode: |\n  email = action_argument('email')\n\
  \  background_response()"
"email-to-case-simple": "question: |\n  E-mailing to the interview\nsubquestion: |\n\
  \  When you press continue, you will be\n  provided with an e-mail address to\n\
  \  which you can send an email.\nfield: intro_seen\n---\nneed: intro_seen\nmandatory:\
  \ true\nquestion: |\n  E-mails sent to case\nsubquestion: |\n  Send an e-mail to\n\
  \  ${ interview_email() }\n  and click Refresh.\n  \n  Be patient, though.  It takes\
  \ a\n  few seconds for e-mails to travel\n  and be processed.\n  \n  % for item\
  \ in get_emails():\n    % if len(item.emails):\n  Subject lines of all e-mails sent\n\
  \  to ${ item.address }:\n  \n      % for mail_item in item.emails:\n  * ${ mail_item.subject\
  \ }\n      % endfor\n    % endif\n  % endfor\nbuttons:\n  - Refresh: refresh"
"embed": |-
  question: |
    Fill in the blanks.
  subquestion: |
    I went downtown to get some
    [FIELD grocery_item].
    I slipped on the ice and
    fell in the
    [FIELD unfortunate_place].
  fields:
    - Grocery item: grocery_item
    - no label: unfortunate_place
      choices:
        - storm drain
        - gutter
        - mineshaft
"emoji-inline": |-
  image sets:
    freepik:
      attribution: |
        Icon made by [Freepik](http://www.flaticon.com/authors/freepik)
      images:
        male: male244.svg
        female: female243.svg
  ---
  question: |
    What is your gender?
  field: user.gender
  choices:
    - "Male :male:": male
    - "Female :female:": female
    - "Other": other
"empty-choices": |-
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = ["Door Number 1", "Door Number 2"]
  ---
  question: |
    What do you choose?
  field: door
  choices:
    - code: the_choices
  ---
  mandatory: true
  question: |
    % if door is None:
    There were no choices available.
    % else:
    You chose ${ door }.
    % endif
  subquestion: |
    `door` is `${ door }`.
  buttons:
    - Restart: restart
"empty-choices-checkboxes": "code: |\n  if choices_should_be_empty:\n    the_choices\
  \ = []\n  else:\n    the_choices = [\"Door Number 1\", \"Door Number 2\"]\n---\n\
  question: |\n  What do you choose?\nfields:\n  - Favorite fruit: favorite_fruit\n\
  \  - no label: doors\n    datatype: checkboxes\n    code: the_choices\n---\nmandatory:\
  \ true\nquestion: |\n  % if len(doors):\n  % for door in [x for x in doors if doors[x]]:\n\
  \  You chose ${ door }.\n  % endfor\n  % if doors.all_false():\n  You chose no doors.\n\
  \  % endif\n  % else:\n  No doors could be chosen.\n  % endif\nsubquestion: |\n\
  \  `doors` is `${ doors.elements }`.\n  \n  Your favorite fruit is\n  ${ favorite_fruit\
  \ }.\nbuttons:\n  - Restart: restart"
"empty-choices-checkboxes-solo": |-
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = ["Door Number 1", "Door Number 2"]
  ---
  question: |
    What do you choose?
  fields:
    - no label: doors
      datatype: checkboxes
      code: the_choices
  ---
  mandatory: true
  question: |
    % if len(doors):
    % for door in [x for x in doors if doors[x]]:
    You chose ${ door }.
    % endfor
    % if doors.all_false():
    You chose no doors.
    % endif
    % else:
    No doors could be chosen.
    % endif
  subquestion: |
    `doors` is `${ doors.elements }`.
  buttons:
    - Restart: restart
"empty-choices-fields": |-
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = ["Door Number 1", "Door Number 2"]
  ---
  question: |
    What do you choose?
  fields:
    - Fruit: favorite_fruit
    - no label: door
      datatype: radio
      code: the_choices
  ---
  mandatory: true
  question: |
    % if door is None:
    There were no choices available.
    % else:
    You chose ${ door }.
    % endif
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.

    `door` is `${ door }`.
  buttons:
    - Restart: restart
"empty-choices-fields-multiple": |-
  code: |
    if choices_should_be_empty:
      the_doors = []
      the_buckets = []
    else:
      the_doors = ["Door Number 1", "Door Number 2"]
      the_buckets = ["Green Bucket", "Red Bucket"]
  ---
  question: |
    What do you choose?
  fields:
    - no label: door
      datatype: radio
      code: the_doors
    - no label: bucket
      datatype: radio
      code: the_buckets
  ---
  mandatory: true
  question: |
    % if door is None:
    There were no choices available.
    % else:
    You chose ${ door }.
    You chose ${ bucket }.
    % endif
  subquestion: |
    `door` is `${ door }`.

    `bucket` is `${ bucket }`.
  buttons:
    - Restart: restart
"empty-choices-fields-solo": |-
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = ["Door Number 1", "Door Number 2"]
  ---
  question: |
    What do you choose?
  fields:
    - no label: door
      datatype: radio
      code: the_choices
  ---
  mandatory: true
  question: |
    % if door is None:
    There were no choices available.
    % else:
    You chose ${ door }.
    % endif
  subquestion: |
    `door` is `${ door }`.
  buttons:
    - Restart: restart
"empty-choices-object-checkboxes": |-
  objects:
    protagonist: Individual
    antagonist: Individual
    villain: PartyList
  ---
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = [protagonist, antagonist]
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    villain.auto_gather = False
  ---
  question: |
    Please answer this.
  fields:
    - Favorite fruit: favorite_fruit
    - no label: villain
      datatype: object_checkboxes
      choices: the_choices
  ---
  mandatory: True
  question: |
    % if villain.number() == 0:
    There are no villains here.
    % else:
    The ${ villain.as_noun() }
    ${ villain.does_verb("include") }
    ${ villain }.
    % endif
    % if len(the_choices) == 0:
    In fact, no villains ever existed.
    % endif
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.
  buttons:
    - Restart: restart
"empty-choices-object-checkboxes-create": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = [protagonist, antagonist]
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: |
    Please answer this.
  fields:
    - Favorite fruit: favorite_fruit
    - no label: villain
      datatype: object_checkboxes
      choices: the_choices
"empty-choices-object-checkboxes-solo": |-
  objects:
    protagonist: Individual
    antagonist: Individual
    villain: PartyList
  ---
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = [protagonist, antagonist]
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    villain.auto_gather = False
  ---
  question: Who are the villains, if any?
  fields:
    - no label: villain
      datatype: object_checkboxes
      choices: the_choices
  ---
  mandatory: True
  question: |
    % if villain.number() == 0:
    There are no villains here.
    % else:
    The ${ villain.as_noun() }
    ${ villain.does_verb("include") }
    ${ villain }.
    % endif
    % if len(the_choices) == 0:
    In fact, no villains ever existed.

    % endif
  buttons:
    - Restart: restart
"empty-choices-object-checkboxes-solo-create": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  code: |
    if choices_should_be_empty:
      the_choices = []
    else:
      the_choices = [protagonist, antagonist]
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who are the villains, if any?
  fields:
    - no label: villain
      datatype: object_checkboxes
      choices: the_choices
  ---
  mandatory: True
  question: |
    % if villain.number() == 0:
    There are no villains here.
    % else:
    The ${ villain.as_noun() }
    ${ villain.does_verb("include") }
    ${ villain }.
    % endif
    % if len(the_choices) == 0:
    In fact, no villains ever existed.

    % endif
  buttons:
    - Restart: restart
"error-action": |-
  metadata:
    error action: on_error
  ---
  event: on_error
  question: |
    Sorry, we have encountered an error.
  buttons:
    - Exit: exit
      url: https://docassemble.org
"error-action-2": |-
  metadata:
    error action: on_error
  ---
  event: on_error
  code: |
    healthy = False
  ---
  mandatory: True
  code: |
    if not healthy:
      fail_safe
    favorite_fruit
    favorite_vegetable
    favorite_number
    final_screen
  ---
  sets: fail_safe
  code: |
    if not defined('favorite_fruit'):
      favorite_fruit = '_________'
    if not defined('favorite_vegetable'):
      favorite_vegetable = '_________'
    if not defined('favorite_number'):
      favorite_number = '____'
    final_screen
"error-help": |-
  metadata:
    error help: |
      We are sorry.
      An error has occurred.
      Please contact
      [the administrator](mailto:admin@example.com).
"error-help-language": "metadata:\n  error help:\n    en: |\n      We are sorry.\n\
  \      An error has occurred.\n      Please contact\n      [the administrator](mailto:admin@example.com).\n\
  \    es: |\n      Lo sentimos.\n      Se ha producido un error.\n      Por favor,\
  \ p\xF3ngase en contacto con\n      [el administrador](mailto:admin@example.com)."
"event-example": |-
  question: |
    This is a special screen.
  event: show_special_screen
"event-role-event": |-
  event: role_event
  question: All done for now.
  subquestion: |
    Someone else needs to answer
    questions now.  You will be notified
    when you can resume the interview.
  buttons:
    - Exit: leave
"exists": |-
  objects:
    - real_estate_holdings: Value
  ---
  question: |
    Do you have real estate holdings?
  yesno: real_estate_holdings.exists
  ---
  question: |
    How much real estate do you own?
  fields:
    - Value: real_estate_holdings.value
      datatype: currency
"exit": |-
  mandatory: True
  code: |
    command('exit', url=target_url)
  ---
  question: |
    Where do you want to go?
  field: target_url
  buttons:
    - Stanford: "http://stanford.edu/"
    - Harvard: "http://www.harvard.edu/"
"exit-buttons": |-
  question: We are all done.
  buttons:
    - Exit: exit
    - Restart: restart
  mandatory: True
"exit-buttons-mixed": |-
  question: |
    Warning!
  subquestion: |
    Proceeding with this interview may
    result in despair-inducing levels
    of liability.
  buttons:
    - I understand:
        code: |
          attitude = 'careful'
    - I do not care:
        code: |
          attitude = 'reckless'
    - Get me out of here: exit
  ---
  mandatory: true
  question: |
    % if attitude == 'reckless':
    You are foolish!
    % else:
    Ok, we are proceeding with caution.
    % endif
"exit-buttons-mixed-code": |-
  mandatory: True
  code: |
    if user_choice == 'exit':
      command('exit')
    elif user_choice == 'proceed':
      final_screen
  ---
  question: |
    Warning!
  subquestion: |
    Proceeding with this interview may
    result in despair-inducing levels
    of liability.
  field: user_choice
  buttons:
    - Exit: exit
    - Keep going: proceed
  ---
  event: final_screen
  question: |
    Hey, I warned you.
"exit-choices": |-
  question: We are all done.
  choices:
    - Exit: exit
    - Restart: restart
  mandatory: True
"exit-url": |-
  question: |
    Congratulations, you found Nemo!
  buttons:
    - Try again: restart
    - Learn More: logout
      url: https://en.wikipedia.org/wiki/Amphiprioninae
  mandatory: True
"exit-url-referer": |-
  question: |
    We are on a quest.
  subquestion: |
    This quest is exciting!
  field: continue_with_quest
  ---
  question: |
    We have finished our quest.
  buttons:
    - Return: exit
      url: |
        ${ referring_url() }
  need:
    - continue_with_quest
  mandatory: True
"exit-url-referer-fullscreen": |-
  features:
    go full screen: True
  ---
  question: |
    Let's go on a quest!
  subquestion: |
    How exciting would you
    like your quest to be?
  field: excitement_level
  choices:
    - Thrilling
    - Interesting
    - Soporific
  ---
  question: |
    We are nearing the end of the
    quest.
  field: quest_almost_over
  ---
  question: |
    We have finished the quest.
  buttons:
    - Return: exit
      url: |
        ${ referring_url() }
  need:
    - excitement_level
    - quest_almost_over
  mandatory: True
"exit-url-referer-fullscreen-mobile": "features:\n  go full screen: mobile\n---\n\
  code: |\n  if device().is_mobile or device().is_tablet:\n    on_mobile = True\n\
  \  else:\n    on_mobile = False\n---\nmandatory: True\ncode: |\n  excitement_level\n\
  \  quest_almost_over\n  if on_mobile:\n    final_screen_mobile\n  else:\n    final_screen_desktop\n\
  ---\nquestion: |\n  Let's go on a quest!\nsubquestion: |\n  % if on_mobile:\n  I\
  \ see you are using a mobile\n  device.\n  % else:\n  I see that you are not using\n\
  \  a mobile device.\n  % endif\n  \n  How exciting would you\n  like your quest\
  \ to be?\nfield: excitement_level\nchoices:\n  - Thrilling\n  - Interesting\n  -\
  \ Soporific\n---\nquestion: |\n  We are nearing the end of the\n  quest.\nfield:\
  \ quest_almost_over\n---\nevent: final_screen_mobile\nquestion: |\n  We have finished\
  \ the quest.\nbuttons:\n  - Return: exit\n    url: |\n      ${ referring_url() }\n\
  ---\nevent: final_screen_desktop\nquestion: |\n  We have finished the quest."
"external_files": |-
  features:
    javascript: my-functions.js
    css: my-styles.css
  ---
  mandatory: True
  question: |
    A test of Javascript and CSS
  subquestion: |
    <span class="groovy"></span>
"fallback": |-
  include:
    - question-library.yml
  ---
  question: Which of these statements is true?
  choices:
    - "I am old-fashioned":
        question: |
          My darling, would you do me the
          honor of accompanying me to
          the dance this fine evening?
        yesno: user_wants_to_go_to_dance
    - "I don't care for flowerly language": continue
  ---
  mandatory: True
  code: |
    if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
      good_news
  ---
  mandatory: True
  question: |
    Say, I have to run.  Bye!
  ---
  event: good_news
  question: |
    That is splendid news!
"fallback2": |-
  include:
    - question-library.yml
  ---
  question: |
    I forgot, did we already agree to go to the dance together?
  yesno: we_already_agreed_to_go
  ---
  code: |
    if we_already_agreed_to_go:
      user_wants_to_go_to_dance = True
  ---
  mandatory: True
  code: |
    if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
      good_news
  ---
  mandatory: True
  question: |
    Say, I have to run.  Bye!
  ---
  event: good_news
  question: |
    That is splendid news!
"false-values": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
        - Plums
  ---
  mandatory: True
  question: |
    Summary of your answer
  subquestion: |
    You do not like
    ${ likes_fruit.false_values() }.
"field-note": |-
  question: |
    Tell me more about you.
  fields:
    - Favorite fruit: fruit
    - Favorite vegetable: veggie
    - note: |
        I understand that this next
        question is particularly
        difficult to answer, but please
        bear with me.  We are almost
        done.
    - Favorite tree: tree
"fields": "question: Tell me more about yourself\nfields:\n  - Description: user_description\n\
  \    input type: area\n    hint: |\n      E.g., you can describe your\n      hair\
  \ color, eye color, \n      favorite movies, etc.\n  - Annual income: user_annual_income\n\
  \    datatype: currency\n    min: 100\n  - E-mail address: user_email_address\n\
  \    datatype: email\n  - Been vaccinated: user_vaccinated\n    datatype: yesno\n\
  \  - Seen Mount Rushmore: mount_rushmore_visited\n    datatype: yesnowide\n  - Opinion\
  \ of turnips: turnip_rating\n    datatype: range\n    min: 1\n    max: 10\n  - Belly\
  \ button type: belly_button\n    datatype: radio\n    choices:\n      - Innie\n\
  \      - Outie\n  - html: |\n      The date and time is\n      <span class=\"mytime\"\
  \n      id=\"today_time\"></span>.\n  - Number of friends: num_friends\n    datatype:\
  \ radio\n    choices:\n      - One: 1\n      - Two: 2\n      - Three: 3\n  - Degrees\
  \ obtained: degrees\n    datatype: checkboxes\n    choices:\n      - High school\n\
  \      - College\n      - Graduate school\n  - State you grew up in: home_state\n\
  \    code: |\n      us.states.mapping('abbr', 'name')\n  - note: |\n      #### Politics\n\
  \n      Tell me about your political\n      views.\n  - no label: political_views\n\
  \    default: I have no political views\n    maxlength: 30\n  - Party: political_party\n\
  \    datatype: radio\n    shuffle: True \n    choices:\n      - Republican\n   \
  \   - Democrat\n      - Independent\ncss: |\n  <style>\n    .mytime {\n       color:\
  \ green;\n    }\n  </style>\nscript: |\n  <script>\n    $(\"#today_time\").html(Date());\n\
  \  </script>"
"fields-ajax": |-
  question: |
    What is your favorite word?
  fields:
    - Word: favorite_word
      input type: ajax
      action: wordlist
  ---
  event: wordlist
  code: |
    set_save_status('ignore')
    wordstart = action_argument('wordstart').lower()
    results = list()
    import codecs
    with codecs.open('/usr/share/dict/words', mode='rU', encoding='utf-8') as words_file:
      for line in words_file:
        lower_line = line.lower()
        if lower_line.startswith(wordstart):
          results.append(line.rstrip())
    json_response(results)
"fields-ajax-list-collect": |-
  objects:
    - favorite_word: DAList.using(there_are_any=True)
  ---
  question: |
    What is your ${ ordinal(i) } favorite word?
  fields:
    - Word: favorite_word[i]
      input type: ajax
      action: wordlist
  list collect: True
"fields-checkboxes": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - apple
        - peach
        - pear
    - "What is your favorite fruit overall?": favorite_fruit
  ---
  question: |
    Thank you for your thoughts.
  subquestion: |
    % if likes_fruit['apple']:
    You like apples.
    % endif
    % if likes_fruit['peach']:
    You like peaches.
    % endif
    % if likes_fruit['pear']:
    You like pears.
    % endif
    Your favorite, though, is ${ favorite_fruit }.

    In Python, `likes_fruit` is
    `${ repr(likes_fruit) }`.
  mandatory: True
"fields-checkboxes-code": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      code: |
        [
          {'apple': 'Apples'},
          {'peach': 'Peaches'},
          {'pear': 'Pears'}
        ]
    - "What is your favorite fruit overall?": favorite_fruit
  ---
  question: |
    Thank you for your thoughts.
  subquestion: |
    % if likes_fruit['apple']:
    You like apples.
    % endif
    % if likes_fruit['peach']:
    You like peaches.
    % endif
    % if likes_fruit['pear']:
    You like pears.
    % endif
    Your favorite, though, is ${ favorite_fruit }.
  mandatory: True
"fields-checkboxes-default-0": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      default: Pears
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-1": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      default:
        - Pears
        - Apples
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-2": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      default:
        Pears: True
        Apples: True
        Peaches: False
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-3": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      default:
        code: |
          ['Pears', 'Apples']
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-4": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      default:
        code: |
          dict(Pears=False, Peaches=False, Apples=True)
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-5": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      code: |
        [
          {'apple': 'Apples', 'default': True},
          {'peach': 'Peaches'},
          {'pear': 'Pears'}
        ]
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-default-6": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      code: |
        [
          ['apple', 'Apples', True],
          ['peach', 'Peaches'],
          ['pear', 'Pears']
        ]
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-different-labels": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples: apple
        - Peaches: peach
        - Pears: pear
    - "What is your favorite fruit overall?": favorite_fruit
  ---
  question: |
    Thank you for your thoughts.
  subquestion: |
    % if likes_fruit['apple']:
    You like apples.
    % endif
    % if likes_fruit['peach']:
    You like peaches.
    % endif
    % if likes_fruit['pear']:
    You like pears.
    % endif
    Your favorite, though, is ${ favorite_fruit }.

    In Python, `likes_fruit` is
    `${ variable_as_code }`.
  mandatory: True
"fields-checkboxes-nota": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
    - "What is your favorite fruit overall?": favorite_fruit
"fields-checkboxes-nota-false": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
      none of the above: False
    - "What is your favorite fruit overall?": favorite_fruit
"fields-choices": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      choices:
        - "${ 'Apples' }": apple
        - Oranges: orange
        - Pears: pear
"fields-choices-combobox": "question: |\n  What is your favorite color?\nfields:\n\
  \  - Color: favorite_color\n    input type: combobox\n    choices: \n      - Red\n\
  \      - Green\n      - Purple\n---\nmandatory: True\nquestion: All done\nsubquestion:\
  \ |\n  Your favorite color is\n  ${ favorite_color }."
"fields-choices-dropdown": "question: | \n  What type of shoes do you wear?\nfields:\n\
  \  - Shoe Type: target_variable\n    choices: \n      - Sneakers\n      - Sandals\n\
  \      - Clogs\n      - Other"
"fields-choices-dropdown-input-type": "question: | \n  What type of shoes do you wear?\n\
  fields:\n  - Shoe Type: target_variable\n    input type: dropdown\n    choices:\
  \ \n      - Sneakers\n      - Sandals\n      - Clogs\n      - Other"
"fields-code": "objects:\n  - people: DAList.using(object_type=Individual, ask_number=True)\n\
  ---\nquestion: |\n  How many people are there?\nfields:\n  - Number: people.target_number\n\
  \    datatype: integer\n    min: 1\n    max: 10\n---\nsets:\n  - people[i].name.first\n\
  question: |\n  What are the peoples' names?\nfields:\n  code: name_list\n---\ncode:\
  \ |\n  name_list = list()\n  for index in range(people.number()):\n    name_list.append(\n\
  \      {\"label\": ordinal(index, capitalize=True) + \" person's given name\",\n\
  \       \"field\": \"people[\" + str(index) + \"].name.first\"\n      })\n    name_list.append(\n\
  \      {\"label\": ordinal(index, capitalize=True) + \" person's surname\",\n  \
  \     \"field\": \"people[\" + str(index) + \"].name.last\"\n      })\n---\nmandatory:\
  \ True\nquestion: |\n  List of people\nsubquestion: |\n  The people include:\n \
  \ \n  % for person in people:\n  * ${ person }\n  % endfor"
"fields-code-embed": "objects:\n  - people: DAList.using(object_type=Individual, ask_number=True)\n\
  ---\nquestion: |\n  How many people are there?\nfields:\n  - Number: people.target_number\n\
  \    datatype: integer\n    min: 1\n    max: 10\n---\nsets:\n  - people[i].name.first\n\
  question: |\n  What are the peoples' names?\nsubquestion: |\n  ${ name_display }\n\
  fields:\n  code: name_list\n---\ncode: |\n  name_list = list()\n  name_display =\
  \ \"\"\n  for index in range(people.number()):\n    name_list.append(\n      {\"\
  label\": ordinal(index, capitalize=True) + \" person's given name\",\n       \"\
  field\": \"people[\" + str(index) + \"].name.first\"\n      })\n    name_list.append(\n\
  \      {\"label\": ordinal(index, capitalize=True) + \" person's surname\",\n  \
  \     \"field\": \"people[\" + str(index) + \"].name.last\"\n      })\n    name_display\
  \ += \"The \" + ordinal(index) + \" person's name is \"\\\n                  + \"\
  [FIELD people[\" + str(index) + \"].name.first] \"\\\n                  + \"[FIELD\
  \ people[\" + str(index) + \"].name.last].\\n\\n\"\n---\nmandatory: True\nquestion:\
  \ |\n  List of people\nsubquestion: |\n  The people include:\n  \n  % for person\
  \ in people:\n  * ${ person }\n  % endfor"
"fields-mc": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: radio
      code: |
        myoptions
  ---
  question: |
    What is your brother's favorite
    fruit?
  fields:
    - Fruit: favorite_fruit_of_brother
      datatype: radio
      code: |
        myoptions
  ---
  code: |
    myoptions = [
                  {'apple': "Apples"},
                  {'orange': "Oranges"},
                  {'pear': "Pears"}
                ]
"fields-mc-2": |-
  code: |
    myoptions = {
                  'apple': "Apples",
                  'orange': "Oranges",
                  'pear': "Pears"
                }
"fields-mc-3": |-
  code: |
    myoptions = ["Apples", "Oranges", "Pears"]
"fields-mc-4": |-
  code: |
    myoptions = [
                  ['apple', 'Apples'],
                  ['orange', 'Oranges'],
                  ['pear', 'Pears']
                ]
"fields-mc-5": |-
  code: |
    myoptions = [
                  ['apple', 'Apples'],
                  ['orange', 'Oranges', True],
                  ['pear', 'Pears']
                ]
"fields-mc-6": |-
  code: |
    myoptions = [
                  ['apple', 'Apples', None, 'Apples are good in pies.'],
                  ['orange', 'Oranges', None, 'Oranges are a type of citrus fruit.'],
                  ['pear', 'Pears', None, 'Pears are an acquired taste.']
                ]
"fields-mc-7": |-
  code: |
    myoptions = [
                  {'apple': "Apples",
                   'default': True},
                  {'orange': "Oranges"},
                  {'pear': "Pears"}
                ]
"fields-mc-8": |-
  code: |
    myoptions = [
                  {'apple': "Apples",
                   'default': True,
                   'help': "Apples are good in pies."},
                  {'orange': "Oranges",
                   'help': "Oranges are a type of citrus fruit."},
                  {'pear': "Pears",
                   'help': "Pears are an acquired taste."}
                ]
"fields-mc-9": |-
  code: |
    myoptions = [
                  {'label': "Apples",
                   'value': 'apple'},
                  {'label': "Oranges",
                   'value': 'orange'},
                  {'label': "Pears",
                   'value': 'pear'}
                ]
"fields-mc-exclude": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: radio
      code: |
        myoptions
  ---
  question: |
    What is your brother's favorite
    fruit, assuming he does not like
    ${ favorite_fruit }?
  fields:
    - Fruit: favorite_fruit_of_brother
      datatype: radio
      code: |
        myoptions
      exclude: |
        favorite_fruit
  ---
  code: |
    myoptions = [
                  {'apple': "Apples"},
                  {'orange': "Oranges"},
                  {'pear': "Pears"}
                ]
"fields-mc-exclude-manual": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: radio
      choices:
        - Apples
        - Oranges
        - Pears
  ---
  question: |
    What is your brother's favorite
    fruit, assuming he does not like
    ${ favorite_fruit }?
  fields:
    - Fruit: favorite_fruit_of_brother
      datatype: radio
      choices:
        - Apples
        - Oranges
        - Pears
      exclude: |
        all_fruit
"fields-mc-nota": |-
  question: |
    Please fill in the following information.
  fields:
    - Requested options: car_options
      datatype: checkboxes
      choices:
        - Sunroof
        - Automatic transmission
        - Heated seats
      none of the above: |
        Nothing ${ "at all" }
"fields-mc-with-showif": |-
  question: |
    Please fill in the following information.
  fields:
    - "Do you like fruit?": likes_fruit
      datatype: yesnoradio
    - "What's your favorite fruit?": favorite_fruit
      show if: likes_fruit
    - "Favorite apple": favorite_apple
      datatype: radio
      shuffle: True
      choices:
        - Granny Smith
        - Empire
        - Fuji
        - Red Delicious
    - Options: car_options
      datatype: checkboxes
      choices:
        - Sunroof
        - Automatic transmission
        - Heated seats
      show if: likes_fruit
      none of the above: |
        Nothing ${ "at all" }
"fields-multiselect": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: multiselect
      choices:
        - apple
        - peach
        - pear
    - "What is your favorite fruit overall?": favorite_fruit
  ---
  question: |
    Thank you for your thoughts.
  subquestion: |
    % if likes_fruit['apple']:
    You like apples.
    % endif
    % if likes_fruit['peach']:
    You like peaches.
    % endif
    % if likes_fruit['pear']:
    You like pears.
    % endif
    Your favorite, though, is ${ favorite_fruit }.

    In Python, `likes_fruit` is
    `${ repr(likes_fruit) }`.
  mandatory: True
"fields-multiselect-rows": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: multiselect
      choices:
        - apple
        - peach
        - pear
      rows: 2
    - "What is your favorite fruit overall?": favorite_fruit
"fields-noyesmaybe": |-
  question: |
    Please answer the following question.
  fields:
    - "Was Washington the first U.S. president?": washington_not_the_first_president
      datatype: noyesmaybe
"fields-yesno": |-
  question: |
    Please provide the following information.
  fields:
    - "What is your favorite food?": favorite_food
    - note: Check which foods you like.
    - Apples: likes_apples
      datatype: yesno
    - Turnips: dislikes_turnips
      datatype: noyes
"fields-yesno-help": |-
  question: |
    Please provide the following information.
  fields:
    - "What is your favorite food?": favorite_food
    - note: Check which foods you like.
    - Apples: likes_apples
      datatype: yesno
      help: Round fruit of a tree of the rose family
    - Turnips: dislikes_turnips
      datatype: noyes
      help: Round root with white flesh
"fields-yesno-uncheck-others": |-
  question: |
    Please provide the following information.
  fields:
    - "What is your favorite food?": favorite_food
    - note: Check which foods you like.
    - Apples: likes_apples
      datatype: yesnowide
    - Turnips: likes_turnips
      datatype: yesnowide
    - Neither: dislikes_both_foods
      datatype: yesnowide
      uncheck others: True
"fields-yesno-uncheck-others-list": |-
  question: |
    Please provide the following information.
  fields:
    - "What is your favorite food?": favorite_food
    - note: Check which foods you like.
    - Apples: likes_apples
      datatype: yesno
    - Turnips: likes_turnips
      datatype: yesno
    - Neither: dislikes_both_foods
      datatype: yesno
      uncheck others:
        - likes_turnips
        - likes_apples
    - note: Check which rocks you like.
    - Granite: likes_granite
      datatype: yesno
    - Obsidian: likes_obsidian
      datatype: yesno
    - I do not like these rocks: dislikes_both_rocks
      datatype: yesno
      uncheck others:
        - likes_granite
        - likes_obsidian
"fields-yesnomaybe": |-
  question: |
    Please answer the following question.
  fields:
    - "Is Topeka the capital of Kansas?": topeka_is_capital_of_kansas
      datatype: yesnomaybe
"fields-yesnoradio": |-
  question: |
    Please provide the following information.
  fields:
    - "Do you like apricots?": likes_apricots
      datatype: yesnoradio
    - "Do you like pineapple?": dislikes_pineapple
      datatype: noyesradio
"fields-yesnowide": |-
  question: |
    Please provide the following information.
  fields:
    - note: Check which foods you like.
    - Peaches: likes_peaches
      datatype: yesnowide
    - Pears: dislikes_pears
      datatype: noyeswide
"file": |-
  question: |
    Please upload a file
  fields:
    - File: the_file
      datatype: file
"file-types": |-
  objects:
    - static_file: DAStaticFile.using(filename='cow.jpg')
  ---
  attachment:
    variable name: assembled_file
    filename: assembled_file
    content: |
      Hello world!
  ---
  question: |
    Upload a file
  fields:
    - File: uploaded_file
      datatype: file
  ---
  question: |
    What type of file do you want?
  choices:
    Static:
      code: |
        the_file = static_file
    Assembled:
      code: |
        the_file = assembled_file
    Upload:
      code: |
        the_file = uploaded_file
    Single:
      code: |
        the_file = uploaded_file[0]
  ---
  code: |
    email_sent = send_email(to=email_address,
      body="Here is your document",
      subject="Your document",
      attachments=the_file)
  ---
  code: |
    (the_path, the_mimetype) = path_and_mimetype(the_file)
  ---
  code: |
    button_list = [{True: 'Next', 'image': the_file}]
  ---
  field: menu_selection
  question: |
    Your document
  subquestion: |
    ### As image
    ${ the_file.show(width='1em') }

    ${ the_file }

    ### As path

    `${ the_file.path() }`

    ### As url

    `${ the_file.url_for() }`
    [open](${ the_file.url_for() })

    ### As external url

    `${ the_file.url_for(external=True) }`
    [open](${ the_file.url_for(external=True) })

    ### As downloadable url

    `${ the_file.url_for(attachment=True) }`
    [open](${ the_file.url_for(attachment=True) })

    ### As temporary url

    `${ the_file.url_for(temporary=True, seconds=500) }`
    [open](${ the_file.url_for(temporary=True, seconds=500) })

    ### As temporary downloadable url

    `${ the_file.url_for(temporary=True, seconds=500, attachment=True) }`
    [open](${ the_file.url_for(temporary=True, seconds=500, attachment=True) })

    ### From url_of()

    `${ url_of(the_file) }`
    [open](${ url_of(the_file) })

    ### From url_of(), external

    `${ url_of(the_file, _external=True) }`
    [open](${ url_of(the_file, _external=True) })

    ### From url_of(), downloadable

    `${ url_of(the_file, _attachment=True) }`
    [open](${ url_of(the_file, _attachment=True) })

    ### From path_and_mimetype()

    `${ the_path }`

    `${ the_mimetype }`
  buttons:
    code: button_list
  ---
  mandatory: True
  need:
    - menu_selection
  question: |
    All done
  buttons:
    - Restart: restart
"fix-punctuation": |-
  mandatory: true
  question: |
    What to do in court.
  subquestion: |
    Tell the court,
    "Please grant my petition.
    ${ fix_punctuation(rationale) }"
  ---
  question: |
    Why is the other side wrong?
  subquestion: |
    Please be brief.
  fields:
    - no label: rationale
      input type: area
      hint: |
        The teapot was not broken
        and it was broken before he
        gave it to me.
"flash": |-
  mandatory: True
  decoration: coins
  question: |
    The interview is complete.
  script: |
    <script>
      flash("Hello, user!")
      flash("Lookout, user!", "danger")
    </script>
"flushleft": "mandatory: True\nquestion: |\n  Here is your document.\nsubquestion:\
  \ |\n  It demonstrates the flush left environment.\nattachments:\n  - name: A test\
  \ document\n    filename: test_document\n    content: |\n      This line is indented.\n\
  \      \n      This line is also indented.\n      \n      [FLUSHLEFT] This line\
  \ is not indented. [NEWLINE] Nor is this line."
"flushright": "mandatory: True\nquestion: |\n  Here is your document.\nsubquestion:\
  \ |\n  It demonstrates the flush right environment.\nattachments:\n  - name: A test\
  \ document\n    filename: test_document\n    metadata:\n      FirstHeaderLeft: Test\
  \ me test me\n      FirstHeaderCenter: Test me test me\n      FirstHeaderRight:\
  \ |\n        Example, LLP [BR]\n        124 Main Street, Suite 1500 [BR]\n     \
  \   Philadelphia, PA 19102\n      HeaderLeft: Test me test me\n      HeaderCenter:\
  \ Test me test me\n      HeaderRight: |\n        Example, LLP [BR]\n        123--24\
  \ Main Street, Suite 1500 [BR]\n        Philadelphia, PA 19102\n      FirstFooterLeft:\
  \ Test me test me\n      FirstFooterCenter: Test me test me\n      FirstFooterRight:\
  \ |\n        Example, LLP [BR]\n        124 Main Street, _Suite_ 1500 [BR]\n   \
  \     Philadelphia, PA 19102\n      FooterLeft: Test me test me\n      FooterCenter:\
  \ Test me test me\n      FooterRight: |\n        Example, LLP [BR]\n        123\
  \ Main Street, Suite 1500 [BR]\n        Philadelphia, PA 19102\n      SingleSpacing:\
  \ True\n    content: |\n      This \"line\" is to the left.\n      \n      This\
  \ line is \"also\" to the left.\n      \n      [FLUSHRIGHT] This line is \"flush\"\
  \ right. [NEWLINE] So is _this_ line.\n\n      [INDENTBY 1in] [BORDER] This **line**\
  \ is indented. [NEWLINE] So is this line.\n\n      [BORDER] [INDENTBY 2in 1in] This\
  \ is a very \"confined\" paragraph\n      that is not to be taken lightly---because\
  \ it's so absolutely\n      constrained beyond any belief or any person's imagination\
  \ in the\n      whole wide world under the sun and the moon and the barn down\n\
  \      the street.\n\n      fruit| price\n      -----|-----:\n      apple|2.05\n\
  \      pear|1.37\n      orange|3.09\n\n      Lorem ipsum \"dolor\" sit amet from\
  \ 1--2, consectetur adipiscing elit. Nunc\n      quis odio a dolor rhoncus elementum\
  \ ut sed ex. Lorem ipsum dolor\n      sit amet, consectetur adipiscing elit. Aenean\
  \ blandit massa nec\n      ante rutrum, nec interdum ipsum auctor. Pellentesque\
  \ posuere\n      rhoncus pulvinar. Cras rutrum---if I may say---tellus sit amet\
  \ elit euismod, quis\n      viverra metus dignissim. Aenean id convallis eros. Vestibulum\n\
  \      tristique, erat non ornare rhoncus, lectus urna consectetur\n      urna,\
  \ sit amet rhoncus magna est a orci. Sed sed euismod tortor.\n\n      [BORDER] Aliquam\
  \ nec turpis massa. Integer non vulputate nibh. Integer mi\n      justo, sagittis\
  \ eget erat quis, porta auctor purus. Quisque ac\n      rutrum nibh. Duis id massa\
  \ faucibus, facilisis mauris sit amet,\n      congue nisl. Duis vel odio vehicula,\
  \ sodales tellus ut, tempor\n      ipsum. Morbi tempor aliquam gravida. Aliquam\
  \ tortor est,\n      tincidunt sed libero et, vehicula ullamcorper tellus. Curabitur\n\
  \      quis magna erat. Vivamus euismod gravida ante, eu congue arcu\n      ultricies\
  \ ac. Praesent porta euismod urna non sodales.\n      [NEWPAR]\n      Phasellus\
  \ orci diam, sodales a elementum ac, gravida sit amet\n      erat. Nunc imperdiet\
  \ malesuada magna, nec laoreet tortor dapibus\n      in. Praesent nulla elit, rhoncus\
  \ vitae tincidunt non, rutrum ut\n      justo. Suspendisse aliquam sollicitudin\
  \ porttitor. In suscipit,\n      magna sit amet eleifend iaculis, nisl elit sodales\
  \ diam, dapibus\n      rutrum odio augue sed velit. Ut ullamcorper, quam at dapibus\n\
  \      hendrerit, nibh libero vulputate massa, non pretium nisl libero\n      at\
  \ enim. Donec vestibulum sapien purus, et mattis nunc ultricies\n      non. Morbi\
  \ velit lacus, ornare a lectus sed, auctor accumsan\n      ante. Donec imperdiet\
  \ quis velit non varius. Suspendisse in\n      ultricies massa, id venenatis arcu.\n\
  \n      In vitae erat luctus urna rutrum convallis et id nibh. Fusce\n      suscipit\
  \ lacus at ligula mattis, vitae maximus nunc\n      ultrices. Praesent pellentesque\
  \ nulla sem. Donec rhoncus leo\n      velit. Ut nec dui accumsan, commodo elit ac,\
  \ maximus\n      lacus. Curabitur malesuada tortor augue, quis mattis augue\n  \
  \    aliquet vel. Mauris gravida orci at neque dictum\n      scelerisque. Quisque\
  \ turpis quam, dignissim ut augue quis,\n      euismod placerat nisi. Donec convallis\
  \ mollis varius. Fusce\n      posuere rutrum risus vel porta. Curabitur erat diam,\
  \ semper vel\n      condimentum vitae, fringilla non neque. Etiam nec nunc id est\n\
  \      pharetra dignissim. Nam condimentum nibh sit amet erat mattis\n      suscipit\
  \ vitae vel eros. Donec eu pellentesque arcu, vitae\n      euismod tortor. Aliquam\
  \ accumsan nulla aliquam diam ultricies\n      venenatis.\n\n      Cras mattis tellus\
  \ neque, ut congue mi scelerisque eget. Cras\n      finibus tincidunt augue, ut\
  \ rutrum risus vehicula vel. Praesent\n      fermentum tortor posuere feugiat interdum.\
  \ Ut turpis arcu,\n      sagittis vitae odio vel, gravida cursus urna. Suspendisse\n\
  \      dignissim tortor id iaculis tincidunt. Nulla\n      facilisi. Suspendisse\
  \ lacinia nisl interdum, egestas turpis non,\n      fringilla felis."
"font-awesome": |-
  mandatory: True
  decoration: chart-bar
  question: |
    Third quarter metrics
  subquestion: |
    We are making more money
    :far-fa-money-bill-alt: than
    we did in the second quarter.

    So you can sleep well tonight! :bed:
"for_fruit": |-
  code: |
    fruit_list = ['peaches', 'pears', 'apricots']
  ---
  question: |
    Summary of fruit
  subquestion: |
    % for fruit in fruit_list:
    I assume you like ${ fruit }.
    % endfor
  mandatory: True
"force-ask": |-
  mandatory: True
  code: |
    if user_is_communist and user_reconsidering_communism:
      user_reconsidering_communism = False
      force_ask('user_is_communist')
"force-ask-full": |-
  question: |
    Are you a communist?
  yesno: user_is_communist
  ---
  mandatory: True
  code: |
    if user_is_communist and user_reconsidering_communism:
      user_reconsidering_communism = False
      force_ask('user_is_communist')
  ---
  question: |
    I suggest you reconsider your
    answer.
  field: user_reconsidering_communism
  ---
  question: |
    % if user_is_communist:
    I am referring your case to
    Mr. McCarthy.
    % else:
    I am glad you are a true
    American.
    % endif
  mandatory: True
"force-ask-multiple": |-
  mandatory: True
  code: |
    favorite_fruit
    favorite_vegetable
    favorite_fungus
    told_to_review
    if not all_reviewed:
      all_reviewed = True
      force_ask('favorite_fruit', 'favorite_vegetable', 'favorite_fungus')
    final_screen
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Favorite fruit: favorite_fruit
  ---
  question: |
    What is your favorite vegetable?
  fields:
    - Favorite vegetable: favorite_vegetable
  ---
  question: |
    What is your favorite fungus?
  fields:
    - Favorite: favorite_fungus
  ---
  question: |
    Please verify your answers.
  subquestion: |
    I will ask each question again.
    Make any changes that you think
    are necessary.
  field: told_to_review
  ---
  event: final_screen
  question: |
    Thank you.
  subquestion: |
    You like
    ${ favorite_fruit },
    ${ favorite_vegetable },
    and
    ${ favorite_fungus }.
  ---
  code: |
    all_reviewed = False
"force-gather": |-
  initial: True
  code: |
    process_action()
  ---
  event: gather_it
  code: |
    force_gather('favorite_food')
"forget-result-of": |-
  id: favorite_food stage 2
  question: |
    Ok, are any of these your favorite food?
  choices:
    - Strawberries:
        code: |
          favorite_food = 'strawberries'
    - Grapes:
        code: |
          favorite_food = 'grapes'
    - Kiwi:
        code: |
          favorite_food = 'kiwi'
    - Something else: continue
  ---
  id: favorite_food stage 1
  question: |
    What is your favorite food?
  choices:
    - Apples:
        code: |
          favorite_food = 'apples'
    - Oranges:
        code: |
          favorite_food = 'oranges'
    - Something else: continue
  ---
  event: reset_favorite_food
  code: |
    del favorite_food
    forget_result_of("favorite_food stage 1", "favorite_food stage 2")
"forget-result-of-mandatory": |-
  mandatory: True
  code: |
    favorite_fruit = "apple"
    favorite_vegetable = "turnip"
  id: initialize
  ---
  mandatory: True
  code: |
    while not results_correct:
      favorites_asked
      favorites_reported
      del results_correct
      del favorites_asked
      del favorites_reported
      forget_result_of('initialize')
      re_run_logic()
    final_screen
  ---
  question: |
    Results
  subquestion: |
    You said your favorite fruit is
    ${ favorite_fruit } and
    your favorite vegetable is
    ${ favorite_vegetable }.

    Is this correct?
  yesno: results_correct
  ---
  question: |
    What are your favorites?
  fields:
    - Favorite fruit: favorite_fruit
    - Favorite vegetable: favorite_vegetable
  continue button field: favorites_asked
  ---
  question: |
    Your favorites
  subquestion: |
    You said your favorite fruit is
    ${ favorite_fruit } and
    your favorite vegetable is
    ${ favorite_vegetable }.

    Press Continue to reset.
  field: favorites_reported
  ---
  event: final_screen
  question: |
    We are done.
"formatting": "question: |\n  Here is your document.\nsubquestion: |\n  It illustrates\
  \ some document-related\n  features.\nallow emailing: False\nattachments:\n  - name:\
  \ A test document\n    filename: test_document\n    valid formats:\n      - pdf\n\
  \    metadata:\n      FooterCenter: |\n        [HYPHEN] [PAGENUM] [HYPHEN]\n   \
  \ content: |\n      [BOLDCENTER] A Test Document [BR]\n      by John Doe\n     \
  \ \n      ${ client } is entitled to\n      benefits plan ${ benefits }.\n\n   \
  \   Four score and seven years ago\n      our fathers brought forth on\n      this\
  \ continent, a new nation,\n      conceived in Liberty, and\n      dedicated to\
  \ the proposition\n      that all men are created equal.\n\n      [FILE bluediamond.svg,\
  \ 0.5in]\n\n      Now we are engaged in a great\n      civil war, testing whether\
  \ that\n      nation, or any nation so\n      conceived and so dedicated,\n    \
  \  can long endure.\n\n      [PAGEBREAK]\n\n      Now we begin a new[EMDASH]and\n\
  \      very exciting[EMDASH]page.\n\n      We dare not forget today that\n     \
  \ we are the heirs of that first\n      revolution. Let the word go\n      forth\
  \ from this time and place,\n      to friend and foe alike, that\n      the torch\
  \ has been passed to\n      a new generation of\n      Americans [ENDASH] born in\
  \ this\n      century, tempered by war,\n      disciplined by a hard and\n     \
  \ bitter peace, proud of our\n      ancient heritage, and unwilling\n      to witness\
  \ or permit the slow\n      undoing of those human rights\n      to which this nation\
  \ has\n      always been committed, and to\n      which we are committed today\n\
  \      at home and around the world.\n\n      And yet our distress comes from\n\
  \      no failure of substance. We are\n      stricken by no plague of locusts.\n\
  \      Compared with the perils which\n      our forefathers conquered,\n      because\
  \ they believed and were\n      not afraid, we have still much\n      to be thankful\
  \ for. Nature still\n      offers her bounty and human\n      efforts have multiplied\
  \ it.\n      Plenty is at our doorstep, but\n      a generous use of it languishes\n\
  \      in the very sight of the supply.\n\n      # A new section\n\n      [ONEANDAHALFSPACING]\n\
  \n      [NOINDENTATION]\n\n      My Fellow Americans,\n\n      [INDENTATION]\n\n\
  \      I come before you tonight as a\n      candidate for the Vice Presidency\n\
  \      and as a man whose honesty\n      and -- and integrity has been\n      questioned.\n\
  \n      Now, the usual political thing\n      to do when charges are made\n    \
  \  against you is to either ignore\n      them or to deny them without\n      giving\
  \ details. I believe we've\n      had enough of that in the\n      United States,\
  \ particularly with\n      the present Administration in\n      Washington, D.C.\
  \ To me the\n      office of the Vice Presidency\n      of the United States is\
  \ a great\n      office, and I feel that the\n      people have got to have\n  \
  \    confidence in the integrity\n      of the men who run for that\n      office\
  \ and who might obtain it.\n      \n      # A newer section\n\n      [SINGLESPACING]\n\
  \n      Over a century ago Washington\n      laid the corner stone of the\n    \
  \  Capitol in what was then\n      little more than a tract of\n      wooded wilderness\
  \ here beside\n      the Potomac. We now find it\n      necessary to provide by\
  \ great\n      additional buildings for the\n      business of the government.\n\
  mandatory: True"
"forward-chaining": |-
  objects:
    pet: Thing
"forward-chaining-assumptions": |-
  generic object: DAObject
  question: |
    Does ${ x } eat flies?
  yesno: x.eats_flies
"fruit-template-alt-1": |-
  mandatory: True
  question: Here is your document.
  attachment:
    pdf template file: fruit_template.pdf
    fields:
      - favorite_fruit: ${ favorite_fruit }
      - favorite_veggie: ${ favorite_veggie }
      - favorite_legume: ${ favorite_legume }
      - favorite_fungus: ${ favorite_fungus }
"fruit-template-alt-2": |-
  mandatory: True
  question: Here is your document.
  attachment:
    pdf template file: fruit_template.pdf
    field variables:
      - favorite_fruit
      - favorite_veggie
      - favorite_legume
      - favorite_fungus
"function": |-
  question: |
    The word ${ color } becomes
    ${ capitalize(color) } when
    passed through the
    `capitalize()` function.
  mandatory: True
"gather": |-
  modules:
    - docassemble.base.legal
  ---
  objects:
    - witness: PartyList
  ---
  mandatory: True
  code: |
    witness.gathered = witness.gather()
  ---
  question: |
    What is the name of the
    ${ ordinal(i) } witness?
  fields:
    - First Name: witness[i].name.first
    - Last Name: witness[i].name.last
  ---
  question: |
    Were there any other witnesses?
  yesno: witness.there_is_another
  ---
  # question: |
  #   Were there any witnesses?
  # yesno: witness.there_are_any
  # ---
  mandatory: True
  question: |
    Witnesses
  subquestion: |
    % for person in witness:
    ${ person } is a witness.
    % endfor
"gather-another": |-
  objects:
    - fruit: |
        DAList.using(
          auto_gather=False,
          gathered=True)
  comment: |
    These attributes disable the automatic
    gathering system.
  ---
  mandatory: True
  code: |
    num_fruits = 0
    more_fruits = True
  ---
  mandatory: True
  code: |
    while more_fruits:
      fruit[num_fruits]
      num_fruits += 1
      del more_fruits
  ---
  question: |
    Are there more fruits?
  yesno: more_fruits
  ---
  question: |
    What's the ${ ordinal(i) } fruit?
  fields:
    - Fruit: fruit[i]
  ---
  mandatory: True
  question: |
    Fruits
  subquestion: |
    The fruits are:

    % for item in fruit:
    * ${ item }
    % endfor
"gather-dict": |-
  objects:
    - fruit: DADict
  ---
  mandatory: True
  question: |
    There
    ${ fruit.does_verb("is") }
    ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    % for item in fruit:
    The fruit ${ item } has
    ${ fruit[item] } seeds.
    % endfor
  ---
  code: |
    fruit.there_are_any = True
  ---
  question: |
    What fruit should be added to
    the database?
  fields:
    - Fruit: fruit.new_item_name
  ---
  question: |
    How many seeds does
    ${ indefinite_article(noun_singular(i)) }
    have?
  fields:
    - Number of seeds: fruit[i]
      datatype: integer
      min: 0
  ---
  question: |
    So far, the fruits in the database
    include ${ fruit }.  Are there
    any others?
  yesno: fruit.there_is_another
"gather-dict-number": |-
  objects:
    - fruit: DADict
  ---
  mandatory: True
  code: |
    fruit.ask_number = True
  ---
  mandatory: True
  question: |
    There
    ${ fruit.does_verb("is") }
    ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    % for item in fruit:
    The fruit ${ item } has
    ${ fruit[item] } seeds.
    % endfor
  ---
  question: |
    How many fruit should be added
    to the database?
  fields:
    - Number: fruit.target_number
      datatype: integer
      min: 0
  ---
  question: |
    What fruit should be added to
    the database?
  fields:
    - Fruit: fruit.new_item_name
"gather-dict-object": "objects:\n  - pet: DADict.using(object_type=DAObject)\n---\n\
  mandatory: True\nquestion: |\n  You have ${ pet.number_as_word() }\n  pets.\nsubquestion:\
  \ |\n  % for item in pet:\n  Your pet ${ item } named\n  ${ pet[item].name } has\
  \ \n  ${ pet[item].feet } feet.\n  % endfor\n---\nquestion: |\n  Do you have any\
  \ pets?\nyesno: pet.there_are_any\n---\nquestion: |\n  What kind of pet do you have?\n\
  fields:\n  - Type of pet: pet.new_item_name\n---\nquestion: |\n  Describe your pet\
  \ ${ i }.\nfields:\n  - Name: pet[i].name\n  - Number of feet: pet[i].feet\n   \
  \ datatype: integer\n    min: 0\n---\nquestion: |\n  So far, you have told me about\
  \ your\n  ${ pet }.  Do you have any other\n  pets?\nyesno: pet.there_is_another"
"gather-dict-value": |-
  objects:
    - fruit: DADict
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    % for item in fruit:
    The fruit ${ item } has
    ${ fruit[item] } seeds.
    % endfor
  ---
  code: |
    fruit.there_are_any = True
  ---
  question: |
    What fruit should be added to
    the database?
  fields:
    - Fruit: fruit.new_item_name
    - Number of seeds: fruit.new_item_value
      datatype: integer
      min: 0
  ---
  question: |
    So far, the fruits in the database
    include ${ fruit }.  Are there
    any others?
  yesno: fruit.there_is_another
"gather-fruit": |-
  objects:
    - fruit: DAList
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    The fruits are ${ fruit }.
  ---
  question: |
    Are there any fruit that you would like
    to add to the list?
  yesno: fruit.there_are_any
  ---
  question: |
    What fruit should be added to the list?
  fields:
    - Fruit: fruit[i]
  ---
  question: |
    So far, the fruits include ${ fruit }.
    Are there any others?
  yesno: fruit.there_is_another
"gather-fruit-at-least-two": |-
  objects:
    - fruit: DAList.using(minimum_number=2)
"gather-fruit-gather": |-
  mandatory: True
  code: |
    fruit.gather(minimum=1)
  ---
  question: |
    What fruit should be added to the list?
  fields:
    - Fruit: fruit[i]
  ---
  question: |
    So far, the fruits include
    ${ fruit }.  Are there any others?
  yesno: fruit.there_is_another
  ---
  mandatory: True
  question: |
    The fruits are ${ fruit }.
"gather-fruit-incomplete": |-
  objects:
    - fruit: DAList
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    The fruits are ${ fruit }.
"gather-fruit-number": |-
  objects:
    - fruit: DAList.using(ask_number=True)
  ---
  question: |
    How many fruits are there?
  fields:
    - Number: fruit.target_number
      datatype: integer
      min: 2
  ---
  question: |
    What is the name of the
    ${ ordinal(i) } fruit?
  subquestion: |
    % if fruit.number_gathered() > 0:
    So far, you have mentioned ${ fruit }.
    % endif
  fields:
    - Fruit: fruit[i]
  ---
  mandatory: True
  question: |
    There are ${ fruit.number() }
    fruits in all.
  subquestion: |
    The fruits are ${ fruit }.
"gather-list-email-recipients": |-
  objects:
    - recipient: |
        DAEmailRecipientList.using(
          there_are_any=True)
  ---
  mandatory: True
  question: |
    The list of recipients
  subquestion: |
    % for x in recipient:
    * ${ x }
    % endfor
  ---
  question: |
    What is the ${ ordinal(i) } e-mail
    address?
  fields:
    - E-mail: recipient[i].address
      datatype: email
  ---
  question: |
    Would you like to add another
    e-mail recipient?
  yesno: recipient.there_is_another
"gather-list-friend-bad-order": |-
  objects:
    - friend: |
        DAList.using(
          object_type=Individual,
          there_are_any=True)
  ---
  mandatory: True
  question: |
    Your friends
  subquestion: |
    % for x in friend:
    * ${ x } likes
    ${ noun_plural(x.favorite_animal).lower() }
    and is
    ${ x.age_in_years() }
    years old.
    % endfor
  ---
  question: |
    What is the name of your ${ ordinal(i) }
    friend?
  fields:
    - First Name: friend[i].name.first
  ---
  question: |
    What is
    ${ friend[i].possessive('birthdate') }?
  fields:
    - Birthdate: friend[i].birthdate
      datatype: date
  ---
  question: |
    What is
    ${ friend[i].possessive('favorite animal') }?
  fields:
    - Favorite animal: friend[i].favorite_animal
  ---
  question: |
    Do you have any other friends?
  yesno: friend.there_is_another
"gather-list-friend-good-order": |-
  objects:
    - friend: |
        DAList.using(
          object_type=Individual,
          complete_attribute='complete',
          there_are_any=True)
  ---
  mandatory: True
  question: |
    Your friends
  subquestion: |
    % for x in friend:
    * ${ x } likes
    ${ noun_plural(x.favorite_animal).lower() }
    and is
    ${ x.age_in_years() }
    years old.
    % endfor
  ---
  code: |
    friend[i].name.first
    friend[i].birthdate
    friend[i].favorite_animal
    friend[i].complete = True
  ---
  question: |
    What is the name of your ${ ordinal(i) }
    friend?
  fields:
    - First Name: friend[i].name.first
  ---
  question: |
    What is
    ${ friend[i].possessive('birthdate') }?
  fields:
    - Birthdate: friend[i].birthdate
      datatype: date
  ---
  question: |
    What is
    ${ friend[i].possessive('favorite animal') }?
  fields:
    - Favorite animal: friend[i].favorite_animal
  ---
  question: |
    Do you have any other friends?
  yesno: friend.there_is_another
"gather-list-objects": |-
  objects:
    - location: |
        DAList.using(
          object_type=Address,
          there_are_any=True)
  ---
  mandatory: True
  question: |
    The locations
  subquestion: |
    % for loc in location:
    * ${ loc }
    % endfor
  ---
  question: |
    What is the address of the
    ${ ordinal(i) } location?
  fields:
    - Address: location[i].address
    - Unit: location[i].unit
      required: False
    - City: location[i].city
    - State: location[i].state
      code: |
        states_list()
    - Zip: location[i].zip
      required: False
  ---
  question: |
    Would you like to add another location?
  yesno: location.there_is_another
"gather-manual-gathered": |-
  code: |
    fruit.append('apple', 'orange', 'grape')
    fruit.gathered = True
  ---
  mandatory: True
  code: |
    fruit.auto_gather = False
  ---
  mandatory: True
  question: |
    The fruits are ${ fruit }.
"gather-manual-gathered-object": |-
  objects:
    - fruit: DAList
  ---
  mandatory: True
  code: |
    fruit.object_type = DAObject
    fruit.complete_attribute = 'complete'
  ---
  code: |
    need(fruit[i].name)
    need(fruit[i].seeds)
    fruit[i].complete = True
  ---
  question: |
    Tell me about the first fruit.
  fields:
    - Name: fruit[0].name
    - Seeds: fruit[0].seeds
      datatype: integer
      min: 0
  ---
  question: |
    Tell me about another fruit.
  fields:
    - Name: fruit[i].name
    - Seeds: fruit[i].seeds
      datatype: integer
      min: 0
  ---
  question: |
    Do you know about any other fruit?
  yesno: fruit.there_is_another
  ---
  question: |
    Do you know about any fruit?
  yesno: fruit.there_are_any
  ---
  mandatory: True
  question: |
    Your knowledge of fruit.
  subquestion: |
    % for item in fruit:
    ${ item.name } has
    ${ item.seeds } seeds.
    % endfor
"gather-manual-gathered-object-simple": |-
  objects:
    - fruit: DAList
  ---
  mandatory: True
  code: |
    fruit.object_type = DAObject
    fruit.complete_attribute = 'name'
  ---
  question: |
    Tell me about the first fruit.
  fields:
    - Name: fruit[0].name
    - Seeds: fruit[0].seeds
      datatype: integer
      min: 0
  ---
  question: |
    Tell me about another fruit.
  fields:
    - Name: fruit[i].name
    - Seeds: fruit[i].seeds
      datatype: integer
      min: 0
  ---
  question: |
    Do you know about any other fruit?
  yesno: fruit.there_is_another
  ---
  question: |
    Do you know about any fruit?
  yesno: fruit.there_are_any
  ---
  mandatory: True
  question: |
    Your knowledge of fruit.
  subquestion: |
    % for item in fruit:
    ${ item.name } has
    ${ item.seeds } seeds.
    % endfor
"gather-set": |-
  objects:
    - fruit: DASet
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    The fruit include ${ fruit }.
  ---
  question: |
    Should there be any fruits
    in the set?
  yesno: fruit.there_are_any
  ---
  question: |
    What fruit should be added to
    the set?
  fields:
    - Fruit: fruit.new_item
  ---
  question: |
    So far, the fruits in the set
    include ${ fruit }.  Are there
    any others?
  yesno: fruit.there_is_another
"gather-set-number": |-
  objects:
    - fruit: DASet
  ---
  mandatory: True
  code: |
    fruit.ask_number = True
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    The fruit include ${ fruit }.
  ---
  question: |
    How many fruit should be added
    to the set?
  fields:
    - Number: fruit.target_number
      datatype: integer
      min: 0
  ---
  question: |
    What fruit should be added to
    the set?
  fields:
    - Fruit: fruit.new_item
"gather-set-object": |-
  objects:
    - fruit: DASet
    - my_favorites: DASet
    - apple: DAObject
    - orange: DAObject
    - pear: DAObject
    - plum: DAObject
    - grape: DAObject
  ---
  mandatory: True
  code: |
    apple.name = "apples"
    orange.name = "oranges"
    pear.name = "pears"
    plum.name = "plums"
    grape.name = "grapes"
    my_favorites.add(apple, pear)
    my_favorites.gathered = True
  ---
  mandatory: True
  question: |
    There are ${ fruit.number_as_word() }
    fruits in all.
  subquestion: |
    % if fruit.number():
    The fruits you like include ${ fruit }.
    % endif

    % if fruits_in_common.number():
    The fruits we both like are
    ${ fruits_in_common }.
    % endif
  ---
  code: |
    fruits_in_common = fruit.intersection(my_favorites)
  ---
  question: |
    Do you like ${ apple }, ${ orange },
    ${ pear }, ${ plum }, or ${ grape }?
  yesno: fruit.there_are_any
  ---
  question: |
    Pick a fruit that you like.
  fields:
    - Fruit: fruit.new_item
      datatype: object
      choices:
        - apple
        - orange
        - pear
        - plum
        - grape
  ---
  question: |
    So far, you have indicated you like
    ${ fruit }.  Are there any other
    fruits you like?
  yesno: fruit.there_is_another
"gather-simple": |-
  objects:
    - fruit: DAList
  ---
  question: |
    How many fruits are there?
  fields:
    - Number: number_of_fruits
      datatype: integer
      min: 2
  ---
  question: |
    What's the ${ ordinal(i) } fruit?
  fields:
    - Fruit: fruit[i]
  ---
  mandatory: True
  question: |
    Fruits
  subquestion: |
    The fruits are:

    % for index in range(0, number_of_fruits):
    * ${ fruit[index] }
    % endfor
"generators": |-
  objects:
    - bus: Thing
    - car: Thing
  ---
  code: |
    bus.name.text = 'bus'
    car.name.text = 'car'
    bus.help_text = 'An inexpensive form of public transportation.'
    car.help_text = 'A vehicle you can have all to yourself.'
    bus.image = 'bus-alt'
    car.image = 'car-side'
  ---
  question: |
    How would you prefer to travel?
  fields:
    - no label: transportation_method
      datatype: object_radio
      choices:
        - bus
        - car
      object labeler: |
        lambda y: capitalize(y)
      help generator: |
        lambda y: y.help_text
      image generator: |
        lambda y: y.image
"generic-object": |-
  generic object: Individual
  question: |
    Does ${ x } like cats?
  yesno: x.likes_cats
"generic-object-ein": |-
  generic object: Organization
  question: |
    What is the EIN of ${ x }?
  fields:
    - EIN: x.ein
  ---
  generic object: Organization
  code: |
    if x.tax_status == '501c3':
      x.ein = retrieve_ein(x.name)
"generic-object-phone-number": |-
  objects:
    - grantor: Individual
    - grantee: Individual
    - trustee: Individual
  ---
  generic object: Individual
  question: |
    What is
    ${ x.object_possessive('name') }?
  fields:
    - First Name: x.name.first
      default: ${ x.first_name_hint() }
    - Middle Name: x.name.middle
      required: False
    - Last Name: x.name.last
      default: ${ x.last_name_hint() }
    - Suffix: x.name.suffix
      required: False
      code: |
        name_suffix()
"geocode": "question: |\n  Enter an address\nfields:\n  - Address: the_address.address\n\
  \  - Unit: the_address.unit\n    required: False\n  - City: the_address.city\n \
  \ - State: the_address.state\n    code: states_list()\n  - Zip: the_address.zip\n\
  \    required: False\n---\nmandatory: True\ncode: |\n  the_address.geocode()\n---\n\
  mandatory: True\nquestion: |\n  Information about your address\nsubquestion: |\n\
  \  The address you provided is:\n    \n  ${ the_address }\n\n  As JSON, this is:\n\
  \n  ${ indent(json.dumps(the_address.as_serializable(), indent=2)) }\n\n  % if the_address.was_geocoded_successfully():\n\
  \  The normalized version is:\n\n  ${ the_address.norm }\n\n  As JSON, this is:\n\
  \n  ${ indent(json.dumps(the_address.norm.as_serializable(), indent=2)) }\n  \n\
  \  The long-form normalized\n  version is:\n\n  ${ the_address.norm_long }\n\n \
  \ As JSON, this is:\n\n  ${ indent(json.dumps(the_address.norm_long.as_serializable(),\
  \ indent=2)) }\n\n  The latitude and longitude are\n  ${ the_address.location.latitude\
  \ }\n  and\n  ${ the_address.location.longitude }.\n\n  % if hasattr(the_address,\
  \ 'neighborhood'):\n  The address is located in the\n  ${ the_address.neighborhood\
  \ }\n  neighborhood.\n  % endif\n\n  % if hasattr(the_address, 'county'):\n  The\
  \ address is located in\n  ${ the_address.county }.\n  % endif\n\n  ${ map_of(the_address)\
  \ }\n\n  % else:\n  The address could not be\n  geocoded.\n  % endif"
"geocode-from-address": "objects:\n  - the_address: Address\n---\nquestion: |\n  Enter\
  \ an address\nfields:\n  - Address: address_one_line\n---\nmandatory: True\ncode:\
  \ |\n  the_address.geocode(address_one_line)\n---\nmandatory: True\nquestion: |\n\
  \  Information about your address\nsubquestion: |\n  % if the_address.was_geocoded_successfully():\n\
  \  The address you provided is:\n    \n  ${ the_address }\n\n  The address is located\
  \ in\n  ${ the_address.city }.\n\n  The latitude and longitude are\n  ${ the_address.location.latitude\
  \ }\n  and\n  ${ the_address.location.longitude }.\n  % else:\n  That address could\
  \ not be geocoded.\n  % endif"
"geocode-reset": "objects:\n  - the_address: Address\n---\nmandatory: True\ncode:\
  \ |\n  saw_address\n  saw_address_again\n  final_screen\n---\nundefine:\n  - the_address.county\n\
  question: |\n  Enter an address\nfields:\n  - Address: the_address.address\n  -\
  \ Unit: the_address.unit\n    required: False\n  - City: the_address.city\n  - State:\
  \ the_address.state\n    code: states_list()\n  - Zip: the_address.zip\n    required:\
  \ False\n---\nquestion: |\n  In what county is ${ the_address }\n  located?\nfields:\n\
  \  - County: the_address.county\n---\nsets: the_address.county\ncode: |\n  the_address.geocode(reset=True)\n\
  ---\nquestion: |\n  Information about your address\nsubquestion: |\n  The address\
  \ you provided is:\n    \n  ${ the_address }\n\n  The address is located in\n  ${\
  \ the_address.county }.\ncontinue button field: saw_address\n---\ncode: |\n  saw_address_again\
  \ = True\n  undefine('saw_address')\n  force_ask('the_address.address')\n---\nevent:\
  \ final_screen\nquestion: |\n  Done with the interview"
"get-default-timezone": |-
  question: |
    The default time zone is
    ${ get_default_timezone() }.
  mandatory: True
"get-docx-variables": |-
  objects:
    - docx_file: DAStaticFile.using(filename="data/templates/letter_template.docx")
  ---
  mandatory: True
  question: |
    The variables in the DOCX file
  subquestion: |
    The following variables were found in the
    [letter_template.docx] file:

    `${ repr(docx_file.get_docx_variables()) }`

    [letter_template.docx]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/letter_template.docx
"get-pdf-fields": |-
  objects:
    - pdf_file: DAStaticFile.using(filename="data/templates/fruit_template.pdf")
  ---
  mandatory: True
  question: The field names in the PDF file
  subquestion: |
    The field names in the PDF file [fruit_template.pdf] are:

    `${ repr(pdf_file.get_pdf_fields()) }`

    [fruit_template.pdf]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/fruit_template.pdf
"get-pdf-fields-2": |-
  objects:
    - pdf_file: DAStaticFile.using(filename="data/templates/sample-form-different-export-values.pdf")
  ---
  mandatory: True
  question: The field names in the PDF file
  subquestion: |
    The field names in the PDF file [sample-form-different-export-values.pdf] are:

    `${ repr(pdf_file.get_pdf_fields()) }`

    [sample-form-different-export-values.pdf]: https://github.com/jhpyle/docassemble/blob/master/docassemble_base/docassemble/base/data/templates/sample-form-different-export-values.pdf
"getField": |-
  question: |
    What do you want for
    dessert<span id="the_dessert"></span>?
  fields:
    - Dessert: dessert
    - html: |
        <a href="#" id="show_me" class="btn btn-primary">Eat it</a>
  script: |
    <script>
      $("#show_me").click(function(){
        $("#the_dessert").html(" besides " + getField('dessert').value);
        return false;
      });
    </script>
"getFields": |-
  question: |
    Tell me about your musical tastes.
  fields:
    - Best band ever: best_band
    - Best singer ever: best_singer
    - Best composer ever: best_composer
    - Best songwriter ever: best_songwriter
    - html: |
        <a href="#" id="decide_for_me" class="btn btn-success">Decide for me</a>
  script: |
    <script>
      $("#decide_for_me").click(function(){
        var fields = getFields();
        for (var i = 0; i < fields.length; ++i){
          setField(fields[i], 'Carly Simon');
        }
        return false;
      });
    </script>
  ---
  mandatory: True
  question: |
    You like ${ comma_and_list(set([best_band, best_singer, best_composer, best_songwriter])) }.
"googlechart": |-
  features:
    javascript: https://www.gstatic.com/charts/loader.js
  ---
  mandatory: True
  question: Your stuff
  subquestion: |
    <div id="piechart" style="width: 100%; min-height: 450px;"></div>
  script: |
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var chartwidth = $('#piechart').width();
        var data = google.visualization.arrayToDataTable(${ json.dumps(data) });
        var options = {
          title: ${ json.dumps(title) },
          width: chartwidth,
          chartArea: {width: chartwidth, left: 20, top: 20, height: chartwidth*0.75}
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));

        chart.draw(data, options);
      }
    </script>
  ---
  code: |
    title = "Household stuff"
    data = [['Thing', 'How many']] + [[y, how_many[y]] for y in things]
"hello-not-oop": |-
  question: What is your name?
  fields:
    - First: user_first_name
    - Last: user_last_name
  ---
  question: |
    Hello, ${ user_first_name } ${ user_last_name }!
  mandatory: True
"hello-oop": |-
  objects:
    - user: Individual
  ---
  question: |
    What's your name?
  fields:
    - First: user.name.first
    - Last: user.name.last
  ---
  question: |
    Hello, ${ user }!
  mandatory: True
"help": |-
  question: |
    What is 2+2?
  subquestion:
    If you need help answering this question,
    press "Help."
  field: answer
  choices:
    - 3
    - 4
    - 5
  help: |
    Hint: 2 + 2 = 4.
"help-damages": |-
  question: |
    How much money do you wish
    to seek in damages?
  fields:
    - Money: damages_sought
      datatype: currency
  help: |
    If you are not sure how much
    money to seek in damages, just ask
    for a million dollars, since you
    want ${ defendant } to suffer.
"help-damages-audio": |-
  question: |
    How much money do you wish
    to seek in damages?
  fields:
    - Money: damages_sought
      datatype: currency
  help:
    content: |
      If you are not sure how much
      money to seek in damages, just ask
      for a million dollars, since you
      want ${ defendant } to suffer.
    audio: |
      message_re_damages.mp3
"help-damages-label": |-
  question: |
    How much money do you wish
    to seek in damages?
  fields:
    - Money: damages_sought
      datatype: currency
  help:
    label: |
      More info
    content: |
      If you are not sure how much
      money to seek in damages, just ask
      for a million dollars, since you
      want ${ defendant } to suffer.
"hideif-boolean": |-
  question: |
    Please fill in the following information.
  fields:
    - "Do you have fruit?": has_fruit
      datatype: yesnoradio
    - "What fruit do you need?": fruit
      hide if: has_fruit
"html": |-
  question: |
    I was thinking about your birthday.
  fields:
    - html: |
        The date and time today is
        <span class="mytime" id="today_time"></span>.
    - "When is your next birthday?": birth_date
      datatype: date
  css: |
    <style>
      .mytime {
         color: green;
      }
    </style>
  script: |
    <script>
      $("#today_time").html(Date());
    </script>
"hyperlink-style": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    docx template file: resource_guide.docx
    hyperlink style: CustomStyle
  ---
  code: |
    if legal_issue == 'family':
      the_link = "the [Family Law Information Portal](https://familylawinfo.com)"
    else:
      the_link = "your [local law library](https://lawlibrarydirectory.org), which may be able to help you"
"if": |-
  question: |
    Describe your intelligence.
  field: user_intelligence
  choices:
    - Smart
    - Dumb
  ---
  if: |
    user_intelligence == 'Smart'
  question: |
    What is the square root of 50% of 32?
  fields:
    - Answer: answer
      datatype: integer
  ---
  if: |
    user_intelligence == 'Dumb'
  question: |
    What is 2+2?
  fields:
    - Answer: answer
      datatype: integer
  ---
  mandatory: True
  question: |
    % if answer == 4:
    That is correct.
    % else:
    Wrong answer.
    % endif
"image-sets": |-
  image sets:
    freepik:
      attribution: |
        Icon made by
        [Freepik](http://www.flaticon.com/authors/freepik)
      images:
        baby: crawling.svg
        money: commerce.svg
"images": |-
  images:
    star: star.svg
    diamond: bluediamond.svg
"immediate_file": |-
  attachment:
    name: A file
    file: test_file
    variable name: the_file
    valid formats:
      - pdf
    content: |
      Hello, ${ url_args.get('name', 'you') }!
"imports": |-
  imports:
    - re
"include": |-
  include:
    - docassemble.demo:data/questions/some-questions.yml
"income": |-
  question: |
    What is your income?
  fields:
    - Income: user_income_amount
      datatype: currency
    - Period: user_income_period
      datatype: number
      code: |
        period_list()
"indefinite-article": |-
  question: |
    Would you prefer to have
    ${ indefinite_article(fruit) }
    as opposed to
    ${ indefinite_article(vegetable) }?
  yesno: prefer_fruit
"indent": |-
  mandatory: True
  question: |
    Your allegations
  subquestion: |
    You allege that:

    1.  The sky is blue.

    2.  You have a house.

        Your house has a roof.

        Your roof is made up of many
        shingles.

    3.  You have a car.

    ${ indent(car_allegations) }

    4.  You have at least a high
        school education.
  ---
  template: car_allegations
  content: |
    Your car is black.

    Your car's gas tank is nearly empty.

    Your car goes from 0 to 60 fast enough
    not to be rear-ended on the highway.
"index-variable": |-
  question: |
    What is the ${ ordinal(i) }
    person's name?
  fields:
    - First: people[i].name.first
    - Last: people[i].name.last
"infinite-loop": |-
  mandatory: True
  question: |
    The variable is
    ${ target_variable }.
"infinite-loop-2": |-
  mandatory: True
  question: |
    I need ${ foo }.
"initial": |-
  mandatory: True
  code: |
    counter = 0
  ---
  initial: True
  code: |
    counter = counter + 1
  ---
  question: |
    How many peaches do you have?
  subquestion: |
    The value of the counter
    is ${ counter }.
  fields:
    - no label: peaches
      datatype: integer
  ---
  code: |
    fruits = peaches + pears
  ---
  question: |
    How many pears do you have?
  subquestion: |
    The value of the counter
    is ${ counter }.
  fields:
    - no label: pears
      datatype: integer
  ---
  question: |
    You have ${ fruits } pieces of fruit.
  subquestion: |
    The value of the counter
    is ${ counter }.
  mandatory: True
"initial-code": |-
  initial: use_counter
  code: |
    counter = counter + 1
  ---
  question: |
    Do you want to turn on the
    counter?
  yesno: use_counter
"interface": |-
  question: |
    You are using the ${ interface() }
    interface.
  mandatory: True
"interview-flowers": |-
  question: |
    What is your favorite flower?
  fields:
    - Fruit: favorite_flower
"interview-fruit": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
"interview-help": |-
  interview help:
    heading: About this interview
    content: |
      Answer each question to the best of your
      ability.  If you do not know the answer
      to any question, panic.
"interview-list": |-
  question: |
    My interviews
  subquestion: |
    % for interview in interview_list()[0]:
    * ${ interview['title'] }
      started at
      ${ interview['starttime'] }.
    % endfor
  field: my_interviews
"interview-url": |-
  mandatory: True
  code: |
    multi_user = True
  ---
  question: |
    Ready to proceed?
  subquestion: |
    To invite someone else to complete
    this interview, ask them to go to
    [this URL](${ interview_url() }).

    To proceed with the interview,
    click "Yes."
  yesno: ready_to_proceed
"interview-url-refer": |-
  mandatory: true
  question: |
    What interview would you
    like to use?
  subquestion: |
    * [Fruit]
    * [Vegetables]
    * [Flowers]

    [Fruit]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-fruit.yml') }
    [Vegetables]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-vegetables.yml') }
    [Flowers]: ${ interview_url(i='docassemble.demo:data/questions/interview-about-flowers.yml') }
"interview-url-session": "mandatory: True\ncode: |\n  multi_user = False\n---\nquestion:\
  \ |\n  Ready to proceed?\nsubquestion: |\n  Here is an interview URL that launches\
  \ another interview.\n  \n  `${ interview_url(i='docassemble.base:data/questions/examples/interview-url-session-two.yml')\
  \ }`\n\n  To proceed with the interview,\n  click \"Yes.\"\nyesno: ready_to_proceed\n\
  ---\nquestion: All done\nsubquestion: |\n  Now we are done with the interview.\n\
  sets: final_screen"
"interview-url-session-two": |-
  mandatory: True
  code: |
    multi_user = False
  ---
  mandatory: True
  code: |
    if ready_to_proceed:
      all_done
  ---
  question: |
    Please press continue
  field: ready_to_proceed
  ---
  question: All done
  subquestion: |
    Now we are done with the interview.
  event: all_done
"interview-url-temp": |-
  mandatory: True
  code: |
    multi_user = True
  ---
  question: |
    Ready to proceed?
  subquestion: |
    To invite someone else to complete
    this interview, ask them to go to
    [this URL](${ interview_url(temporary=1) })
    within the next hour.

    To proceed with the interview,
    click "Yes."
  yesno: ready_to_proceed
"interview-vegetables": |-
  question: |
    What is your favorite vegetable?
  fields:
    - Fruit: favorite_vegetable
"interview_url_action": |-
  objects:
    - user: Individual
  ---
  mandatory: True
  code: |
    multi_user = True
    status = 'normal'
  ---
  initial: True
  code: |
    process_action()
  ---
  event: check_update_status
  code: |
    if 'status' in action_arguments():
      status = action_argument('status')
  ---
  mandatory: True
  question: |
    The current status is ${ status }.
  subquestion: |
    Anyone can use the following links
    to change the current status:

    * Change to [normal](${ interview_url_action('check_update_status', status='normal') })
    * Change to [danger](${ interview_url_action('check_update_status', status='danger') })
    * Change to [critical](${ interview_url_action('check_update_status', status='critical') })
"inverse-navbar": |-
  features:
    inverse navbar: False
"iso-country": |-
  question: |
    In what country do you live?
  fields:
    - Country: country
  validation code: |
    try:
      country = iso_country(country)
    except:
      validation_error("That country does not exist.  Please try again.")
  ---
  mandatory: True
  question: |
    You live in ${ country_name(country) }.
"item": "question: |\n  Describe the ${ ordinal(i) } fruit.\nfields:\n  - Name: fruit[i].name\n\
  \  - Color: fruit[i].color\n  - Seeds: fruit[i].seeds\n    datatype: integer\n---\n\
  question: |\n  Are there any more fruit?\nyesno: fruit.there_is_another\n---\nmandatory:\
  \ True\nquestion: |\n  Description of ten fruits.\nsubquestion: |\n  % for index\
  \ in range(10):\n  The name of the ${ ordinal(index) }\n  fruit is ${ fruit.item(index).name\
  \ }.\n  It is ${ fruit.item(index).color }\n  and it has\n  ${ fruit.item(index).seeds\
  \ } seeds.\n  \n  % endfor"
"item-dict": "code: |\n  pet_types = [\n    'dog', 'cat', 'goldfish',\n    'turtle',\
  \ 'lizard', 'rabbit',\n    'rock', 'hamster', 'gerbil',\n    'rat']\n---\nquestion:\
  \ |\n  What type of pet do you have?\nfields:\n  - Type: pet.new_item_name\n   \
  \ datatype: dropdown\n    code: pet_types\n---\nquestion: |\n  Describe your pet\
  \ ${ i }.\nfields:\n  - Name: pet[i].name\n  - Color: pet[i].color\n  - Legs: pet[i].legs\n\
  \    datatype: integer\n---\nquestion: |\n  Do you have any other pets?\nyesno:\
  \ pet.there_is_another\n---\nmandatory: True\nquestion: |\n  Description of ten\
  \ pets.\nsubquestion: |\n  % for pet_type in pet_types:\n  The name of your pet\
  \ ${ pet_type }\n  is ${ pet.item(pet_type).name }.\n  It is ${ pet.item(pet_type).color\
  \ }\n  and it has\n  ${ pet.item(pet_type).legs } legs.\n  \n  % endfor"
"join": |-
  initial: True
  code: |
    process_action()
    if user_has_privilege('admin', 'developer'):
      advocate_screen
  ---
  event: advocate_screen
  question: |
    Summary of user's answers so far.
  review:
    - Change Fruit: fruit
      button: |
        The favorite fruit was ${ fruit }.
    - Change Vegetable: vegetable
      button: |
        The favorite vegetable was ${ vegetable }.
    - Change Fungus: fungi
      button: |
        The favorite fungus was ${ fungi }.
  resume button label: Refresh
"js_action_call": |-
  mandatory: True
  question: |
    The pie
  subquestion: |
    <button id="run" class="btn btn-primary">Run</button>

    <span id="resultsArea"></span>
  script: |
    <script>
      $("#run").click(function(){
        action_call('myaction', {fruit: 'apple'}, function(data){
          $("#resultsArea").html("The pie is called " + data.pie + ".")
        });
      });
    </script>
  ---
  event: myaction
  code: |
    fruit = action_argument('fruit')
    dessert = fruit + " pie"
    json_response(dict(pie=dessert))
"js_url_action": |-
  mandatory: True
  code: |
    dessert = "cod liver oil"
  ---
  mandatory: True
  question: |
    Your dessert is ${ dessert }.
  subquestion: |
    If you want, you can
    <a id="choose">choose something tastier</a>.
  script: |
    <script>
      $("#choose").attr('href', url_action('myaction', {fruit: 'apple'}));
    </script>
  ---
  event: myaction
  code: |
    fruit = action_argument('fruit')
    dessert = fruit + " pie"
"js_variables": |-
  mandatory: True
  code: |
    fruit = 'apple'
  ---
  mandatory: True
  question: |
    The fruit.
  subquestion: |
    Fruit is <span id="food"></span>.
  script: |
    <script>
      get_interview_variables(function(data){
        if (data.success){
          $("#food").html(data.variables['fruit']);
        }
      });
    </script>
"json-response": |-
  mandatory: True
  code: |
    multi_user = True
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
"jsshowif": "question: |\n  Please fill in the following information.\nsubquestion:\
  \ |\n  Try setting \"Favorite fruit\" to \n  \"apple\" or \"mango\" (and unfocus\
  \ the \n  field) to see what happens.\nfields:\n  - Favorite fruit: fruit\n  - Favorite\
  \ vegetable: vegetable\n  - Favorite fungus: mushroom\n    js show if: |\n     \
  \ val(\"fruit\") == \"apple\"\n  - Favorite spice: spice\n    js hide if: |\n  \
  \    val(\"fruit\") == \"mango\"\n---\nquestion: |\n  Please fill in the following\
  \ information.\nsubquestion: |\n  See what happens when you set \n  \"Favorite cuisine\"\
  \ to \"Chinese food.\"\nfields:\n  - Favorite cuisine: cuisine\n    choices:\n \
  \     - Chinese food\n      - French food\n      - Belgian food\n  - Favorite dish:\
  \ dish\n    js show if: |\n      val('cuisine') == \"Chinese food\"\n---\nquestion:\
  \ |\n  Please fill in the following information.\nfields:\n  - \"Do you watch TV?\"\
  : watches_tv\n    datatype: yesnoradio\n  - Favorite TV show: tv_show\n    js show\
  \ if: |\n      val('watches_tv') == true\n  - \"I listen to the radio\": listens_to_radio\n\
  \    datatype: yesno\n  - Favorite radio station: radio_station\n    js show if:\
  \ |\n      val('listens_to_radio') == true\n  - Favorite modulation type: favorite_modulation\n\
  \    datatype: radio\n    choices:\n      - FM\n      - AM\n    js show if: |\n\
  \      val('listens_to_radio') == true      \n  - Favorite antenna style: favorite_antenna\n\
  \    js show if: |\n      val('favorite_modulation') == 'FM'\n---\nquestion: |\n\
  \  Please fill in the following information.\nsubquestion: |\n  Try selecting Apple\
  \ and Plum.\nfields:\n  - Select the fruits you like: liked_fruits\n    datatype:\
  \ checkboxes\n    choices:\n      - Apple\n      - Peach\n      - Pear\n      -\
  \ Plum\n  - Favorite way to eat apples and plums: apple_plum_dish\n    js show if:\
  \ |\n      val(\"liked_fruits['Apple']\") && val(\"liked_fruits['Plum']\")"
"label": |-
  question: |
    What are your favorite things to eat?
  fields:
    - label: Vegetable
      field: favorite_vegetable
    - label: Fruit
      field: favorite_fruit
"language": "question: |\n  What is the meaning of life?\nfields:\n  - Meaning of\
  \ life: meaning_life\n---\nlanguage: es\nquestion: |\n  \xBFCu\xE1l es el significado\
  \ de la vida?\nfields:\n  - Significado de la Vida: meaning_life"
"language-change": |-
  initial: True
  code: |
    set_language(language)
    menu_items
  ---
  language: en
  code: |
    menu_items = [ action_menu_item('Change language', 'change_language') ]
  ---
  language: es
  code: |
    menu_items = [ action_menu_item('Cambiar idioma', 'change_language') ]
  ---
  event: change_language
  code: |
    del language
    del menu_items
"language_from_browser": |-
  question: |
    I think your language code is
    `${ language_from_browser() }`.
  mandatory: True
"language_from_browser_restricted": |-
  question: |
    % if language_from_browser('es', 'fr') is None:
    I guess you do not speak
    Spanish or French.
    % else:
    Great!  Your language code is
    `${ language_from_browser('es', 'fr') }`.
    % endif
  mandatory: True
"lastfirst": |-
  template: client_letter
  content: |
    We need to be prepared to bring a lawsuit against the following:

    % for party in enemy:
    * ${ party.name.lastfirst() }
    % endfor
  ---
  objects:
    enemy: PartyList
  ---
  mandatory: True
  code: |
    enemy.appendObject(Individual)
    enemy[0].name.first = "Darth"
    enemy[0].name.last = "Vader"
    enemy.appendObject(Person)
    enemy[1].name.text = "Death Star Corporation"
    enemy.appendObject(Individual)
    enemy[2].name.first = "Kylo"
    enemy[2].name.last = "Ren"
    enemy.gathered = True
"leave": |-
  mandatory: True
  code: |
    command('leave', url=target_url)
  ---
  question: |
    Where do you want to go?
  field: target_url
  buttons:
    - Stanford: "http://stanford.edu/"
    - Harvard: "http://www.harvard.edu/"
"list-collect": |-
  question: |
    Tell me about the fruit.
  fields:
    - Fruit name: fruit[i].name.text
    - Number of seeds: fruit[i].seeds
      datatype: number
  list collect: True
"list-collect-disable-others": |-
  question: |
    Tell me about the fruit.
  fields:
    - Fruit name: fruit[i].name.text
      choices:
        - Apple
        - Orange
        - Grapefruit
      disable others: True
    - Fruit name: fruit[i].name.text
    - Number of seeds: fruit[i].seeds
      datatype: number
  list collect: True
"list-collect-options": |-
  question: |
    Tell me about the fruit.
  fields:
    - Fruit name: fruit[i].name.text
    - Number of seeds: fruit[i].seeds
      datatype: number
  list collect:
    enable: not fruit.has_been_gathered()
    is final: False
    allow delete: False
    add another label: Add more
    label: |
      ${ fruit_name } ${ i+1 }.
"list-collect-string": |-
  question: |
    Tell me about the fruit.
  fields:
    - Fruit name: fruit[i]
  list collect: True
"list-collect-uncheck-others": |-
  question: |
    Tell me about the fruit.
  fields:
    - Fruit name: fruit[i].name.text
    - Number of seeds: fruit[i].seeds
      datatype: number
    - Sweet: fruit[i].sweet
      datatype: yesno
    - Sour: fruit[i].sour
      datatype: yesno
    - Neither: fruit[i].savory
      datatype: yesno
      uncheck others: True
  list collect: True
"list-interview": |-
  code: |
    available_interviews = interview_menu()
  ---
  prevent going back: True
  mandatory: True
  question: |
    Available interviews
  subquestion: |
    % if len(available_interviews) > 0:
    % for interview in available_interviews:
    * [${ interview['title'] }](${ interview['link'] })
    % endfor
    % else:
    There are no available interviews.
    % endif
"list-table-manual-gather": |-
  objects:
    - person: DAList.using(object_type=Individual,
                           complete_attribute='complete')
  ---
  mandatory: True
  code: |
    person[0]
    person[1]
    for item in person.elements:
      item.complete
    person.gathered = True
  ---
  code: |
    person[i].name.first
    person[i].favorite_fruit
    person[i].complete = True
"list-table-manual-gather-simple": |-
  objects:
    - person: DAList
  ---
  mandatory: True
  code: |
    person[0]
    person[1]
    person.gathered = True
"lists": |-
  mandatory: True
  code: |
    fears.extend(['spiders', 'snakes', 'fish'])
    fears.gathered = True
  ---
  mandatory: True
  question: |
    Your fears
  subquestion: |
    You are afraid of
    ${ comma_and_list(fears) }.
"live_chat": |-
  mandatory: True
  code: |
    set_live_help_status(availability='available', mode='help', partner_roles=['advocate'])
"loading-legal": |-
  modules:
    - docassemble.base.legal
"loading-util": |-
  modules:
    - docassemble.base.util
"log": |-
  mandatory: True
  code: |
    log("Hello, user!", "info")
    log("Lookout, user!", "danger")
  ---
  mandatory: True
  decoration: coins
  question: |
    The interview is complete.
"lucky-number": |-
  field: lucky_information_confirmed
  question: |
    Please confirm the following information.
  subquestion: |
    Your lucky number is ${ lucky_number }.
    [Increase](${ url_action('set_number_event', increment=1) })
    [Decrease](${ url_action('set_number_event', increment=-1) })

    Also, your lucky color is ${ lucky_color }.
    [Edit](${ url_action('lucky_color') })
  ---
  event: set_number_event
  code: |
    lucky_number += action_argument('increment')
  ---
  code: |
    lucky_number = 2
"madlibs": |-
  objects:
    - adjective: DAList
    - noun: DAList
    - person: DAList
    - place: DAList
  ---
  mandatory: True
  question: A funny story
  subquestion: |
    ${ person[0] } went to ${ place[0] }
    to buy
    ${ indefinite_article(noun[0]) }.

    At the ${ place[0] }, there was
    ${ indefinite_article(adjective[0])}
    ${ noun[1] }, which tried to zap
    ${ person[0] }.

    But luckily, ${ person[1] } came out
    of the back room just in time and
    lunged at the ${ noun[1] }, thereby
    saving the day.
  buttons:
    - Do it again: restart
  ---
  generic object: DAList
  question: |
    % if i == 0:
    Give me
    ${ indefinite_article(x.object_name()) }.
    % else:
    Give me another ${ x.object_name() }.
    % endif
  fields:
    - no label: x[i]
"main-page": |-
  metadata:
    pre: |
      <p><a href="https://example.com/buy"
      style="color: red; text-decoration: underline;">
      Click here to buy now!</a></p>
    submit: |
      <p style="font-size: 9px">You click
      this button under the pains and
      penalties of perjury.  By clicking,
      you agree to comply with the terms
      and conditions of this site, which
      are available for inspection at
      2311 Business Center Road, Lansing,
      MI, 93483</p>
    post: |
      <p style="color: green;">Need
      help? Call 888-555-3933 now!!!</p>
"mainpage-demo-parts": |-
  question: |
    What is your favorite vegetable?
  fields:
    - Favorite vegetable: favorite_vegetable
"mako-01": |-
  mandatory: True
  question: |
    A summary
  subquestion: |
    You like ${ favorite_fruit }
    and ${ favorite_vegetable }.
  ---
  code: |
    favorite_fruit = 'apples'
    favorite_vegetable = 'potatoes'
"mako-02": |-
  mandatory: True
  question: |
    Hello!
  subquestion: |
    I hope you are having a good day.

    % if day_of_month == 1:
    Don't forget to change your wall calendar!
    % endif
"mako-03": |-
  mandatory: True
  question: |
    Commentary on the day of the month
  subquestion: |
    Let me tell you about today.

    % if day_of_month < 3:
    The month just started!
    % elif day_of_month < 15:
    It is the beginning part of
    the month.
    % else:
    It is the latter part of the month.
    % endif
"mako-04": |-
  mandatory: True
  question: |
    Commentary on the day of the month
  subquestion: |
    Let me tell you about today.

    % if day_of_month < 3:
    The month just started!
    % elif day_of_month < 15:
    It is the beginning part of
    the month.
    % else:
      % if month_of_year == 12:
    It is almost New Year's!
      % else:
    It is the latter part of the month.
      % endif
    % endif
"mako-05": |-
  mandatory: True
  question: |
    Foods I like
  subquestion: |
    % for food in ['plums', 'pears', 'peas']:
    I like ${ food }.
    % endfor
"mako-06": |-
  modules:
    - docassemble.base.legal
  ---
  objects:
    - witness: PartyList
  ---
  mandatory: True
  question: |
    The ${ witness.as_noun() }
  subquestion: |
    % for person in witness:
    ${ person } is a witness.
    % endfor
  ---
  question: |
    What is the name of the
    ${ ordinal(i) } witness?
  fields:
    - First Name: witness[i].name.first
    - Last Name: witness[i].name.last
  ---
  question: |
    Are there any other witnesses?
  yesno: witness.there_is_another
"mako-07": |-
  mandatory: True
  question: |
    <%
      a = 2
      b = 3
      the_answer = a + b
    %>
    The answer is ${ the_answer }.
"mako-08": |-
  mandatory: True
  question: |
    Apples
  subquestion: |
    % if not likes_apples:
      Oh well, never mind.
      <% return STOP_RENDERING %>
    % endif
    Apples are red.

    They can also be green.

    They have stems and seeds.

    They are juicy and sweet.
"mako-09": |-
  mandatory: True
  question: |
    Foods I like
  subquestion: |
    % for food in ['apples', 'peaches', 'pears', 'plums', 'turnips', 'raspberries']:
      % if loop.first:
    First, I like ${ food }.
      % elif loop.last:
    Last but not least, I am a
    big fan of ${ food }.
      % elif loop.even:
    I also like ${ food }.
      % elif loop.odd:
    The ${ ordinal(loop.index) } food
    I like is ${ food }.
      % endif
    % endfor
"mandatory": |-
  mandatory: True
  code: |
    fruits = peaches + pears
    all_done
"mandatory-code": |-
  mandatory: |
    favorite_food == "apples"
  question: |
    You have good taste in food.
  buttons:
    - Continue: continue
  ---
  mandatory: True
  question: |
    Thank you for your input.
  ---
  question: |
    What is your favorite food?
  fields:
    - no label: favorite_food
"manual-attachment-list": |-
  mandatory: True
  question: Here is your document.
  subquestion: |
    [:file: Praecipe to Discontinue](${ praecipe.url_for(attachment=True) })
  attachment code: praecipe
  manual attachment list: True
"markdown": "question: |\n  Introduction to Markdown\nsubquestion: |\n  Markdown allows\
  \ you to express\n  formatting in plain text.\n  \n  # I am a heading\n\n  Write\
  \ in *italic text* or even\n  **bold text**.\n\n  ## I am a subheading\n\n  ###\
  \ I am a smaller subheading\n\n  To block quote,\n\n  > you can do this.\n\n  Insert\
  \ an image:\n\n  ![Markdown logo](https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/208px-Markdown-mark.svg.png)\n\
  \n  Here is a bullet list:\n\n  * Larry;\n  * Curly; and\n  * Moe\n\n  Here is a\
  \ numbered list:\n\n  1. Buy groceries.\n  2. Get the car inspected.\n  3. Take\
  \ over the world!\n  \n  You can [Google](http://google.com)\n  \"markdown\" to\
  \ learn more.\nmandatory: True"
"markdown-demo": |-
  question: Markdown demonstration
  subquestion: |
    This is *italic text*.
    This is **bold text**.
    This is __also bold text__.

    > This is some block-quoted
    > text

    ### This is a heading

    This is an image from the internet:

    ![Bass logo](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Bass_logo.svg/199px-Bass_logo.svg.png)

    Here is a bullet list:

    * Apple
    * Peach
    * Pear

    Here is a numbered list:

    1. Nutmeg
    2. Celery
    3. Oregano

    Here is a
    [link to a web site](http://google.com).
  mandatory: true
"material-icons": |-
  mandatory: True
  decoration: portrait
  question: |
    Eligibility
  subquestion: |
    You are eligible for :local_hospital:
    health insurance for yourself and
    your :child_care: children.
"menu-item": "mandatory: True\ncode: |\n  menu_items = [ action_menu_item('Visit Cow',\
  \ 'see_cow') ]\n---\nevent: see_cow\nquestion: |\n  Moo!\nsubquestion: |\n  [FILE\
  \ cow.jpg]\n  \n  Cow illustration designed by\n  [Freepik](http://www.freepik.com/free-photos-vectors/animal)\n\
  buttons:\n  - Continue: continue\n---\nquestion: Welcome to the interview\nsubquestion:\
  \ |\n  Check out the menu in the\n  upper-right corner.\nmandatory: True"
"menu-items-refer": "mandatory: True\ncode: |\n  menu_items = [ {'url': interview_url(i='docassemble.demo:data/questions/interview-about-fruit.yml'),\n\
  \                  'label': 'Fruit'},\n                 {'url': interview_url(i='docassemble.demo:data/questions/interview-about-vegetables.yml'),\n\
  \                  'label': 'Vegetables'}, \n                 {'url': interview_url(i='docassemble.demo:data/questions/interview-about-flowers.yml'),\n\
  \                  'label': 'Flowers'} ]\n---\nmandatory: True\nquestion: |\n  Select\
  \ an option from the\n  menu in the upper right."
"mermaid": |-
  modules:
    - docassemble.base.mermaid
  ---
  template: diagram
  content: |
    graph TD;
        ${ a }-->${ b };
        ${ a }-->${ c };
        ${ b }-->${ d };
        ${ c }-->${ d };
  ---
  question: Give me some names.
  fields:
    - A: a
      default: A
    - B: b
      default: B
    - C: c
      default: C
    - D: d
      default: D
  ---
  mandatory: True
  question: |
    Here is your diagram.
  subquestion: |
    ${ mmdc(diagram, file_format='png') }
"message": |-
  code: |
    message("The interview is over.", "Better luck next time!")
  mandatory: True
"metadata": |-
  metadata:
    title: |
      Interview title
    short title: |
      The title
    description: |
      This interview produces a Petition To
      Postpone Sheriff Sale.
    authors:
      - name: John Doe
        organization: Example, Inc.
    revision_date: 2016-03-22
    documentation: "https://docassemble.org/docs/initial.html#metadata"
"metadata-screen-parts": |-
  metadata:
    title: Title
    short title: Short title
    subtitle: |
      This is the subtitle part.
    pre: |
      This is the pre part.
    submit: |
      This is the submit part.
    post: |
      This is the post part.
    under: |
      This is the under part.
    right: |
      This is the right part.
    exit link: leave
    exit label: |
      Exit label
    help label: |
      Help label
    continue button label: |
      Continue button label
    resume button label: |
      Resume button label
    back button label: |
      Back button label
"min": |-
  question: |
    What percentage of your friends
    are turnips?
  fields:
    - Percent: percent
      datatype: number
      min: 0
      max: 100
"minlength": |-
  question: |
    What is the nuclear launch code?
  fields:
    - Code: launch_code
      minlength: 5
      maxlength: 15
"mixed-list": |-
  objects:
    - location: |
        DAList.using(
          there_are_any=True,
          ask_object_type=True)
  ---
  mandatory: True
  question: |
    The locations
  subquestion: |
    % for loc in location:
    * ${ loc }
    % endfor
  ---
  question: |
    Do you know the full address of the
    ${ ordinal(location.current_index()) }
    location?
  buttons:
    - Yes:
        code: |
          location.new_object_type = Address
    - No:
        code: |
          location.new_object_type = City
  ---
  question: |
    What is the address of the
    ${ ordinal(i) } location?
  fields:
    - Address: location[i].address
    - Unit: location[i].unit
      required: False
    - City: location[i].city
    - State: location[i].state
      code: |
        states_list()
    - Zip: location[i].zip
      required: False
  ---
  question: |
    What is the city of the
    ${ ordinal(i) } location?
  fields:
    - City: location[i].city
    - State: location[i].state
      code: |
        states_list()
  ---
  question: |
    Would you like to add another location?
  yesno: location.there_is_another
"ml-ajax": |-
  features:
    javascript: suggestions.js
"ml-ajax-classify": |-
  code: |
    ml = SimpleTextMachineLearner(group_id='sug')
  ---
  initial: True
  code: |
    if defined('classification'):
      entry_to_classify.classify(classification)
      del classification
    entry_to_classify = ml.one_unclassified_entry()
    if entry_to_classify is not None:
      need(classification)
  ---
  reconsider: True
  code: |
    current_keys = " ".join(map(lambda x: '<a class="mysug btn btn-primary">' + str(x) + '</a>', ml.dependent_in_use()))
  ---
  question: |
    How should this be classified?
  subquestion: |
    > ${ entry_to_classify.independent }

    ${ current_keys }.
  fields:
    - no label: classification
  ---
  mandatory: True
  question: |
    There is nothing left to classify.
  buttons:
    - Check again: refresh
"ml-classify": |-
  code: |
    ml = SimpleTextMachineLearner(group_id='demo')
  ---
  initial: True
  code: |
    if defined('classification'):
      entry_to_classify.classify(classification)
      del classification
    entry_to_classify = ml.one_unclassified_entry()
    if entry_to_classify is not None:
      need(classification)
  ---
  question: |
    How should this be classified?
  subquestion: |
    > ${ entry_to_classify.independent }
  fields:
    - no label: classification
  ---
  mandatory: True
  question: |
    There is nothing left to classify.
  buttons:
    - Check again: refresh
"ml-datatype": |-
  question: |
    Describe how you feel.
  fields:
    - no label: mood
      datatype: ml
  ---
  mandatory: True
  question: |
    You sound ${ mood }.
  help: |
    If `mood` is `None`, then
    go to Train from the menu
    and train the model "mood"
    in the `docassemble.base`
    package.
"ml-export": |-
  initial: True
  code: |
    ml = SimpleTextMachineLearner('demo')
    the_data = ml.export_training_set(output_format='json')
    response(response=the_data, content_type='application/json')
"ml-export-playground": |-
  modules:
    - docassemble.webapp.playground
  ---
  initial: True
  code: |
    ml = SimpleTextMachineLearner(group_id='demo')
    the_data = ml.export_training_set(output_format='json')
    sources = PlaygroundSection('sources')
    sources.write_file('my_training_data.json', the_data)
"ml-export-yaml": |-
  initial: True
  code: |
    ml = SimpleTextMachineLearner(group_id='demo')
    the_data = ml.export_training_set(output_format='yaml')
    response(response=the_data, content_type='text/plain')
"ml-predict": "question: |\n  Enter some text.\nfields:\n  - no label: phrase\n---\n\
  mandatory: True\ncode: |\n  ml = SimpleTextMachineLearner(group_id='demo')\n  predictions\
  \ = ml.predict(phrase)\n---\nmandatory: True\nquestion: |\n  The prediction\nsubquestion:\
  \ |\n  The text provided was:\n  > ${ phrase }\n  \n  % if len(predictions):\n \
  \ The prediction was:\n\n  > ${ predictions[0] }\n  % else:\n  There is not enough\
  \ training data\n  to make a prediction yet.\n  % endif\nbuttons:\n  - Restart:\
  \ restart"
"ml-predict-probabilities": "mandatory: True\nquestion: |\n  The prediction\nsubquestion:\
  \ |\n  The text provided was:\n  > ${ phrase }\n  \n  % if len(predictions):\n \
  \ The prediction was:\n\n  % for prediction in predictions:\n  * ${ '%s (%f)' %\
  \ prediction }\n  % endfor\n  % else:\n  There is not enough training data\n  to\
  \ make a prediction yet.\n  % endif\nbuttons:\n  - Restart: restart"
"ml-save-and-predict": "code: |\n  ml = SimpleTextMachineLearner(group_id='demo')\n\
  ---\ncode: |\n  ml.save_for_classification(phrase)\n  predictions = ml.predict(phrase)\n\
  ---\nmandatory: True\nquestion: |\n  The prediction\nsubquestion: |\n  The text\
  \ provided was:\n  > ${ phrase }\n  \n  % if len(predictions):\n  The prediction\
  \ was:\n\n  > ${ predictions[0] }\n  % else:\n  There is not enough training data\n\
  \  to make a prediction yet.\n  % endif\nbuttons:\n  - Restart: restart"
"mlarea-datatype": |-
  question: |
    Describe how you feel.
  fields:
    - no label: mood
      datatype: mlarea
  ---
  mandatory: True
  question: |
    You sound ${ mood }.
  help: |
    If `mood` is `None`, then
    go to Train from the menu
    and train the model "mood"
    in the `docassemble.base`
    package.
"modules": |-
  modules:
    - json
"money-field": |-
  question: |
    How much is your house worth?
  fields:
    - Value: target_variable
      datatype: currency
      min: 0
"money-field-euro": "question: |\n  How much is your house worth?\nfields:\n  - Value:\
  \ house_value\n    datatype: currency\n    min: 0\n    currency symbol: \u20AC\n\
  ---\nquestion: Your home value\nsubquestion: |\n  Your house is worth\n  ${ currency(house_value,\
  \ symbol=u'\u20AC') }.\nmandatory: True"
"name": |-
  question: |
    What are you fighting?
  field: opponent.name.text
  choices:
    - the Empire
    - the Rebel Alliance
  ---
  mandatory: True
  question: |
    You are fighting
    ${ opponent.name.full() }.
  subquestion: |
    Your enemy is ${ opponent.name }.

    Your opponent is ${ opponent }.
"name-company": |-
  question: |
    Do you wish to sue ${ company }?
  yesno: user_wants_to_sue
"name-company-question": |-
  question: |
    Do you wish to sue ${ company }?
  yesno: user_wants_to_sue
"need": |-
  mandatory: True
  code: |
    need(fruit, all_done)
"need-specifier": |-
  mandatory: True
  need:
    - number_of_years_old
    - favorite_animal
  question: |
    Thank you for that information.
  subquestion: |
    My favorite animal is
    ${ favorite_animal },
    too!

    % if number_of_years_old < 10:
    You're growing so fast.  Pretty
    soon you'll be driving a
    ${ favorite_color } car!
    % endif
"nested-gather": |-
  modules:
    - docassemble.base.legal
  ---
  objects:
    - witness: PartyList
  ---
  mandatory: True
  question: |
    Witnesses
  subquestion: |
    % for person in witness:
    ${ person } is a witness
    who likes
    ${ person.favorite_food }.
    % endfor
  ---
  code: |
    witness.there_are_any = True
  ---
  question: |
    What is the name of the
    ${ ordinal(i) } witness?
  fields:
    - First Name: witness[i].name.first
    - Last Name: witness[i].name.last
  ---
  question: |
    Are there any other witnesses?
  yesno: witness.there_is_another
  ---
  generic object: Individual
  sets: x.favorite_food
  code: |
    x.favorite_food = DAList()
  ---
  generic object: Individual
  code: |
    x.favorite_food.there_are_any = True
  ---
  generic object: Individual
  question: |
    What food does ${ x } like?
  fields:
    - Food: x.favorite_food[i]
  ---
  generic object: Individual
  question: |
    Is there any other food that
    ${ x } likes, besides
    ${ x.favorite_food }?
  yesno: x.favorite_food.there_is_another
"nested-loop": "objects:\n  - person: |\n      DAList.using(\n        object_type=Individual,\n\
  \        minimum_number=1,\n        complete_attribute='complete')\n  - person[i].child:\
  \ |\n      DAList.using(\n        object_type=Individual,\n        complete_attribute='complete')\n\
  ---\ncode: |\n  person[i].name.first\n  person[i].name.last\n  person[i].allergy.gather()\n\
  \  person[i].child.gather()\n  person[i].complete = True\n---\ncode: |\n  person[i].child[j].name.first\n\
  \  person[i].child[j].name.last\n  person[i].child[j].allergy.gather()\n  person[i].child[j].complete\
  \ = True\n---\nquestion: |\n  What is the name of the\n  ${ ordinal(i) }\n  person?\n\
  fields:\n  - First: person[i].name.first\n  - Last: person[i].name.last\n---\nquestion:\
  \ |\n  Is there another person?\nyesno: person.there_is_another\n---\nquestion:\
  \ |\n  Does ${ person[i] } have any children?\nyesno: person[i].child.there_are_any\n\
  ---\nquestion: |\n  What is the name of\n  ${ person[i].possessive(ordinal(j) +\
  \ ' child') }?\nfields:\n  - First: person[i].child[j].name.first\n  - Last: person[i].child[j].name.last\n\
  ---\nquestion: |\n  Does ${ person[i] } have any\n  children other than ${ person[i].child\
  \ }?\nyesno: person[i].child.there_is_another\n---\ngeneric object: Individual\n\
  objects:\n  - x.allergy: DAList\n---\ngeneric object: Individual\nquestion: |\n\
  \  Does ${ x } have any allergies?\nyesno: x.allergy.there_are_any\n---\ngeneric\
  \ object: Individual\nquestion: |\n  What allergy does ${ x } have?\nfields:\n \
  \ - Allergy: x.allergy[i]\n---\ngeneric object: Individual\nquestion: |\n  Does\
  \ ${ x } have any allergies\n  other than ${ x.allergy }?\nyesno: x.allergy.there_is_another\n\
  ---\nmandatory: True\nquestion: |\n  Information retrieved\nsubquestion: |\n  You\
  \ told me about\n  ${ person.quantity_noun('individual') },\n  their allergies,\
  \ their children,\n  and their children's allergies.\n\n  % for p in person:\n \
  \ You told me about ${ p }.\n    % if p.allergy.number() > 0:\n  ${ p } is allergic\
  \ to ${ p.allergy }.\n    % endif\n    % for c in p.child:\n  ${ p } has a child\
  \ named ${ c }.\n    % if c.allergy.number() > 0:\n  ${ c } is allergic to ${ c.allergy\
  \ }.\n    % endif\n    % endfor\n \n  % endfor"
"nested-objects": "objects:\n  - user: Individual\n  - user.sibling: DAList.using(object_type=Individual)\n\
  \  - user.sibling[i].company_hired: |\n      DADict.using(object_type=Organization,\n\
  \                   auto_gather=False,\n                   complete_attribute='complete')\n\
  \  - user.sibling[i].company_hired[j].place_of_business: City\n---\ncode: |\n  user.sibling[i].company_hired.new(user.sibling[i].types_of_companies.true_values())\n\
  \  user.sibling[i].company_hired.gathered = True\n---\ncode: |\n  user.sibling[i].company_hired[j].name.text\n\
  \  user.sibling[i].company_hired[j].place_of_business.city\n  user.sibling[i].company_hired[j].complete\
  \ = True\n---\nquestion: |\n  Do you have any siblings?\nyesno: user.sibling.there_are_any\n\
  ---\nquestion: |\n  What is the name of your ${ ordinal(i) } sibling?\nfields:\n\
  \  - First Name: user.sibling[i].name.first\n---\nquestion: |\n  Do you have any\
  \ other siblings besides ${ user.sibling }?\nyesno: user.sibling.there_is_another\n\
  ---\nquestion: |\n  Which of the following types of companies has ${ user.sibling[i]\
  \ }\n  hired?\nfields:\n  - no label: user.sibling[i].types_of_companies\n    datatype:\
  \ checkboxes\n    choices:\n      - Bank\n      - Law Firm\n      - Exterminator\n\
  \      - Financial Advisor\n---\nquestion: |\n  What is the name of ${ user.sibling[i].possessive(j)\
  \ }?\nfields:\n  - Company name: user.sibling[i].company_hired[j].name.text\n---\n\
  question: |\n  In what city does ${ user.sibling[i].company_hired[j] }\n  do business?\n\
  fields:\n  - City: user.sibling[i].company_hired[j].place_of_business.city\n  -\
  \ State: user.sibling[i].company_hired[j].place_of_business.state\n    code: states_list()\n\
  ---\nmandatory: True\nquestion: All done\nsubquestion: |\n  % for sibling in user.sibling:\n\
  \  You have a sibling named ${ sibling }.\n \n  % for company_type in sibling.company_hired.keys():\n\
  \  ${ sibling } has hired a ${ company_type }\n  called ${ sibling.company_hired[company_type]\
  \ },\n  which has a principal place of business in\n  ${ sibling.company_hired[company_type].place_of_business\
  \ }.\n \n  % endfor\n \n  % endfor"
"nested-objects-list": |-
  objects:
    - fruit: DAList.using(object_type=Thing, auto_gather=False)
    - vegetable: DAList.using(object_type=Thing, auto_gather=False)
    - people: DAList.using(object_type=Individual, there_are_any=True, complete_attribute='complete')
"nested-veggies": |-
  mandatory: True
  code: |
    veggies.object_type = DAList
    veggies.new('potato', 'turnip')
    veggies.gathered = True
    for item in veggies:
      veggies[item].there_are_any = True
  ---
  question: |
    Is there another ${ i }?
  yesno: veggies[i].there_is_another
  ---
  question: |
    How much does the
    ${ ordinal(j) }
    ${ i }
    weigh?
  fields:
    - Grams: veggies[i][j]
      datatype: number
"nested-veggies-override": |-
  question: |
    How much does the other
    ${ i } weigh?
  fields:
    - Grams: veggies[i][1]
      datatype: number
  ---
  question: |
    How much does the
    ${ ordinal(j) }
    ${ i } weigh?
  fields:
    - Grams: veggies[i][j]
      datatype: number
"nice-number": |-
  question: |
    There are ${ nice_number(toads) }
    toads and ${ nice_number(frogs) }
    frogs in the pond.
  buttons:
    - Restart: restart
  sets: all_done
"no-label-field": |-
  question: |
    What is your Zodiac sign?
  fields:
    - no label: target_variable
"no-mandatory": |-
  question: |
    How are you doing?
  field: how_doing
  choices:
    - Fine
    - Ill
  ---
  question: |
    What is your favorite color?
  fields:
    Color: favorite_color
  ---
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    % if how_doing == 'Fine':
    I am glad you are doing well.
    % else:
    I am sorry you aren't feeling 100%.
    % endif
"non-required-radio": |-
  question: |
    Please provide the following information.
  fields:
    - "Do you like apricots?": likes_apricots
      datatype: yesnoradio
    - "Which of these do you like best?": fruit_favorite
      datatype: radio
      required: false
      choices:
        - Apples
        - Oranges
        - Peaches
"normalize": |-
  objects:
    - the_address: Address
  ---
  question: |
    Enter an address
  fields:
    - Address: the_address.address
    - Unit: the_address.unit
      required: False
    - City: the_address.city
    - State: the_address.state
    - Zip: the_address.zip
      required: False
  ---
  mandatory: True
  code: |
    the_address.normalize()
  ---
  mandatory: True
  question: |
    The normalized address
  subquestion: |
    ${ the_address }
"note": "question: |\n  Please fill in the following information.\nfields:\n  - Favorite\
  \ fruit: fruit\n  - Favorite vegetable: vegetable\n  - note: |\n      In case you\
  \ did not know, a \n      mushroom is a fungus, not a\n      vegetable.\n  - Favorite\
  \ fungus: mushroom"
"noun-plural": |-
  question: |
    There
    % if the_number > 1:
    are
    ${ nice_number(the_number) }
    ${ noun_plural(the_noun) }
    % else:
    is one ${ the_noun }
    % endif
    in the pond.
  fields:
    - Singular noun: the_noun
  sets: all_done
"noyes": |-
  question: |
    Are you at least 18 years of age?
  noyes: user_is_minor
"number-field": |-
  question: |
    Describe your possessions.
  fields:
    - Number of cars: number_cars
      datatype: integer
    - Ounces of gold: gold_ounces
      datatype: number
"number-field-step": |-
  question: |
    How much gold and silver do you have?
  fields:
    - Ounces of gold: gold_ounces
      datatype: number
    - Ounces of silver: silver_ounces
      datatype: number
      step: 0.001
"number-formatting": |-
  code: |
    monthly_income = 43143.26/12
  ---
  question: |
    Your monthly income
  subquestion: |
    Your monthly income is
    ${ monthly_income }
    dollars per month.

    But it would be better to say
    your monthly income is
    ${ '%.2f' % monthly_income }
    dollars per month, or
    ${ '{:.2f}'.format(monthly_income) }
    dollars per month, or
    ${ '{:,.2f}'.format(monthly_income) }
    dollars per month, or
    ${ int(monthly_income) }
    dollars per month, or
    best of all,
    ${ currency(monthly_income) }
    per month.
  mandatory: True
"object": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who is the villain?
  fields:
    - The villain is: villain
      datatype: object
      default: antagonist
      choices:
        - protagonist
        - antagonist
"object-checkboxes": |-
  objects:
    protagonist: Individual
    antagonist: Individual
    villain: PartyList
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    villain.auto_gather = False
  ---
  question: Who are the villains, if any?
  fields:
    no label: villain
    datatype: object_checkboxes
    choices:
      - protagonist
      - antagonist
"object-checkboxes-dalist": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who are the villains, if any?
  fields:
    no label: villain
    datatype: object_checkboxes
    choices:
      - protagonist
      - antagonist
"object-checkboxes-default": |-
  mandatory: True
  objects:
    protagonist: Individual
    antagonist: Individual
    villain: PartyList.using(auto_gather=False)
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    villain.append(antagonist)
  ---
  mandatory: True
  question: Who are the villains, if any?
  fields:
    no label: villain
    datatype: object_checkboxes
    choices:
      - protagonist
      - antagonist
"object-default": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who is the villain?
  fields:
    The villain is: villain
    datatype: object_radio
    default: antagonist
    choices:
      - protagonist
      - antagonist
"object-demo": |-
  mandatory: True
  objects:
    - fruit: DAList
    - feet: DADict
    - colors: DASet
  ---
  mandatory: True
  code: |
    fruit.append('apple', 'pear', 'orange')
    feet['dog'] = 4
    feet['human'] = 2
    feet['bird'] = 2
    colors.add('blue', 'red', 'green')
    fruit.gathered = True
    feet.gathered = True
    colors.gathered = True
  ---
  mandatory: True
  question: |
    Summary of groups
  subquestion: |
    The fruits include ${ fruit }.
    In alphabetical order:

    % for thing in sorted(fruit):
    * ${ thing }
    % endfor

    % for species in feet:
    A ${ species } has ${ feet[species] }
    feet.
    % endfor

    % for animal, number in feet.items():
    There are ${ number } feet on
    a ${ animal }.
    % endfor

    The colors are ${ colors }.
"object-disable-others": |-
  mandatory: True
  objects:
    protagonist: Individual
    antagonist: Individual
    actors: PartyList
    villain: Individual
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    actors.append(protagonist)
    actors.append(antagonist)
    actors.auto_gather = False
    actors.gathered = True
  ---
  question: Who is the villain?
  fields:
    - One of these: villain
      datatype: object
      choices: actors
      disable others: True
    - First Name: villain.name.first
    - Last Name: villain.name.last
"object-multiselect-dalist": |-
  question: Who are the villains, if any?
  fields:
    no label: villain
    datatype: object_multiselect
    choices:
      - protagonist
      - antagonist
"object-radio": |-
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who is the villain?
  fields:
    - The villain is: villain
      datatype: object_radio
      default: antagonist
      choices:
        - protagonist
        - antagonist
"object-radio-address": |-
  objects:
    - shipping: Address
    - billing: Address
  ---
  question: |
    What is your shipping address?
  fields:
    - no label: shipping
      datatype: object_radio
      choices:
        - billing
      object labeler: |
        lambda y: y.on_one_line()
      none of the above: A new address
    - show if:
        variable: shipping
        is: null
      Address: shipping.address
    - show if:
        variable: shipping
        is: null
      Unit: shipping.unit
      required: False
    - show if:
        variable: shipping
        is: null
      City: shipping.city
    - show if:
        variable: shipping
        is: null
      State: shipping.state
      code:
        states_list()
    - show if:
        variable: shipping
        is: null
      Zip: shipping.zip
  ---
  question: |
    What is your billing address?
  fields:
    - Address: billing.address
    - Unit: billing.unit
      required: False
    - City: billing.city
    - State: billing.state
      code:
        states_list()
    - Zip: billing.zip
  ---
  mandatory: True
  question: |
    Your order
  subquestion: |
    I will send your bill to
    ${ billing.on_one_line() }.

    I will ship your order to
    ${ shipping.on_one_line() }.
"object-radio-address-2": |-
  objects:
    - billing: Address.using(name_on_billing_choices_list='Your billing address')
    - shipping_manual: Address.using(name_on_billing_choices_list='A different address')
  ---
  question: |
    What address should I use as your shipping address?
  fields:
    - no label: shipping
      datatype: object_radio
      choices:
        - billing
        - shipping_manual
      object labeler: |
        lambda y: y.name_on_billing_choices_list
  ---
  question: |
    What is your shipping address?
  fields:
    - Address: shipping_manual.address
    - Unit: shipping_manual.unit
      required: False
    - City: shipping_manual.city
    - State: shipping_manual.state
      code:
        states_list()
    - Zip: shipping_manual.zip
  ---
  question: |
    What is your billing address?
  fields:
    - Address: billing.address
    - Unit: billing.unit
      required: False
    - City: billing.city
    - State: billing.state
      code:
        states_list()
    - Zip: billing.zip
  ---
  mandatory: True
  question: |
    Your order
  subquestion: |
    I will send your bill to
    ${ billing.on_one_line() }.

    I will ship your order to
    ${ shipping.on_one_line() }.
"object-radio-nota": |-
  question: Who is the villain?
  fields:
    - The villain is: villain
      datatype: object_radio
      default: antagonist
      none of the above: Someone else
      choices:
        - protagonist
        - antagonist
    - First name: villain.name.first
      show if:
        variable: villain
        is: null
    - Last name: villain.name.last
      show if:
        variable: villain
        is: null
"object-selections": |-
  objects:
    protagonist: Individual
    antagonist: Individual
    actors: PartyList
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
    actors.append(protagonist)
    actors.append(antagonist)
    actors.auto_gather = False
    actors.gathered = True
  ---
  question: Who is the villain?
  fields:
    - The villain is: villain
      datatype: object
      choices: actors
"object-try-1": |-
  include: basic-questions.yml
  ---
  question: |
    What is your favorite date?
  fields:
    - Greatest Date Ever: favorite_date
      datatype: date
      choices:
        - ${ client.birthdate }
        - ${ advocate.birthdate }
  ---
  question: |
    The best day in the history of
    the world was ${ favorite_date }.
  mandatory: True
"object-try-2": |-
  question: |
    Who is the tallest?
  fields:
    - Tallest person: tallest_person
      choices:
        - ${ client }
        - ${ advocate }
"object-try-3": |-
  include: basic-questions.yml
  ---
  question: Who is the villain?
  fields:
    no label: villain
    datatype: object
    default: client
    choices:
      - client
      - advocate
  ---
  question: |
    The villain, ${ villain }, was
    born on
    ${ format_date(villain.birthdate) }.
  mandatory: True
"objects": |-
  objects:
    - hero: Individual
    - villain: Individual
"ocr": |-
  mandatory: True
  question: |
    Here is the text of the file
  subquestion: |
    ${ ocr_file(the_file) }
  ---
  question: |
    Please upload a file
  fields:
    - File: the_file
      datatype: files
"ocr-background": |-
  mandatory: True
  code: |
    the_file
    the_task
    user_testimonial
    if not the_task.ready():
      waiting_screen
  ---
  question: |
    Please upload a file
  fields:
    - File: the_file
      datatype: files
  ---
  code: |
    the_task = background_action('ocr_start', None)
  ---
  event: ocr_start
  code: |
    the_text = ocr_file(the_file)
    background_response_action('ocr_finish', text=the_text)
  ---
  event: ocr_finish
  code: |
    text_of_the_file = action_argument('text')
    background_response()
  ---
  question: |
    How do you describe what happened?
  fields:
    - no label: user_testimonial
      input type: area
  ---
  event: waiting_screen
  reload: 5
  question: |
    Please wait.
  ---
  mandatory: True
  question: |
    All done
  subquestion: |
    You claim that:

    ${ quote_paragraphs(user_testimonial) }

    The document states:

    ${ quote_paragraphs(text_of_the_file) }
"ocr-chord": |-
  mandatory: true
  code: |
    the_task
    final_screen
  ---
  code: |
    the_task = ocr_file_in_background(the_file)
  ---
  question: |
    Please upload one or more files.
  fields:
    - File: the_file
      datatype: files
  ---
  question: |
    What is your nickname?
  fields:
    - Nickname: nickname
  ---
  event: final_screen
  question: |
    Here is the text of the uploaded
    file, ${ nickname }.
  subquestion: |
    % if the_task.ready():
    The text is: ${ the_task.get() }
    % else:
    Still processing.  Please press Refresh
    after a few seconds to see if the task
    is done.
    % endif
  buttons:
    - Refresh: refresh
"ocr-chord-refresh": |-
  mandatory: true
  code: |
    the_files
    if the_task.ready():
      final_screen
    else:
      waiting_screen
  ---
  code: |
    the_task = ocr_file_in_background(the_files, 'refresh')
  ---
  event: waiting_screen
  question: |
    Please wait.
  subquestion: |
    Your document is being processed.
    This may take several minutes.

    The text of your document will be
    shown on the screen when the
    processing is finished.
  ---
  event: final_screen
  question: |
    Here is the text of the uploaded
    file.
  subquestion: |
    ${ the_task.get() }
  ---
  question: |
    Please upload one or more files.
  fields:
    - File: the_files
      datatype: files
"ocr-classify": |-
  code: |
    ml = SimpleTextMachineLearner(group_id='ocr_ai')
  ---
  initial: True
  code: |
    if defined('classification'):
      entry_to_classify.classify(classification)
      del classification
    entry_to_classify = ml.one_unclassified_entry()
    if entry_to_classify is not None:
      need(classification)
  ---
  question: |
    How should this be classified?
  subquestion: |
    ${ entry_to_classify.independent }
  fields:
    - no label: classification
  ---
  mandatory: True
  question: |
    There is nothing left to classify.
  buttons:
    - Check again: refresh
"ocr-save-and-predict": |-
  mandatory: True
  code: |
    the_file.set_attributes(persistent=True)
  ---
  mandatory: True
  code: |
    the_task
    if not the_task.ready():
      waiting_screen
    ml = SimpleTextMachineLearner(group_id='ocr_ai')
    ml.save_for_classification(phrase, info=the_file)
    predictions = ml.predict(phrase)
  ---
  question: |
    Please upload or take a
    picture of your legal document.
  fields:
    - no label: the_file
      datatype: file
  ---
  code: |
    the_task = background_action('ocr_start', None)
  ---
  event: ocr_start
  code: |
    background_response_action('ocr_finish', text=ocr_file(the_file))
  ---
  event: ocr_finish
  code: |
    phrase = action_argument('text')
    background_response()
  ---
  event: waiting_screen
  reload: 5
  question: |
    Please wait.
  ---
  mandatory: True
  question: |
    Your document
  subquestion: |
    % if len(predictions):
    Your document is a ${ predictions[0] }.
    % else:
    There is not enough training data
    to make a prediction yet.
    % endif
  buttons:
    - Restart: restart
"on-change": |-
  on change:
    married: |
      for item in income.complete_elements():
        item.invalidate_attr('amount')
      income.reset_gathered(mark_incomplete=True)
  ---
  question: |
    Are you married?
  yesno: married
  ---
  question: |
    % if married:
    What is the ${ ordinal(i) } income item
    that you and your spouse earn?
    % else:
    What is your ${ ordinal(i) } income source?
    % endif
  fields:
    - Name: income[i].name.text
    - Amount per year: income[i].amount
      datatype: currency
"only-sets": |-
  question: |
    What is the best color?
  fields:
    - Color: best_color
  ---
  question: |
    What is the time of day?
  field: time_of_day
  choices:
    - Night
    - Day
  ---
  only sets: best_thing
  code: |
    if time_of_day == 'Night':
      best_thing = 'astronomy'
      best_color = 'black'
    else:
      best_thing = 'the beach'
      best_color = 'blue'
  ---
  mandatory: True
  field: initial_screen
  question: |
    According to you, the best color
    is ${ best_color }.
  ---
  mandatory: True
  question: |
    Since the best thing is
    ${ best_thing }, the best color is
    ${ best_color }.
"optional-field": |-
  question: |
    What are your favorite things to eat?
  subquestion: |
    You may not like any vegetables,
    but at least tell me your favorite
    fruit.
  fields:
    - Vegetable: target_variable
      required: False
    - Fruit: other_target_variable
"order-of-blocks": |-
  question: |
    Do you like penguins?
  yesno: user_likes_penguins
  ---
  question: |
    Do you like elephants?
  yesno: user_likes_elephants
  ---
  mandatory: true
  question: |
    Hello!
  buttons:
    - Hello to you: continue
  ---
  mandatory: true
  question: |
    What is your name?
  fields:
    - Name: user_name
  ---
  mandatory: true
  question: |
    Your favorite food is
    ${ favorite_food }.

    % if user_likes_penguins:
    You are a fan of penguins.
    % else:
    You detest penguins, for some
    strange reason.
    % endif
  ---
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
"ordinal-number": |-
  question: |
    The ${ ordinal_number(toads) }
    toad is here to see you.
  buttons:
    - Restart: restart
  sets: all_done
"other": |-
  question: |
    What kind of car do you drive?
  fields:
    - Make: car_make
      choices:
        - Honda
        - Toyota
        - Mazda
        - Other
    - Other make: car_make
      show if:
        variable: car_make
        is: Other
"override": |-
  include:
    - question-library.yml
  ---
  question: |
    So, about that dance tonight . . .
    wanna go?
  yesno: user_wants_to_go_to_dance
  ---
  mandatory: True
  code: |
    if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
      good_news
  ---
  mandatory: True
  question: |
    Say, I have to run.  Bye!
  ---
  event: good_news
  question: |
    That is splendid news!
"page-numbers": |-
  question: Here is your document.
  subquestion: It has page numbers.
  attachments:
    - name: Summary of Benefits
      filename: benefits_summary
      metadata:
        FirstFooterRight: Page [PAGENUM]
        FooterRight: Page [PAGENUM]
      content: |
        [BOLDCENTER] Summary of Benefits

        ${ client } is entitled to
        benefits plan ${ benefits }.
  mandatory: True
"password-field": |-
  question: |
    Enter your username and password.
  fields:
    - Username: user_name
    - Password: target_variable
      datatype: password
"past-tense": |-
  question: |
    I ${ verb_past(the_verb) }
    the apple.
  fields:
    - Present tense verb: the_verb
  sets: all_done
"path-and-mimetype": |-
  code: |
    (filename_a, mimetype_a) = path_and_mimetype('data/static/hello.pdf')
    (filename_b, mimetype_b) = path_and_mimetype('docassemble.demo:data/static/house.png')
    (filename_c, mimetype_c) = path_and_mimetype('https://docassemble.org/img/docassemble-logo.jpg')
  ---
  mandatory: True
  question: |
    File locations and MIME types
  subquestion: |
    #### `data/static/hello.pdf`

    Path **${ filename_a }** has
    MIME type **${ mimetype_a }**.

    #### `docassemble.demo:data/static/house.png`

    Path **${ filename_b }** has
    MIME type **${ mimetype_b }**.

    #### `https://docassemble.org/img/docassemble-logo.jpg`

    Path **${ filename_c }** has
    MIME type **${ mimetype_c }**.
"pdf-a": |-
  question: Your document is ready.
  subquestion: |
    If you open the PDF file and look at
    its properties, you will see that it
    is a PDF/A file.
  attachment:
    - name: A hello world document
      filename: Hello_World_Document
      valid formats:
        - pdf
      description: |
        A document with a classic message
      content: |
        Hello, world!
      pdf/a: True
  mandatory: True
"pdf-concatenate": |-
  objects:
    - static_file: DAStaticFile.using(filename='star.pdf')
  ---
  attachment:
    variable name: assembled_file
    filename: assembled_file
    content: |
      Hello world!
  ---
  question: |
    Upload a file
  fields:
    - File: uploaded_file
      datatype: file
  ---
  mandatory: True
  code: |
    output_file = pdf_concatenate(uploaded_file, assembled_file, static_file, filename="result.pdf")
  ---
  mandatory: True
  question: |
    Here is your concatenated file.
  subquestion: |
    ${ output_file }
"pdf-fill": |-
  question: |
    Here is your PDF form
  attachment:
    name: A filled-in form
    filename: filled-form
    pdf template file: sample-form.pdf
    fields:
      - Your Name: |
          ${ user }
      - Your Organization: |
          ${ user.organization }
      - Apple Checkbox: |
          ${ likes_apples }
      - Orange Checkbox: |
          ${ likes_oranges }
      - Pear Checkbox: |
          ${ likes_pears }
      - Toast Checkbox: |
          ${ likes_toast }
  mandatory: True
"pdf-fill-code": |-
  question: |
    Here is your PDF form
  attachments:
    - name: A filled-in form
      filename: filled-form
      pdf template file: sample-form.pdf
      fields:
        Your Name: |
          ${ user }
        Your Organization: |
          ${ user.organization }
        Apple Checkbox: |
          ${ likes_apples }
        Pear Checkbox: |
          ${ likes_pears }
      code: |
        {"Orange Checkbox": likes_oranges,
         "Toast Checkbox": likes_toast}
  mandatory: True
"pdf-fill-export-values": |-
  question: |
    Here is your PDF form
  attachment:
    name: A filled-in form
    filename: filled-form
    pdf template file: sample-form-different-export-values.pdf
    fields:
      - Your Name: |
          ${ user }
      - Your Organization: |
          ${ user.organization }
      - Apple Checkbox: |
          ${ likes_apples }
      - Orange Checkbox: |
          ${ likes_oranges }
      - Pear Checkbox: |
          ${ likes_pears }
      - Toast Checkbox: |
          ${ likes_toast }
  mandatory: True
"pdf-fill-not-editable": |-
  question: |
    Here is your PDF form
  attachment:
    name: A filled-in form
    filename: filled-form
    pdf template file: sample-form.pdf
    editable: False
    fields:
      Your Name: |
        ${ user }
      Your Organization: |
        ${ user.organization }
      Apple Checkbox: |
        ${ likes_apples }
      Orange Checkbox: |
        ${ likes_oranges }
      Pear Checkbox: |
        ${ likes_pears }
      Toast Checkbox: |
        ${ likes_toast }
  mandatory: True
"pdf-fill-signature": |-
  question: |
    Please sign your name below.
  signature: user.signature
  under: |
    ${ user }
  ---
  sets: final_screen
  question: Congratulations!
  subquestion: |
    You have now transferred everything
    you own to ${ friend }.
  attachment:
    - name: Transfer of Ownership
      filename: Transfer-of-Ownership
      pdf template file: |
        Transfer-of-Ownership.pdf
      fields:
        - "grantor": ${ user }
        - "grantee": ${ friend }
        - "collection": ${ prized_collection }
        - "signature": ${ user.signature }
"pdf-fill-signature-alt": |-
  question: |
    Please sign your name below.
  signature: user.signature
  under: |
    ${ user }
  ---
  sets: final_screen
  question: Congratulations!
  subquestion: |
    You have now transferred everything
    you own to ${ friend }.
  attachment:
    - name: Transfer of Ownership
      filename: Transfer-of-Ownership
      pdf template file: |
        Transfer-of-Ownership.pdf
      field code:
        - "grantor": user
        - "grantee": friend
        - "collection": prized_collection
        - "signature": user.signature
"pdf-fill-skip-undefined": |-
  question: |
    Here is your PDF form
  subquestion: |
    Note that the `user.organization`
    and `likes_oranges` variables are
    not defined, but the document was
    assembled anyway.
  attachment:
    name: A filled-in form
    filename: filled-form
    pdf template file: sample-form.pdf
    skip undefined: True
    fields:
      - Your Name: |
          ${ user }
      - Your Organization: |
          ${ user.organization }
      - Apple Checkbox: |
          ${ likes_apples }
      - Orange Checkbox: |
          ${ likes_oranges }
      - Pear Checkbox: |
          ${ likes_pears }
      - Toast Checkbox: |
          ${ likes_toast }
  mandatory: True
"pdf-template-alt-1": |-
  mandatory: True
  question: Here is your document.
  attachment:
    pdf template file: letter.pdf
    fields:
      - letter_date: ${ today() }
      - subject_line: ${ subject_of_letter }
      - recipient_address: ${ recipient.address_block() }
"pdf-template-alt-2": |-
  mandatory: True
  question: Here is your document.
  attachment:
    pdf template file: letter.pdf
    field code:
      - letter_date: today()
      - subject_line: subject_of_letter
      - recipient_address: recipient.address_block()
"pdf-template-alt-3": "mandatory: True\nquestion: Here is your document.\nattachment:\n\
  \  pdf template file: letter.pdf\n  code:\n    dict(letter_date=today(), \n    \
  \     subject_line=subject_of_letter, \n         recipient_address=recipient.address_block())"
"pdf-template-alt-4": |-
  mandatory: True
  question: Here is your document.
  attachment:
    pdf template file: letter.pdf
    code: letter_variables
  ---
  code: |
    letter_variables = dict()
    letter_variables['letter_date'] = today()
    if letter_type == 'threat':
      letter_variables['subject_line'] = "Litigation hold"
    else:
      letter_variables['subject_line'] = "Matter we discussed"
    letter_variables['recipient_address'] = recipient.address_block()
  reconsider: True
"periodic-amount": |-
  question: |
    What is your salary?
  fields:
    - Amount: user_salary
      datatype: currency
    - Period: period
      code: |
        period_list()
  ---
  question: Result of question
  subquestion: |
    user_salary is
    ${ user_salary }
    and period is
    ${ period }.
  mandatory: True
"periodic-value": |-
  objects:
    - user_salary: PeriodicValue
  ---
  question: |
    Do you make money from working?
  yesno: user_salary.exists
  ---
  question: |
    What is your salary?
  fields:
    - Amount: user_salary.value
      datatype: currency
    - Period: user_salary.period
      default: 1
      choices:
        - Annually: 1
        - Monthly: 12
        - Per week: 54
  ---
  mandatory: True
  question: |
    % if user_salary.exists:
    You make ${ currency(user_salary) }
    per year.
    % else:
    Get a job!
    % endif
"persistent-task": "default screen parts:\n  under: |\n    % if task_performed('fruit_gathered',\
  \ persistent=True):\n    The task has been performed.\n    % else:\n    The task\
  \ has not been performed.\n    % endif\n---\nmandatory: True\ncode: |\n  favorite_fruit\n\
  \  mark_task_as_performed('fruit_gathered', persistent=True)\n  final_screen\n---\n\
  question: |\n  What is your favorite fruit?\nsubquestion: |\n  Note whether the\
  \ task has been \n  performed yet.\nfields:\n  - Fruit: favorite_fruit\n---\nevent:\
  \ final_screen\nquestion: |\n  You like ${ favorite_fruit }\nsubquestion: |\n  Press\
  \ the Back button and \n  then notice whether the task \n  has been performed."
"post": |-
  question: |
    What is the airspeed velocity of an
    unladen swallow?
  fields:
    - Velocity: swallow_velocity
  under: |
    Note: if you did not catch this
    movie reference, you need to
    improve your cultural literacy.
  post: |
    This is the `post`, which comes
    after `under`.
"postpopulate-list": |-
  objects:
    - user: Individual
    - user.mom: Individual
    - user.favorite_things: |
        DAList.using(object_type=Thing)
  ---
  code: |
    if user.likes_something:
      user.favorite_things.there_are_any = True
    else:
      default_things_appended
      user.favorite_things.there_are_any = False
      user.favorite_things.there_is_another = False
  ---
  code: |
    if user.likes_another_thing:
      del user.likes_another_thing
      user.favorite_things.there_is_another = True
    else:
      default_things_appended
      user.favorite_things.there_is_another = False
  ---
  code: |
    user.favorite_things.append(user.mom)
    user.favorite_things.appendObject(
      name='apple pie'
    )
    default_things_appended = True
  ---
  question: |
    What is your mother's name?
  fields:
    - First name: user.mom.name.first
    - Last name: user.mom.name.last
  ---
  question: |
    What is your ${ ordinal(i) }
    favorite thing?
  fields:
    - Thing: user.favorite_things[i].name.text
  ---
  question: |
    Do you have any favorite things?
  yesno: user.likes_something
  ---
  question: |
    Besides ${ user.favorite_things },
    do you have any other favorite
    things?
  yesno: user.likes_another_thing
  ---
  mandatory: True
  question: |
    Your favorite things are
    ${ user.favorite_things }.
"pre": |-
  question: |
    What is the airspeed velocity of an
    unladen swallow?
  fields:
    - Velocity: swallow_velocity
  pre: |
    Note: if you do not catch the
    movie reference in this question,
    you need to improve your cultural
    literacy.
"prepopulate-list": |-
  objects:
    - user: Individual
    - user.mom: Individual
    - user.favorite_things: |
        DAList.using(object_type=Thing)
  ---
  code: |
    user.favorite_things.clear()
    user.favorite_things.append(user.mom)
    user.favorite_things.appendObject(
      name='apple pie'
    )
    user.favorite_things.there_are_any = True
  ---
  question: |
    What is your mother's name?
  fields:
    - First name: user.mom.name.first
    - Last name: user.mom.name.last
  ---
  question: |
    What is your ${ ordinal(i) }
    favorite thing?
  fields:
    - Thing: user.favorite_things[i].name.text
  ---
  question: |
    Besides ${ user.favorite_things },
    do you have any other favorite
    things?
  yesno: user.favorite_things.there_is_another
  ---
  mandatory: True
  question: |
    Your favorite things are
    ${ user.favorite_things }.
"prevent-back": |-
  code: |
    app_submitted = True
    prevent_going_back()
"prevent-going-back": |-
  prevent going back: True
  question: |
    Your application for ${ service }
    has been submitted.
  mandatory: True
"progress": |-
  features:
    progress bar: True
  ---
  question: Are you doing well?
  yesno: user_is_well
  progress: 20
  ---
  question: Done with the interview.
  subquestion: |
    % if user_is_well:
    I am glad you are doing well.
    % else:
    I am sorry to hear that!
    % endif
  progress: 100
  mandatory: True
"progress-features": |-
  features:
    progress bar: True
"progress-features-percentage": |-
  features:
    progress bar: True
    show progress bar percentage: True
"progress-multi": |-
  mandatory: True
  code: |
    first_part_done
    second_part_done
    final_screen
  ---
  code: |
    user_is_well
    user_is_bigger_than_a_breadbox
    ready_for_second_part
    set_progress(0)
    first_part_done = True
  ---
  code: |
    user_likes_turnips
    user_likes_clownfish
    second_part_done = True
"pull-down": |-
  question: |
    Describe yourself.
  fields:
    - Level of education: education
      choices:
        - High School
        - College
        - Graduate School
    - Favorite fruit: favorite_fruit
      choices:
        - Apple: apples
        - Pear: pears
        - Strawberry: strawberries
"pull-down-with-code": |-
  question: |
    Describe yourself.
  fields:
    - Level of education: education
      choices:
        - High School
        - College
        - Graduate School
    - State of birth: birth_state
      code: |
        us.states.mapping('abbr', 'name')
    - Gender: gender
      code: |
        {'m': 'Male', 'f': 'Female', 'o': 'Other'}
"qr-code": |-
  question: |
    Read the news on your mobile
    phone
  subquestion: |
    If you have a QR code reader on
    your phone, point it here:

    ${ qr_code('https://news.google.com') }
  mandatory: True
"qr-code-demo": "mandatory: True\nquestion: Here is a URL for you in a QR code\nsubquestion:\
  \ |\n  [QR https://news.google.com, 200px, Google News]\nattachment:\n  name: Your\
  \ QR code\n  filename: your_code\n  content: |\n    Use the QR reader on your smartphone\
  \ to take a picture of this:\n    \n    [QR https://news.google.com]"
"quantity-noun": |-
  mandatory: True
  question: |
    You have ${ quantity_noun(4, "apple") }.
"question": |-
  question: |
    What is the airspeed velocity of an
    unladen swallow?
  fields:
    - Velocity: swallow_velocity
"question-autoterms": |-
  question: Have you ever met a creeper?
  subquestion: |
    If you have met a zombie pigman, you
    have almost certainly met a creeper.
  yesno: met_a_creeper
  auto terms:
    creeper: |
      A tall ${ creeper_color } creature
      that explodes if you get too close.
    zombie pigman: |
      A harmless creature who carries a gold
      sword.
"question-back-button": |-
  features:
    question back button: True
    navigation back button: False
"question-back-button-sometimes": |-
  question: Is the sky blue?
  yesno: sky_is_blue
  back button: |
    not user_is_well
"question-back-button-sometimes-label": |-
  question: Is the sky blue?
  yesno: sky_is_blue
  back button: True
  back button label: |
    Wait, go back
"question-help-button": |-
  features:
    question help button: True
  ---
  interview help:
    label: More info
    heading: About this interview
    content: |
      This is an interview about fruit.
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  help:
    label: Huh?
    heading: What is a fruit?
    content: |
      A fruit is a fleshy edible
      part of a plant that has
      seeds.
  ---
  question: |
    What is your favorite color?
  fields:
    - Color: favorite_color
  help:
    heading: What is a color?
    content: |
      Every photon has a frequency, which
      determines its color.
  ---
  question: |
    What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
"question-help-button-off": |-
  features:
    question help button: False
  ---
  interview help:
    label: More info
    heading: About this interview
    content: |
      This is an interview about fruit.
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  help:
    label: Huh?
    heading: What is a fruit?
    content: |
      A fruit is a fleshy edible
      part of a plant that has
      seeds.
  ---
  question: |
    What is your favorite color?
  fields:
    - Color: favorite_color
  help:
    heading: What is a color?
    content: |
      Every photon has a frequency, which
      determines its color.
  ---
  question: |
    What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
"question-library": |-
  question: |
    Interested in going to the dance tonight?
  yesno: user_wants_to_go_to_dance
"question-markup": |-
  question: |
    What is the *airspeed* velocity of an
    unladen ${ african_or_european }
    swallow?
  fields:
    - Velocity: swallow_velocity
"question-sequence": |-
  mandatory: True
  question: |
    Let's think about apples.
  fields:
    - "Are apples good?": question_one_a
      datatype: yesnoradio
    - "Your favorite variety": question_one_b
  ---
  mandatory: True
  question: |
    Are peaches good?
  yesno: question_two
  ---
  mandatory: True
  question: |
    Are turnips good?
  yesno: question_three
  ---
  mandatory: True
  question: |
    Is linoleum good?
  yesno: question_four
  ---
  mandatory: True
  question: |
    Are automobiles good?
  yesno: question_five
  ---
  mandatory: True
  question: |
    Is furniture good?
  yesno: question_six
  ---
  mandatory: True
  question: |
    Was this interview good?
  yesno: question_seven
  ---
  mandatory: True
  question: |
    Thanks for answering my questions!
"question-terms": |-
  question: Have you ever met a {creeper}?
  subquestion: |
    If you have met a {zombie pigman}, you
    have almost certainly met a creeper.
  yesno: met_a_creeper
  terms:
    creeper: |
      A tall ${ creeper_color } creature
      that explodes if you get too close.
    zombie pigman: |
      A harmless creature who carries a gold
      sword.
"question-terms-alternate": |-
  question: Have you ever met a {creeper}?
  subquestion: |
    If you have met a
    {zombie pigman|zombified pigman},
    you have almost certainly met a creeper.
  yesno: met_a_creeper
  terms:
    creeper: |
      A tall ${ creeper_color } creature
      that explodes if you get too close.
    zombie pigman: |
      A harmless creature who carries a gold
      sword.
"questionless": |-
  mandatory: True
  code: |
    json_response({'final': True, 'inhabitants': inhabitant_count})
  ---
  code: |
    if favorite_number == 42 and user_agrees_to_waive_penalties:
      inhabitant_count = 2
    else:
      inhabitant_count = 2000 + favorite_number * 45
"quote_paragraphs": |-
  mandatory: True
  question: |
    Your allegations
  subquestion: |
    You allege that:

    ${ quote_paragraphs(allegations) }
"radio-list": |-
  question: |
    Describe your car.
  fields:
    - Number of wheels: wheels_on_car
      datatype: integer
    - Type: car_type
      input type: radio
      choices:
        - Convertible
        - Hatchback
        - Sedan
    - Model: car_country
      input type: radio
      choices:
        - BMW: Germany
        - Buick: United States
        - Honda: Japan
        - Toyota: Japan
"radio-list-mobile": |-
  question: |
    Describe your car.
  fields:
    - Number of wheels: wheels_on_car
      datatype: integer
    - Type: car_type
      datatype: radio
      choices:
        - Convertible
        - Hatchback
        - Sedan
    - Model: car_country
      datatype: radio
      choices:
        - BMW: Germany
        - Buick: United States
        - Honda: Japan
        - Toyota: Japan
"range": |-
  question: |
    On a scale from 1 to 10, how
    much do you like these animals?
  fields:
    - Possums: possum_preference
      datatype: range
      min: 1
      max: 10
      step: 0.5
    - Rabbits: rabbit_preference
      datatype: range
      min: 1
      max: 10
"range-log": |-
  question: |
    What is the airspeed velocity,
    in miles per hour, of an
    unladen swallow?
  fields:
    - Velocity: velocity
      datatype: range
      min: 1
      max: 10000
      step: 10
      default: 10
      scale: logarithmic
"read-qr": |-
  question: |
    Please upload a file (or files) with
    a QR code.
  fields:
    - File: user_upload
      datatype: files
  ---
  question: |
    Codes found
  subquestion: |
    The following codes were found:

    % for code in read_qr(user_upload):
    * ${ code }
    % endfor
  mandatory: True
"reconsider": |-
  code: |
    cat_food_cans_needed = number_of_cats * 4
  reconsider: True
"reconsider-function": |-
  code: |
    number_of_pets = number_of_cats + number_of_dogs
  ---
  question: |
    You have
    ${ nice_number(number_of_pets) }
    pets.
  subquestion: |
    However, I do not think
    you have been totally honest.
  field: interim_report
  ---
  question: |
    Do you want a goldfish?
  yesno: wants_goldfish
  ---
  event: final_report
  question: |
    You really have
    ${ nice_number(number_of_pets) }
    pets.
  subquestion: |
    % if wants_goldfish:
    You would rather have a goldfish.
    % endif
  ---
  mandatory: True
  code: |
    interim_report
    ask_dogs_again
    reconsider('number_of_pets')
    final_report
"redact": |-
  template: petition_text
  content: |
    Dear Judge,

    My name is ${ user }.
    I have a claim against
    the defendant.  A big one.

    My SSN is ${ redact(user.ssn) }.
    My phone number is
    ${ user.phone_number }.

    My home address is:

    ${ redact(user.address) }

    I demand ${ currency(money_claimed) }.

    Thank you.

    Sincerely,

    ${ user }
  ---
  mandatory: True
  question: |
    Here is your document.
  subquestion: |
    You need to print both copies
    and file them in court.

    The unredacted version goes
    to the judge, and the redacted
    version will go in the public
    record.
  attachments:
    - name: Unredacted petition
      filename: petition_unredacted
      redact: False
      valid formats:
        - pdf
        - rtf
        - docx
      content: |
        ${ petition_text }
    - name: Redacted petition
      filename: petition_redacted
      valid formats:
        - pdf
        - rtf
        - docx
      content: |
        ${ petition_text }
"redis": "objects:\n  r: DARedis\n---\nmandatory: True\ncode: |\n  key = r.key('my_variable')\n\
  \  r.set(key, 'hello world')\n---\nmandatory: True\nquestion: |\n  Value has been\
  \ retrieved from\n  the redis server.\nsubquestion: |\n  The key is `${ key }`.\n\
  \  \n  The value is \"${ r.get(key).decode() }\"."
"redis-data": |-
  objects:
    - r: DARedis
  ---
  question: |
    Upload a file.
  subquestion: |
    Note: if someone else uses this
    interview in the 30 seconds
    after you upload the file,
    your file will be shown to
    that user.
  fields:
    - File: uploaded_file
      datatype: file
  ---
  code: |
    mykey = r.key('upload')
  ---
  code: |
    file_from_redis = r.get_data(mykey)
  ---
  mandatory: True
  code: |
    if file_from_redis is None:
      uploaded_file.set_attributes(private=False)
      r.set_data(mykey, uploaded_file, expire=30)
      del file_from_redis
  comment: |
    If there is no file in Redis, we
    get the user to upload a file.
    Then we undefine file_from_redis
    (which is None) so that in the
    next question, the interview will
    try to fetch the file from Redis
    again.
  ---
  mandatory: True
  question: |
    The file
  subquestion: |
    ${ file_from_redis }
"refresh": |-
  mandatory: True
  code: |
    tell_time
  ---
  event: tell_time
  question: |
    The current time is
    ${ current_datetime().format_time() }.
  buttons:
    - Tell me again: refresh
"relationships": |-
  objects:
    - tree: RelationshipTree
"reload": |-
  reload: True
  question: |
    You have viewed this screen
    ${ counter }
    ${ noun_plural('time', counter) }.
  field: acknowledged
"required-code": |-
  question: Do you like soda?
  yesno: user_likes_soda
  ---
  question: |
    What are your favorite
    things to drink?
  fields:
    - Favorite Beverage Overall: favorite_beverage
    - Favorite Soda: favorite_soda
      required: user_likes_soda
"reset": |-
  reset:
    - cat_food_cans_needed
"response": |-
  mandatory: True
  code: |
    data = dict(fruit='apple', pieces=2)
    response(json.dumps(data), content_type="application/json")
"response-hello": |-
  mandatory: True
  code: |
    response("Hello, world!")
"response-json": "objects:\n  - user: Individual\n---\nmandatory: True\ncode: |\n\
  \  multi_user = True\n---\nevent: query_fruit\ncode: |\n  data = dict(fruit=favorite_fruit,\
  \ pieces=number_of_pieces)\n  json_response(data)\n---\nmandatory: True\nquestion:\
  \ |\n  You currently have\n  ${ nice_number(number_of_pieces) }\n  ${ noun_plural('piece',\
  \ number_of_pieces) }\n  of\n  ${ noun_singular(favorite_fruit) }.\nsubquestion:\
  \ |\n  Use\n  [this link](${ interview_url_action('query_fruit') })\n  to query\
  \ the information from\n  another application.\n\n  You can also change the \n \
  \ [fruit](${ url_action('favorite_fruit') })\n  and the\n  [number of pieces](${\
  \ url_action('number_of_pieces') })."
"response-svg": |-
  sets: all_done
  code: |
    svg_image = """\
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <svg
       xmlns:dc="http://purl.org/dc/elements/1.1/"
       xmlns:cc="http://creativecommons.org/ns#"
       xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:svg="http://www.w3.org/2000/svg"
       xmlns="http://www.w3.org/2000/svg"
       version="1.1"
       id="svg2"
       width="100"
       height="100">
      <circle
         id="circle4"
         fill="red"
         stroke-width="3"
         stroke="black"
         r="40"
         cy="50"
         cx="50" />
    </svg>
    """
    response(binaryresponse=svg_image, content_type="image/svg+xml")
"resume-button-label": |-
  event: review_answers
  question: |
    Revisit your answers
  review:
    - Revisit fruit: fruit
      button: |
        You indicated you liked
        ${ fruit }.
    - Revisit vegetable: vegetable
      button: |
        You indicated you liked
        ${ vegetable }.
    - Revisit fungus: fungi
      button: |
        You indicated you liked
        ${ fungi }.
  resume button label: Keep going
"review": |-
  event: review_answers
  question: |
    Review your answers
  review:
    - note: |
        Welcome to the review of answers.
    - note: |
        #### Your identity
      show if: user.name.first
    - Change your name: user.name.first
      help: |
        You said your name was
        **${ user.name }**.
    - note: |
        #### Your favorite foods
      show if: fruit
    - Revisit Fruit: fruit
      button: |
        You said you liked ${ fruit }.
    - Revisit Vegetable: vegetable
      button: |
        You said you liked ${ vegetable }.
    - Revisit Fungus: fungi
      button: |
        You said you liked ${ fungi }.
    - note: |
        We suspect you prefer
        ${ fruit } to ${ vegetable }.
"review-1": |-
  event: review_answers
  question: |
    Revisit questions
  subquestion: |
    These are the questions you have
    answered so far.  Click to revisit.
  review:
    - Favorite fruit: fruit
    - Favorite vegetable: vegetable
    - Favorite fungus: fungi
  ---
  mandatory: True
  code: |
    menu_items = [ action_menu_item('Review Answers', 'review_answers') ]
"review-2": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n\
  \  - Revisit fruit: fruit\n    button: |\n      You said your favorite fruit was\n\
  \      ${ fruit }.\n  - Revisit vegetable: vegetable\n    button: |\n      You said\
  \ your favorite vegetable\n      was ${ vegetable }.\n  - Revisit fungus: fungi\n\
  \    button: |\n      You said your favorite fungus \n      was ${ fungi }."
"review-3": |-
  event: review_answers
  question: |
    Revisit your answers
  review:
    - note: |
        Revisit your food preferences.
      show if: fruit
    - Favorite fruit: fruit
    - Favorite vegetable: vegetable
    - Favorite fungus: fungi
"review-4": |-
  event: review_answers
  question: |
    Revisit your answers
  review:
    - Favorite fruit: fruit
      help: |
        You indicated you liked
        ${ fruit }.
    - Favorite vegetable: vegetable
      help: |
        You indicated you liked
        ${ vegetable }.
    - Favorite fungus: fungi
      help: |
        You indicated you liked
        ${ fungi }.
"review-5": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n\
  \  - Edit:\n      - fruit\n      - vegetable\n      - fungi\n    button: |\n   \
  \   Your favorite fruit is ${ fruit }.\n      \n      Your favorite vegetable is\
  \ ${ vegetable }.\n      \n      Your favorite fungus is ${ fungi }."
"review-6": |-
  event: review_answers
  question: |
    Revisit your answers
  review:
    - note: |
        Thank you for telling me
        about your food preferences.
      show if:
        - fruit
        - vegetable
        - fungi
    - Favorite fruit: fruit
    - Favorite vegetable: vegetable
    - Favorite fungus: fungi
"review-7": "event: review_answers\nquestion: |\n  Revisit your answers\nreview:\n\
  \  - Edit:\n      - fruit\n      - vegetable\n      - recompute:\n          - salad\n\
  \      - fungi\n    button: |\n      Your favorite fruit is ${ fruit }.\n      \n\
  \      Your favorite vegetable is ${ vegetable }.\n      \n      Your favorite fungus\
  \ is ${ fungi }.\n\n      We expect you would enjoy a ${ salad }.\n---\nquestion:\
  \ |\n  What is your favorite fruit?\nfields:\n  - no label: fruit\n---\nquestion:\
  \ |\n  What is your favorite vegetable?\nfields:\n  - no label: vegetable\n---\n\
  code: |\n  salad = fruit + \"-\" + vegetable + \" salad\"\n---\nquestion: |\n  What\
  \ is your favorite fungi?\nfields:\n  - no label: fungi"
"review-8": |-
  objects:
    address: Address
  ---
  event: review_answers
  question: |
    Revisit your answers
  review:
    - label: Edit
      fields:
        - address.address
        - recompute:
            - address.geocoding_reset
            - address.county
      button: |
        Your address is:

        ${ address }

        This address is located in
        ${ address.county }.
  ---
  question: |
    What is your address?
  fields:
    - "Street address": address.address
      address autocomplete: True
    - 'Apt/Unit': address.unit
      required: False
    - 'City': address.city
    - 'State': address.state
      code: states_list()
    - 'Zip': address.zip
  ---
  question: |
    In which county in
    ${ state_name(address.state) }
    do you live?
  fields:
    - County: address.county
  ---
  sets: address.county
  code: |
    address.geocode()
  ---
  code: |
    address.reset_geocoding()
    address.geocoding_reset = True
  ---
  mandatory: True
  question: All done
  subquestion: |
    You live in ${ address.county }.

    [Review your answers](${ url_action('review_answers')})
"review-9": |-
  event: review_answer
  question: |
    Revisit the equation
  review:
    - Change this:
        - undefine:
            - a
            - b
            - c
        - recompute:
            - d
      button: |
        ${ a } + ${ b } - ${ c } = ${ d }
  ---
  code: |
    d = a + b - c
  ---
  mandatory: True
  question: All done
  subquestion: |
    The answer is ${ d }.  You can
    [change this](${ url_action('review_answer') }).
"review-conditional": "question: |\n  What is your favorite fruit?\nfield: favorite_fruit\n\
  choices:\n  - Apple\n  - Orange\n  - Pear\n  - Peach\n---\nif: |\n  favorite_fruit\
  \ == 'Apple'\nquestion: |\n  What is your favorite apple?\nfields:\n  - Favorite\
  \ apple variety: favorite_apple\n---\nquestion: |\n  Result\nsubquestion: |\n  Your\
  \ favorite fruit is ${ favorite_fruit }.\n  \n  % if favorite_fruit == 'Apple':\n\
  \  Your favorite apple is ${ favorite_apple }.\n  % endif\nfield: results_shown\n\
  ---\nquestion: |\n  Please review the results.\nreview:\n  - label: Edit\n    fields:\n\
  \      - favorite_fruit\n      - follow up:\n        - favorite_apple\n    button:\
  \ |\n      Your favorite fruit is ${ favorite_fruit }.\n      \n      % if favorite_fruit\
  \ == 'Apple':\n      Your favorite apple is ${ favorite_apple }.\n      % endif\n\
  field: results_reviewed"
"review-edit-list": "mandatory: true\nquestion: |\n  Thank you for your answers!\n\
  subquestion: |\n  The people are ${ person } and your\n  favorite is ${ favorite\
  \ }.\n\n  You can\n  [edit your answers](${ url_action('review_interview') })\n\
  \  if you want.\n---\nevent: review_interview\nquestion: |\n  Edit your answers\n\
  review:\n  - Edit: favorite\n    button: |\n      Your favorite person is ${ favorite\
  \ }.\n  - Edit: person.revisit\n    button: |\n      The people are:\n\n      %\
  \ for y in person:\n      * ${ y }\n      % endfor\n---\nfield: person.revisit\n\
  question: |\n  Edit the people\nsubquestion: |\n  ${ person.table }\n  \n  ${ person.add_action()\
  \ }\n---\ntable: person.table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
  \  - Fruit: |\n      row_item.favorite_fruit\nedit:\n  - name.first\n  - favorite_fruit"
"review-edit-list-custom-button": |-
  features:
    review button color: secondary
    review button icon: pencil-alt
"review-edit-list-table": "need: person.table\nmandatory: true\nquestion: |\n  Thank\
  \ you for your answers!\nsubquestion: |\n  The people are ${ person }.\n\n  You\
  \ can\n  [edit your answers](${ url_action('review_interview') })\n  if you want.\n\
  ---\nevent: review_interview\nquestion: |\n  Edit your answers\nreview:\n  - note:\
  \ |\n      % if len(person):\n      The people are:\n\n      ${ person.table }\n\
  \      \n      ${ person.add_action() }\n      % else:\n      There are no people.\n\
  \n      ${ person.add_action(\"I would like to add one.\") }\n      % endif\n---\n\
  table: person.table\nrows: person\ncolumns:\n  - Name: |\n      row_item.name.full()\n\
  \  - Fruit: |\n      row_item.favorite_fruit\nedit:\n  - name.first\n  - favorite_fruit"
"review-field": "question: |\n  Revisit your answers\nreview:\n  - Revisit fruit:\
  \ fruit\n    button: |\n      You said your favorite fruit was\n      ${ fruit }.\n\
  \  - Revisit vegetable: vegetable\n    button: |\n      You said your favorite vegetable\n\
  \      was ${ vegetable }.\n  - Revisit fungus: fungi\n    button: |\n      You\
  \ said your favorite fungus \n      was ${ fungi }.\ncontinue button field: answers_reviewed\n\
  ---\nmandatory: True\ncode: |\n  fruit\n  vegetable\n  fungi\n  answers_reviewed\n\
  \  final_screen"
"review-side-note": |-
  question: |
    Review your answers
  review:
    - note: |
        Welcome to the review of answers.
    - note: |
        #### Your identity
      show if: user.name.first
    - Change your name: user.name.first
      help: |
        You said your name was
        **${ user.name }**.
      note: |
        Do not use a pseudonym, please.
    - note: |
        #### Your favorite foods
      show if: fruit
    - Revisit Fruit: fruit
      button: |
        You said you liked ${ fruit }.
      note: |
        This should be a tasty fruit.
    - Revisit Vegetable: vegetable
      button: |
        You said you liked ${ vegetable }.
    - Revisit Fungus: fungi
      button: |
        You said you liked ${ fungi }.
    - note: |
        We suspect you prefer
        ${ fruit } to ${ vegetable }.
  field: answers_reviewed
"right": "features:\n  centered: False\n---\nquestion: |\n  What is the airspeed velocity\
  \ of an\n  unladen swallow?\nfields:\n  - Velocity: swallow_velocity\nright: |\n\
  \  ### Note\n    \n  If you did not catch this\n  movie reference, you need to\n\
  \  improve your cultural literacy."
"right-centered": "question: |\n  What is the airspeed velocity of an\n  unladen swallow?\n\
  fields:\n  - Velocity: swallow_velocity\nright: |\n  ### Note\n    \n  If you did\
  \ not catch this\n  movie reference, you need to\n  improve your cultural literacy."
"salutation": |-
  template: letter_to_client
  content: |
    Dear
    ${ client.salutation() }
    ${ client.name.last }:

    I hope this letter finds you well.

    Blah, blah, blah.

    Dear
    ${ client.salutation(with_name=True) }:

    I hope this letter finds you well.

    Blah, blah, blah.

    Dear
    ${ client.salutation(with_name_and_punctuation=True) }

    I hope this letter finds you well.

    Blah, blah, blah.
"sample-function": |-
  modules:
    - .test
  ---
  mandatory: True
  question: |
    The number after 3 is
    ${ plus_one(3) }.
"save-and-predict": |-
  code: |
    entry = ml.new_entry()
"save-url-to-file": |-
  mandatory: True
  objects:
    - logo: DAFile
  ---
  code: |
    url = 'https://docassemble.org/img/docassemble-logo.jpg'
    (filename, mimetype) = path_and_mimetype(url)
    logo.set_mimetype(mimetype)
    logo.copy_into(filename)
  ---
  field: initial_screen
  question: |
    Obtained file
  subquestion: |
    The URL [${ url }](${ url })
    has been saved to a file.

    It has a MIME type of
    ${ mimetype }.

    Click "Continue" to see it.
  ---
  mandatory: True
  need: initial_screen
  question: |
    Here is the file.
  subquestion: |
    ${ logo }
"scan-for-variables": |-
  question: |
    What is the best color?
  fields:
    - Color: best_color
  ---
  question: |
    What is the time of day?
  field: time_of_day
  choices:
    - Night
    - Day
  ---
  mandatory: True
  question: |
    The best color is
    ${ best_color }.
  field: initial_color_seen
  ---
  scan for variables: False
  mandatory: True
  code: |
    if time_of_day == 'Night':
      best_color = 'black'
    else:
      best_color = 'blue'
  ---
  mandatory: True
  question: |
    The best color is now
    ${ best_color }.
"scan-for-variables-original": |-
  question: |
    What is the best color?
  fields:
    - Color: best_color
  ---
  question: |
    What is the time of day?
  field: time_of_day
  choices:
    - Night
    - Day
  ---
  mandatory: True
  question: |
    The best color is
    ${ best_color }.
  field: initial_color_seen
  ---
  mandatory: True
  code: |
    if time_of_day == 'Night':
      best_color = 'black'
    else:
      best_color = 'blue'
  ---
  mandatory: True
  question: |
    The best color is now
    ${ best_color }.
"scan-for-variables-sets": |-
  question: |
    What is the best color?
  fields:
    - Color: best_color
  ---
  question: |
    What is the time of day?
  field: time_of_day
  choices:
    - Night
    - Day
  ---
  scan for variables: False
  sets:
    - best_thing
  code: |
    if time_of_day == 'Night':
      best_thing = 'astronomy'
      best_color = 'black'
    else:
      best_thing = 'the beach'
      best_color = 'blue'
  ---
  mandatory: True
  field: initial_screen
  question: |
    According to you, the best color
    is ${ best_color }.
  ---
  mandatory: True
  question: |
    Since the best thing is
    ${ best_thing }, the best color is
    ${ best_color }.
"script": |-
  question: |
    Do you want to build a snowman?
  subquestion: |
    <span id="beg"></span>
  yesno: wants_to_build_snowman
  script: |
    <script>
      setTimeout(function(){
        $("#beg").html("Pretty please?");
      }, 3000);
    </script>
"sections": "sections:\n  - Introduction\n  - About you:\n    - Contact info\n   \
  \ - Demographics\n  - Preferences\n  - Conclusion\n---\nfeatures:\n  navigation:\
  \ True\n  progress bar: True\n---\nmandatory: True\ncode: |\n  menu_items = [ action_menu_item('Roadmap',\
  \ 'road_map') ]\n---\ninitial: True\ncode: |\n  if returning_user(minutes=0.5):\n\
  \    welcome_back\n---\nmandatory: True\nquestion: |\n  Welcome to the interview\n\
  subquestion: |\n  If you are not on a\n  smartphone-sized device,\n  you should\
  \ see a navigation\n  bar to the left.\nfield: sees_nav_bar\n---\nmandatory: True\n\
  question: |\n  I am going to ask you some\n  questions about yourself.\nfield: intro_to_about_you\n\
  section: About you\n---\nmandatory: True\nquestion: |\n  What is your name?\nfields:\n\
  \  - First Name: first_name\n  - Last Name: last_name\nsection: Contact info\n---\n\
  mandatory: True\nquestion: |\n  What is your e-mail address?\nfields:\n  - E-mail:\
  \ email_address\n    datatype: email\n---\nmandatory: True\nquestion: |\n  What\
  \ is your gender?\nfield: gender\nchoices:\n  - Male\n  - Female\n  - Something\
  \ else\nsection: Demographics\n---\nmandatory: True\nquestion: |\n  What kind of\
  \ belly button\n  do you have?\nsubquestion: |\n  To see what a user would\n  see\
  \ after returning to\n  the interview after a period\n  of absence, try waiting\n\
  \  thirty seconds, then\n  [click into the\n  interview](${ interview_url(local=True)\
  \ }).\n\n  In addition, there is a similar\n  screen available on the Menu in the\n\
  \  upper-right, under \"Roadmap.\"\nfield: belly_button\nchoices:\n  - Innie\n \
  \ - Outie\n---\nmandatory: True\nquestion: |\n  What is your favorite fruit?\nfields:\n\
  \  - Favorite fruit: favorite_fruit\nsection: Preferences\n---\nmandatory: True\n\
  question: |\n  What is your favorite vegetable?\nfields:\n  - Favorite vegetable:\
  \ favorite_vegetable\n---\nprogress: 100\nmandatory: True\nquestion: Thank you.\n\
  subquestion: |\n  ${ first_name },\n\n  Your answers mean a lot to me.\n  \n  I\
  \ am going to go eat some\n  ${ favorite_vegetable }\n  now.\nsection: Conclusion\n\
  ---\nevent: welcome_back\nquestion: |\n  Welcome back!\nsubquestion: |\n  You are\
  \ currently in the\n  **${ nav.get_section(display=True) }**\n  section.\n\n  ${\
  \ nav }\n\n  Press \"Continue\" to pick up\n  where you left off.\nbuttons:\n  Continue:\
  \ continue\n---\nevent: road_map\nquestion: |\n  Roadmap\nsubquestion: |\n  You\
  \ are currently in the\n  **${ nav.get_section(display=True) }**\n  section.\n\n\
  \  ${ nav }\n\n  Press \"Continue\" to resume the\n  interview.\nbuttons:\n  Continue:\
  \ continue"
"sections-auto-open": |-
  sections:
    - Introduction
    - About you:
      - Contact info
      - Demographics
    - Preferences
    - Conclusion
  auto open: True
"sections-horizontal": |-
  features:
    navigation: horizontal
    progress bar: True
"sections-keywords": "sections:\n  - intro: Introduction\n  - about: About you\n \
  \   subsections:\n      - contact: Contact info\n      - demographic: Demographics\n\
  \  - prefs: Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n  navigation:\
  \ True\n---\nmandatory: True\nquestion: |\n  Welcome to the interview\nsubquestion:\
  \ |\n  If you are not on a\n  smartphone-sized device,\n  you should see a navigation\n\
  \  bar to the left.\nfield: sees_nav_bar\n---\nmandatory: True\nquestion: |\n  I\
  \ am going to ask you some\n  questions about yourself.\nfield: intro_to_about_you\n\
  section: about\n---\nmandatory: True\nquestion: |\n  What is your name?\nfields:\n\
  \  - First Name: first_name\n  - Last Name: last_name\nsection: contact\n---\nmandatory:\
  \ True\nquestion: |\n  What is your e-mail address?\nfields:\n  - E-mail: email_address\n\
  \    datatype: email\n---\nmandatory: True\nquestion: |\n  What is your gender?\n\
  field: gender\nchoices:\n  - Male\n  - Female\n  - Something else\nsection: demographic\n\
  ---\nmandatory: True\nquestion: |\n  What kind of belly button\n  do you have?\n\
  field: belly_button\nchoices:\n  - Innie\n  - Outie\n---\nmandatory: True\nquestion:\
  \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
  section: prefs\n---\nmandatory: True\nquestion: |\n  What is your favorite vegetable?\n\
  fields:\n  - Favorite vegetable: favorite_vegetable\n---\nmandatory: True\nquestion:\
  \ Thank you.\nsubquestion: |\n  ${ first_name },\n\n  Your answers mean a lot to\
  \ me.\n  \n  I am going to go eat some\n  ${ favorite_vegetable }\n  now.\nsection:\
  \ conclusion"
"sections-keywords-code": "sections:\n  - intro: Introduction\n  - about: About you\n\
  \    subsections:\n      - contact: Contact info\n      - demographic: Demographics\n\
  \  - prefs: Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n  navigation:\
  \ True\n---\nmandatory: True\ncode: |\n  sees_nav_bar\n  nav.set_section('about')\n\
  \  intro_to_about_you\n  nav.set_section('contact')\n  first_name\n  email_address\n\
  \  nav.set_section('demographic')\n  gender\n  belly_button\n  nav.set_section('prefs')\n\
  \  favorite_fruit\n  favorite_vegetable\n  nav.set_section('conclusion')\n  final_screen\n\
  ---\nquestion: |\n  Welcome to the interview\nsubquestion: |\n  If you are not on\
  \ a\n  smartphone-sized device,\n  you should see a navigation\n  bar to the left.\n\
  field: sees_nav_bar\n---\nquestion: |\n  I am going to ask you some\n  questions\
  \ about yourself.\nfield: intro_to_about_you\n---\nquestion: |\n  What is your name?\n\
  fields:\n  - First Name: first_name\n  - Last Name: last_name\n---\nquestion: |\n\
  \  What is your e-mail address?\nfields:\n  - E-mail: email_address\n    datatype:\
  \ email\n---\nquestion: |\n  What is your gender?\nfield: gender\nchoices:\n  -\
  \ Male\n  - Female\n  - Something else\n---\nquestion: |\n  What kind of belly button\n\
  \  do you have?\nfield: belly_button\nchoices:\n  - Innie\n  - Outie\n---\nquestion:\
  \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
  ---\nquestion: |\n  What is your favorite vegetable?\nfields:\n  - Favorite vegetable:\
  \ favorite_vegetable\n---\nevent: final_screen\nquestion: Thank you.\nsubquestion:\
  \ |\n  ${ first_name },\n\n  Your answers mean a lot to me.\n  \n  I am going to\
  \ go eat some\n  ${ favorite_vegetable }\n  now."
"sections-keywords-get-sections": "sections:\n  - intro: Introduction\n  - about:\
  \ About you\n    subsections:\n      - contact: Contact info\n      - demographic:\
  \ Demographics\n  - prefs: Preferences\n  - conclusion: Conclusion\n---\nfeatures:\n\
  \  navigation: True\n---\nmandatory: True\nquestion: |\n  Welcome to the interview\n\
  subquestion: |\n  The sections of this interview,\n  as a Python list, are:\n\n\
  \  `${ nav.get_sections() }`\nfield: sees_nav_bar\n---\nmandatory: True\nquestion:\
  \ |\n  I am going to ask you some\n  questions about yourself.\nfield: intro_to_about_you\n\
  section: about\n---\nmandatory: True\nquestion: |\n  What is your name?\nfields:\n\
  \  - First Name: first_name\n  - Last Name: last_name\nsection: contact\n---\nmandatory:\
  \ True\nquestion: |\n  What is your e-mail address?\nfields:\n  - E-mail: email_address\n\
  \    datatype: email\n---\nmandatory: True\nquestion: |\n  What is your gender?\n\
  field: gender\nchoices:\n  - Male\n  - Female\n  - Something else\nsection: demographic\n\
  ---\nmandatory: True\nquestion: |\n  What kind of belly button\n  do you have?\n\
  field: belly_button\nchoices:\n  - Innie\n  - Outie\n---\nmandatory: True\nquestion:\
  \ |\n  What is your favorite fruit?\nfields:\n  - Favorite fruit: favorite_fruit\n\
  section: prefs\n---\nmandatory: True\nquestion: |\n  What is your favorite vegetable?\n\
  fields:\n  - Favorite vegetable: favorite_vegetable\n---\nmandatory: True\nquestion:\
  \ Thank you.\nsubquestion: |\n  ${ first_name },\n\n  Your answers mean a lot to\
  \ me.\n  \n  I am going to go eat some\n  ${ favorite_vegetable }\n  now.\nsection:\
  \ conclusion"
"sections-keywords-review": |-
  sections:
    - intro: Introduction
    - about: About you
      subsections:
        - contact: Contact info
        - demographic: Demographics
    - prefs: Preferences
    - conclusion: Conclusion
  ---
  event: contact
  section: contact
  question: |
    Review contact information
  review:
    - Edit name: first_name
      button: |
        Name: ${ first_name } ${ last_name }
    - Edit e-mail: email_address
      button: |
        E-mail: ${ email_address }
  ---
  event: demographic
  section: demographic
  question: |
    Review demographic information
  review:
    - Edit gender: gender
      button: |
        Gender: ${ gender }
    - Edit belly button: belly_button
      button: |
        Belly button: ${ belly_button }
  ---
  event: prefs
  section: prefs
  question: |
    Preferences
  review:
    - Edit fruit: favorite_fruit
      button: |
        Favorite fruit: ${ favorite_fruit }
    - Edit vegetable: favorite_vegetable
      button: |
        Favorite vegetable: ${ favorite_vegetable }
"sections-keywords-set-sections": |-
  sections:
    - intro: Introduction
    - about: About you
      subsections:
        - contact: Contact info
        - demographic: Demographics
    - prefs: Preferences
  ---
  features:
    navigation: True
  ---
  question: |
    What additional section
    would you like to add to
    this interview?
  fields:
    - Name: new_name
    - Keyword: new_keyword
      help: |
        Use only letters and
        underscores.
  ---
  mandatory: True
  code: |
    new_section = dict()
    new_section[new_keyword] = new_name
    the_sections = nav.get_sections()
    the_sections.append(new_section)
    nav.set_sections(the_sections)
  ---
  mandatory: True
  code: |
    sees_nav_bar
    nav.set_section('about')
    intro_to_about_you
    nav.set_section('contact')
    first_name
    email_address
    nav.set_section('demographic')
    gender
    belly_button
    nav.set_section('prefs')
    favorite_fruit
    favorite_vegetable
    nav.set_section(new_keyword)
    final_screen
"sections-non-progressive": |-
  sections:
    - intro: Introduction
    - about: About you
      subsections:
        - contact: Contact info
        - demographic: Demographics
    - prefs: Preferences
    - conclusion: Conclusion
  progressive: False
  ---
  event: intro
  code: |
    force_ask('sees_nav_bar')
  ---
  event: about
  code: |
    force_ask('intro_to_about_you')
  ---
  event: contact
  code: |
    force_ask('first_name', 'email_address')
  ---
  event: demographic
  code: |
    force_ask('gender', 'belly_button')
  ---
  event: prefs
  code: |
    force_ask('favorite_fruit', 'favorite_vegetable')
  ---
  event: conclusion
  code: |
    force_ask('final_screen')
  ---
  features:
    navigation: True
"sections-small-screen-dropdown": |-
  features:
    navigation: True
    small screen navigation: dropdown
"sections-small-screen-false": "sections:\n  - Introduction\n  - About you:\n    -\
  \ Contact info\n    - Demographics\n  - Preferences\n  - Conclusion\n---\nfeatures:\n\
  \  navigation: True\n  small screen navigation: False\n  progress bar: True\n---\n\
  mandatory: True\ncode: |\n  menu_items = [ action_menu_item('Roadmap', 'road_map')\
  \ ]\n---\ninitial: True\ncode: |\n  if returning_user(minutes=0.5):\n    welcome_back\n\
  ---\nmandatory: True\nquestion: |\n  Welcome to the interview\nfield: sees_nav_bar\n\
  ---\nmandatory: True\nquestion: |\n  I am going to ask you some\n  questions about\
  \ yourself.\nfield: intro_to_about_you\nsection: About you\n---\nmandatory: True\n\
  question: |\n  What is your name?\nfields:\n  - First Name: first_name\n  - Last\
  \ Name: last_name\nsection: Contact info\n---\nmandatory: True\nquestion: |\n  What\
  \ is your e-mail address?\nfields:\n  - E-mail: email_address\n    datatype: email\n\
  ---\nmandatory: True\nquestion: |\n  What is your gender?\nfield: gender\nchoices:\n\
  \  - Male\n  - Female\n  - Something else\nsection: Demographics\n---\nmandatory:\
  \ True\nquestion: |\n  What kind of belly button\n  do you have?\nsubquestion: |\n\
  \  To see what a user would\n  see after returning to\n  the interview after a period\n\
  \  of absence, try waiting\n  thirty seconds, then\n  [click into the\n  interview](${\
  \ interview_url(local=True) }).\n\n  In addition, there is a similar\n  screen available\
  \ on the Menu in the\n  upper-right, under \"Roadmap.\"\nfield: belly_button\nchoices:\n\
  \  - Innie\n  - Outie\n---\nmandatory: True\nquestion: |\n  What is your favorite\
  \ fruit?\nfields:\n  - Favorite fruit: favorite_fruit\nsection: Preferences\n---\n\
  mandatory: True\nquestion: |\n  What is your favorite vegetable?\nfields:\n  - Favorite\
  \ vegetable: favorite_vegetable\n---\nprogress: 100\nmandatory: True\nquestion:\
  \ Thank you.\nsubquestion: |\n  ${ first_name },\n\n  Your answers mean a lot to\
  \ me.\n  \n  I am going to go eat some\n  ${ favorite_vegetable }\n  now.\nsection:\
  \ Conclusion\n---\nevent: welcome_back\nquestion: |\n  Welcome back!\nsubquestion:\
  \ |\n  You are currently in the\n  **${ nav.get_section(display=True) }**\n  section.\n\
  \n  ${ nav }\n\n  Press \"Continue\" to pick up\n  where you left off.\nbuttons:\n\
  \  Continue: continue\n---\nevent: road_map\nquestion: |\n  Roadmap\nsubquestion:\
  \ |\n  You are currently in the\n  **${ nav.get_section(display=True) }**\n  section.\n\
  \n  ${ nav }\n\n  Press \"Continue\" to resume the\n  interview.\nbuttons:\n  Continue:\
  \ continue"
"send-email": |-
  objects:
    - recipient: Individual
  ---
  mandatory: true
  question: |
    E-mail test
  subquestion: |
    % if intro_provided and email_sent_ok:
    The e-mail was sent successfully.
    % else:
    There was a problem sending the e-mail.
    % endif
  ---
  question: |
    E-mail test
  subquestion: |
    This interview will send you an e-mail.
  field: intro_provided
  ---
  question: |
    What is your name?
  fields:
    - First Name: recipient.name.first
    - Last Name: recipient.name.last
  ---
  question: |
    What is your e-mail address?
  fields:
    - E-mail: recipient.email
      datatype: email
  ---
  code: |
    email_sent_ok = send_email(to=recipient, template=notification)
  ---
  template: notification
  subject: |
    Greetings, ${ recipient }!
  content: |
    This is an e-mail sent from a
    **docassemble** interview.

    Have a nice day!
"send-email-with-attachment": |-
  question: |
    Please fill in the following information.
  fields:
    - Your First Name: user.name.first
    - Your Last Name: user.name.last
    - Your E-mail: user.email
      datatype: email
    - A Picture: the_file
      datatype: file
  ---
  code: |
    success_sending_email = send_email(to=[user], template=hello_email, attachments=[the_file])
"send-sms": |-
  objects:
    client: Individual
"server-capabilities": |-
  mandatory: True
  question: |
    Server capabilities
  subquestion: |
    % for feature, enabled in server_capabilities().items():
    * **${ feature }**: ${ 'enabled' if enabled else 'disabled' }
    % endfor
"session-interview": |-
  initial: True
  code: |
    if not user_logged_in():
      response(url=url_of('login'))
  ---
  reconsider: True
  code: |
    current_info = user_info()
    list_of_interviews = list()
    next_id = None
    while True:
      (items, next_id) = interview_list(next_id=next_id)
      for info in items:
        if info['filename'] != current_info.filename:
          list_of_interviews.append(info)
      if not next_id:
          break
    if len(list_of_interviews) > 0:
      list_of_interviews += [dict()]
  ---
  table: session_table
  rows: |
    list_of_interviews
  columns:
    - Title: |
        '<a href="' + interview_url(i=row_item['filename'], session=row_item['session']) + '">' + row_item['title'] + '</a>' if 'title' in row_item else ''
    - Started: |
        row_item['modtime'] if 'modtime' in row_item else ''
    - Delete: |
        action_button_html(url_action('delete', filename=row_item['filename'], session=row_item['session']), color='warning', label='Delete') if 'title' in row_item else action_button_html(url_action('delete_all'), color='danger', label='Delete All')
  ---
  prevent going back: True
  mandatory: True
  question: |
    Resume an interview
  subquestion: |
    % if len(list_of_interviews) > 0:
    Click the interview title
    to resume an interview
    you already started.

    ${ session_table }
    % else:
    You do not have any sessions.
    % endif
  ---
  event: delete
  code: |
    if interview_list(
        action='delete',
        filename=action_argument('filename'),
        session=action_argument('session')):
      log("Deleted interview", "success")
  ---
  event: delete_all
  code: |
    interview_list(action='delete_all')
    log("Deleted interviews", "success")
"session-interview-redirect": |-
  initial: True
  code: |
    if not user_logged_in():
      response(url=url_of('login'))
    if interface() == 'json':
      for interview in interview_list(filename='docassemble.demo:data/questions/questions.yml')[0]:
        response(url=interview_url(i=interview['filename'], session=interview['session'], local=True, json=1))
      response(url=interview_url(i='docassemble.demo:data/questions/questions.yml', local=True, json=1))
    else:
      for interview in interview_list(filename='docassemble.demo:data/questions/questions.yml')[0]:
        response(url=interview_url(i=interview['filename'], session=interview['session'], local=True))
      response(url=interview_url(i='docassemble.demo:data/questions/questions.yml', local=True))
"session-local": |-
  mandatory: True
  code: |
    multi_user = True
  ---
  mandatory: True
  code: |
    session_local.how_doing
    final_screen
  ---
  question: |
    How are you doing today?
  field: session_local.how_doing
  choices:
    - Well: well
    - Poorly: poor
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Favorite fruit: favorite_fruit
  ---
  event: final_screen
  question: |
    Your favorite fruit is ${ favorite_fruit }
  subquestion: |
    % if session_local.how_doing == 'well':
    I am glad you are doing well.
    % else:
    I am sorry you are poorly today.
    % endif

    Try re-joining this interview by
    using a different web browser, an
    incognito tab, or by closing your
    browser application and opening it
    again, and visiting this URL:

    [${ interview_url() }](${ interview_url() })
"set-language": "initial: True\ncode: |\n  set_language(language)\n---\nquestion:\
  \ |\n  What language do you speak?\nfield: language\nchoices:\n  - English: en\n\
  \  - Espa\xF1ol: es"
"set-logo-title": |-
  objects:
    - company_logo: DAStaticFile.using(filename='example-inc.svg')
  ---
  mandatory: True
  code: |
    set_parts(title='Example Inc.', logo='<img src="' + company_logo.url_for() + '" style="height: 20px; width: 157px;">')
"set-parts": |-
  metadata:
    title: Set the interview title
    short title: Title
    tab title: The Title
    subtitle: The subtitle
    pre: The pre text
    submit: The submit text
    post: The post text
  ---
  question: |
    What is your favorite fruit?
  subquestion: |
    Note the interview titles.
  fields:
    Fruit: favorite_fruit
  ---
  mandatory: True
  code: |
    favorite_fruit = noun_plural(favorite_fruit)
    favorite_fruit = capitalize(favorite_fruit)
  ---
  mandatory: True
  code: |
    set_parts(
      title=favorite_fruit + " rule",
      short="I'm Tiny!",
      tab="TabTab",
      subtitle="a fruit interview",
      pre="This is about fruit",
      submit="Get ready for some buttons",
      post=DAStaticFile(filename="endmatter.html").slurp())
"setField": |-
  question: |
    What groceries should we buy for
    tomorrow's breakfast?
  subquestion: |
    <a id="decide" href="#" class="btn btn-sm btn-primary">Decide for me</a>
  fields:
    - Cold cereal: cold_cereal
      choices:
        - Lucky Charms
        - Cheerios
        - Froot Loops
        - Corn Flakes
    - Hot cereal: hot_cereal
      input type: radio
      choices:
        - Oatmeal
        - Cream of wheat
        - Bran
    - Juice: juice_varieties
      datatype: checkboxes
      choices:
        - Apple
        - Orange
        - Grapefruit
    - Other: other_groceries
  script: |
    <script>
      $("#decide").click(function(){
        setField("cold_cereal", "Lucky Charms");
        setField("hot_cereal", "Cream of wheat");
        setField("juice_varieties['Apple']", true);
        setField("juice_varieties['Orange']", true);
        setField("juice_varieties['Grapefruit']", false);
        setField("other_groceries", "Bread and jam");
        return false;
      });
    </script>
"setparts-demo": |-
  mandatory: True
  code: |
    set_parts(subtitle='This is the subtitle part.', pre='This is the pre part.', submit='This is the submit part.', post='This is the post part.', under='This is the under part.', right='This is the right part.', exit_link='leave', exit_label='Exit label', help_label='Help label', continue_button_label='Continue button label', back_button_label='Back button label')
"show-login": |-
  metadata:
    show login: False
"showif": |-
  question: |
    Please fill in the following information.
  fields:
    - Favorite fruit: fruit
    - Favorite vegetable: vegetable
    - Favorite fungus: mushroom
      show if:
        code: |
          2 + 2 == 3
"showif-boolean": |-
  question: |
    Please fill in the following information.
  fields:
    - "Do you like fruit?": likes_fruit
      datatype: yesnoradio
    - "What's your favorite fruit?": favorite_fruit
      show if: likes_fruit
"showif-boolean-yesno-false": |-
  question: |
    Please fill in the following information.
  fields:
    - "I like fruit.": likes_fruit
      datatype: yesno
    - "Why do you not like fruit?": fruit_dislike_reason
      show if:
        variable: likes_fruit
        is: False
"showif-nested": |-
  question: |
    Please fill in the following information.
  fields:
    - "Do you like fruit?": likes_fruit
      datatype: yesnoradio
    - "Do you like apples?": likes_apples
      datatype: yesnoradio
      show if: likes_fruit
    - "Why do you like apples?": reason_for_liking_apples
      show if: likes_apples
    - "Why do you hate apples?": reason_for_hating_apples
      show if:
        variable: likes_apples
        is: False
    - "Do you like Fuji apples?": likes_fuji
      datatype: yesnoradio
      show if: likes_apples
    - "Why do you like Fuji apples?": reason_for_liking_fuji_apples
      show if: likes_fuji
"showif-nested-checkbox": |-
  question: |
    Please fill in the following information.
  fields:
    - "Do you like fruit?": likes_fruit
      datatype: yesnoradio
    - "Do you like apples?": likes_apples
      datatype: yesnoradio
      show if: likes_fruit
    - "Favorite varieties": varieties_liked
      datatype: checkboxes
      choices:
        - Fuji
        - Granny Smith
        - Gala
        - Red Delicious
      show if: likes_apples
    - "Why do you like Fuji apples?": reason_for_liking_fuji_apples
      show if: |
        varieties_liked['Fuji']
"shuffle": |-
  question: |
    For which of the following obscure
    candidates do you wish to vote?
  fields:
    - Candidate: candidate
      datatype: radio
      shuffle: True
      choices:
        - Aaron Aardvark
        - Albert Arnold
        - Felicia Fellowes
        - Miranda Moore
        - Zachariah Zephyr
"side-html": |-
  question: |
    What is 2+2?
  fields:
    Answer: answer
    choices:
      - 3
      - 4
      - 5
    html: |
      <span style="color: green;">Hint: 2 + 2 = 4.</span>
"side-note": |-
  question: |
    What is 2+2?
  fields:
    Answer: answer
    choices:
      - 3
      - 4
      - 5
    note: |
      Hint: 2 + 2 = 4.
"signature": |-
  question: |
    Sign your name
  subquestion: |
    By signing your name, you agree to
    our terms and conditions.
  signature: target_variable
  under: |
    ${ user }
"signin": |-
  mandatory: True
  code: |
    if user_logged_in():
      goodbye_page
    else:
      sign_in_page
  ---
  question: |
    Please sign in
  buttons:
    - Sign in: signin
  sets: sign_in_page
"single-spacing": |-
  question: |
    Here is your document.
  subquestion: |
    It demonstrates types of spacing.
  attachments:
    - name: A test document
      filename: test_document
      metadata:
        SingleSpacing: True
      content: |
        ${ client } is entitled to
        benefits plan ${ benefits }.

        Four score and seven years ago
        our fathers brought forth on
        this continent, a new nation,
        conceived in Liberty, and
        dedicated to the proposition
        that all men are created equal.

        Now we are engaged in a great
        civil war, testing whether that
        nation, or any nation so
        conceived and so dedicated,
        can long endure.

        # What about double-spacing?

        Let's try this with double
        spacing.

        [DOUBLESPACING]

        Four score and seven years ago
        our fathers brought forth on
        this continent, a new nation,
        conceived in Liberty, and
        dedicated to the proposition
        that all men are created equal.

        Now we are engaged in a great
        civil war, testing whether that
        nation, or any nation so
        conceived and so dedicated,
        can long endure.
  mandatory: True
"single_to_double_newlines": |-
  mandatory: True
  question: |
    Here is your first book.
  attachment:
    name: Story of My Life
    filename: life_story
    content: |
      [BOLDCENTER] My Life Story

      ${ single_to_double_newlines(life_story) }

      [CENTER] The End.
"sms": |-
  question: |
    Hello, world!
  subquestion: |
    Are you doing well?
  yesno: doing_well
  ---
  terms:
    world: |
      A planet.
  ---
  mandatory: True
  question: |
    % if doing_well:
    Glad to hear that!
    % else:
    Sorry to hear that!
    % endif
  attachment:
    content: |
      Hello world!
    valid formats:
      - pdf
"social": |-
  metadata:
    title: Social meta tags
    short: Social
    social:
      description: |
        A demonstration of meta tags.
      image: court.png
      og:
        image: docassemble.demo:data/static/crown.png
        description: A one-page guided interview demonstrating meta tags.
      twitter:
        title: Social meta tag demo
        site: "@docassemble"
        description: |
          An interview that demonstrates meta tags.
        image: https://docassemble.org/img/docassemble-logo-sq-125.jpg
        "image:alt": Docassemble logo
"someone-already-mentioned-bad": |-
  imports:
    - docassemble.demo.change_suffix
"someone-already-mentioned2": |-
  mandatory: True
  objects:
    successor_agent: Individual
    conservator: Individual
    guardian: Individual
"someone-already-mentioned3": |-
  question: |
    Who is the trustee?
  fields:
    - no label: trustee
      datatype: object_radio
      disable others: True
      none of the above: Someone else
      choices:
        - agent
    - First name: trustee.name.first
    - Middle name: trustee.name.middle
      required: False
    - Last name: trustee.name.last
    - Suffix: trustee.name.suffix
      required: False
      code: name_suffix()
"sort": |-
  objects:
    building: DAList.using(object_type=Thing, minimum_number=2)
"space-underscore": |-
  question: |
    Removing spaces
  subquestion: |
    Your book is *${ book }* and
    without underscores, it is
    ${ space_to_underscore(book) }.
  sets: all_done
"state": |-
  question: |
    Where do you live?
  fields:
    - State: user_state
      code: states_list()
  ---
  mandatory: True
  question: |
    You live in
    ${ state_name(user_state) },
    which is abbreviated
    ${ user_state }.
"static-file": |-
  objects:
    - the_icon: DAStaticFile
  ---
  code: |
    if user.gender == 'Female':
      the_icon.filename = 'female243.png'
    else:
      the_icon.filename = 'male244.png'
  ---
  mandatory: True
  question: |
    The image
    ${ the_icon.show(width='1em') }
  subquestion: |
    ${ the_icon }
"static_image": |-
  mandatory: True
  question: |
    An image created by code
  subquestion: |
    This is the "${ image_name }" image.

    ${ static_image(image_name + '.svg') }
"subdivision-type": "mandatory: True\nquestion: |\n  Geography lesson\nsubquestion:\
  \ |\n  % for country in ['BG', 'SE', 'TN', 'VN', 'LV', 'US']:\n  In ${ country_name(country)\
  \ },\n  you live in a\n  ${ subdivision_type(country) }.\n  \n  % endfor"
"subquestion": |-
  question: |
    What is the airspeed velocity of an
    unladen swallow?
  subquestion: Be careful how you answer.
  fields:
    - Velocity: swallow_velocity
"supersede": |-
  id: informal favorite fruit question
  supersedes: regular favorite fruit question
  question: |
    What the heck is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  id: regular favorite fruit question
  question: |
    What is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  mandatory: True
  question: |
    Your favorite fruit is
    ${ favorite_fruit }.
"supersede-order": |-
  order:
    - informal favorite fruit question
    - regular favorite fruit question
  ---
  id: informal favorite fruit question
  question: |
    What the heck is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  id: regular favorite fruit question
  question: |
    What is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  mandatory: True
  question: |
    Your favorite fruit is
    ${ favorite_fruit }.
"supersede-regular": |-
  question: |
    What the heck is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  question: |
    What is your favorite fruit?
  fields:
    Fruit: favorite_fruit
  ---
  mandatory: True
  question: |
    Your favorite fruit is
    ${ favorite_fruit }.
"suppress-loading-util": |-
  metadata:
    suppress loading util: True
  ---
  code: |
    try:
      Individual
      individual_defined = True
    except:
      individual_defined = False
  ---
  mandatory: True
  question: |
    % if individual_defined:
    `Individual` is defined.
    % else:
    `Individual` is not defined.
    % endif
"table": |-
  objects:
    - fruit: DAList
  ---
  mandatory: true
  code: |
    fruit.object_type = Thing
  ---
  mandatory: True
  question: |
    Information about fruit
  subquestion: |
    Here is a fruity summary.

    ${ fruit_table }
  ---
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Seeds: row_item.seeds
"table-alt": |-
  code: |
    thing = "Fruit"
  ---
  table: fruit_table
  rows: fruit
  columns:
    - header: |
        ${ thing } Name
      cell: |
        row_item.name
    - header: |
        Number of Seeds
      cell: |
        row_item.seeds
"table-dict": |-
  scan for variables: False
  mandatory: True
  code: |
    income['employment'].receives = True
    income['employment'].amount = 237
    income['benefits'].receives = False
    income['interest'].receives = True
    income['interest'].amount = 23
  ---
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item.receives else 'No'
    - Amount: |
        currency(row_item.amount) if row_item.receives else ''
  ---
  mandatory: True
  question: |
    Summary of income
  subquestion: |
    ${ income.table }
"table-dict-confirm": |-
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item.receives else 'No'
    - Amount: |
        currency(row_item.amount) if row_item.receives else ''
  delete buttons: True
  confirm: True
"table-dict-delete-buttons": |-
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item.receives else 'No'
    - Amount: |
        currency(row_item.amount) if row_item.receives else ''
  delete buttons: True
"table-dict-edit": |-
  objects:
    - income: |
        DADict.using(
          object_type=DAObject,
          keys=['employment', 'benefits', 'interest'],
          complete_attribute='complete',
          there_is_another=False)
  ---
  code: |
    if income[i].receives:
      income[i].amount
    income[i].complete = True
  ---
  question: |
    Income from ${ i }
  fields:
    - "Do you get income from ${ i }?": income[i].receives
      datatype: yesnoradio
    - "How much do you get from ${ i }?": income[i].amount
      datatype: currency
      show if: income[i].receives
  ---
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item.receives else 'No'
    - Amount: |
        currency(row_item.amount) if row_item.receives else ''
  edit:
    - receives
"table-dict-edit-delete-buttons": |-
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item.receives else 'No'
    - Amount: |
        currency(row_item.amount) if row_item.receives else ''
  edit:
    - receives
  delete buttons: False
"table-dict-edit-minimum-number": |-
  objects:
    - income: |
        DADict.using(
          object_type=DAObject,
          keys=['employment', 'benefits', 'interest'],
          complete_attribute='complete',
          minimum_number=3,
          there_is_another=False)
"table-dict-string": |-
  question: |
    Income from ${ i }
  fields:
    - "How much income do you get from ${ i }?": income[i]
      datatype: currency
  ---
  question: |
    What type of income would you
    like to add?
  fields:
    - "Type of income": income.new_item_name
  ---
  table: income.table
  rows: income
  columns:
    - Type: |
        row_index
    - Receives: |
        'Yes' if row_item > 0 else 'No'
    - Amount: |
        currency(row_item) if row_item > 0 else ''
  edit: True
"table-empty": |-
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Number of Seeds: row_item.seeds
  show if empty: False
"table-empty-message": |-
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Number of Seeds: row_item.seeds
  show if empty: |
    I'm very sorry, but there are no fruits
    to display today.
"table-export": |-
  objects:
    - fruit: DAList
  ---
  mandatory: true
  code: |
    fruit.object_type = Thing
  ---
  mandatory: True
  question: |
    Information about fruit
  subquestion: |
    Here is a fruity summary.

    ${ fruit_table }

    You can also [download this information].

    [download this information]: ${ fruit_table.export('fruit.xlsx', title='fruit').url_for() }
  ---
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Seeds: row_item.seeds
    - Last eaten: row_item.last_eaten
"table-if-then": |-
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: |
        noun_plural(row_item.name)
    - Number of Seeds: |
        "too many" if row_item.seeds > 20 else row_item.seeds
"table-mako": |-
  mandatory: True
  question: |
    Information about fruit
  subquestion: |
    Here is a fruity summary.

    Fruit Name     |Number of Seeds
    ---------------|----------------
    % for item in fruit:
    ${ item.name } | ${ item.seeds }
    % endfor
"table-markdown": "mandatory: true\nquestion: |\n  Your fruit inventory\nsubquestion:\
  \ |\n  This describes your fruit\n  collection.\n  \n  Fruit  | How many\n  -------|---------\n\
  \  Apple  | 4\n  Orange | 3\n  Pear   | 6"
"table-markdown-noheader": "mandatory: true\nquestion: |\n  Your vegetable inventory\n\
  subquestion: |\n  This describes your vegetable\n  collection.\n\n  &nbsp;   |&nbsp;\n\
  \  ---------|------\n  Potato   |4     \n  Brocolli |3     \n  Beet     |6"
"table-markdown-unaligned": |-
  mandatory: true
  question: |
    Your vegetable inventory
  subquestion: |
    This describes your vegetable
    collection.

    Vegetable|How many
    ------|----
    Potato|4
    Brocolli|3
    Beet|6
"table-not-available-label": |-
  table: fruit.table
  rows: fruit
  columns:
    - Fruit Name: row_item
    - Number of Seeds: row_item.seeds
    - Last eaten: row_item.last_eaten
  show incomplete: True
  show if empty: You do not have any fruit.
  not available label: ""
  edit:
    - name.text
    - last_eaten
"table-python": |-
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: |
        noun_plural(row_item.name)
    - Number of Seeds: |
        row_item.seeds * 2
"table-read-only": |-
  mandatory: True
  code: |
    fruit.appendObject()
    fruit[-1].important = True
    fruit[-1].name.text = 'Apple'
    fruit[-1].seeds = 10
    fruit.appendObject()
    fruit[-1].important = True
    fruit[-1].name.text = 'Orange'
    fruit[-1].seeds = 5
  ---
  code: |
    fruit[i].important = False
  ---
  table: fruit.table
  rows: fruit
  columns:
    - Name: |
        row_item
    - Seeds: |
        row_item.seeds
  edit:
    - name.text
  read only: important
"table-read-only-2": |-
  mandatory: True
  code: |
    fruit.appendObject()
    fruit[-1].important = dict(delete=True, edit=False)
    fruit[-1].name.text = 'Apple'
    fruit[-1].seeds = 10
    fruit.appendObject()
    fruit[-1].important = dict(delete=False, edit=True)
    fruit[-1].name.text = 'Orange'
    fruit[-1].seeds = 5
  ---
  code: |
    fruit[i].important = False
  ---
  table: fruit.table
  rows: fruit
  columns:
    - Name: |
        row_item
    - Seeds: |
        row_item.seeds
  edit:
    - name.text
  read only: important
"table-reorder": |-
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Seeds: row_item.seeds
  edit:
    - name.text
  allow reordering: True
"table-require-gathered": |-
  table: fruit.table
  rows: fruit
  columns:
    - Fruit Name: row_item
    - Number of Seeds: row_item.seeds
    - Last eaten: row_item.last_eaten
  require gathered: False
  edit:
    - name.text
    - last_eaten
"table-show-incomplete": |-
  table: fruit.table
  rows: fruit
  columns:
    - Fruit Name: row_item
    - Number of Seeds: row_item.seeds
    - Last eaten: row_item.last_eaten
  show incomplete: True
  show if empty: You do not have any fruit.
  edit:
    - name.text
    - last_eaten
"table-width": |-
  features:
    table width: 35
  ---
  table: fruit_table
  rows: fruit
  columns:
    - Fruit Name: row_item.name
    - Seeds: row_item.seeds
"tags": |-
  metadata:
    tags:
      - apples
      - oranges
  ---
  mandatory: True
  question: Tags
  subquestion: |
    The tags are:

    % for tag in session_tags():
    * ${ tag }
    % endfor

    Check your
    [interview list](${ url_of('interviews') })
    to see these tags.
  field: first_screen_done
  ---
  mandatory: True
  code: |
    session_tags().add('grapes')
  ---
  mandatory: True
  question: Tags
  subquestion: |
    The tags are:

    % for tag in session_tags():
    * ${ tag }
    % endfor

    Check your
    [interview list](${ url_of('interviews') })
    to see how these tags
    have changed.
"target-code": |-
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
  under: |
    [TARGET feedback]
  check in: question_food
  ---
  event: question_food
  code: |
    food = action_argument('favorite_food')
    if food:
      content = "What? You like " + food.upper() + "?"
    else:
      content = ''
    background_response(target='feedback',
                        content=content)
  ---
  mandatory: True
  question: |
    Your favorite food is ${ favorite_food }.
"target-code-multiple": |-
  check in: question_food
  question: |
    What is your favorite food?  [TARGET feedback_one]
  fields:
    - Favorite food: favorite_food
  under: |
    [TARGET feedback_two]
  ---
  event: question_food
  code: |
    food = action_argument('favorite_food')
    if food:
      content_one = "  (Please don't be gross.)"
      content_two = "What? You like " + food.upper() + "?"
    else:
      content_one = ''
      content_two = ''
    background_response([{'target': 'feedback_one',
                        'content': content_one},
                        {'target': 'feedback_two',
                        'content': content_two}])
"target-code-template": |-
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
  under: |
    [TARGET feedback]
  check in: question_food
  ---
  event: question_food
  code: |
    if action_argument('favorite_food'):
      the_food = action_argument('favorite_food').upper()
    else:
      the_food = 'nothing'
    food_message
  ---
  template: food_message
  content: |
    _What?_  You like ${ the_food }?
  target: feedback
"target-template": |-
  question: |
    What is your favorite food?
  fields:
    - Favorite food: favorite_food
  under: |
    [TARGET feedback]
  check in: question_food
  ---
  template: question_food
  content: |
    % if action_argument('favorite_food'):
    _What?_  You like
    ${ action_argument('favorite_food').upper() }?
    % endif
  target: feedback
"template": |-
  template: disclaimer
  content: |
    The opinions expressed herein do not
    *necessarily* reflect the views
    of ${ company }.
  ---
  field: intro_screen
  question: Welcome to the interview!
  subquestion: |
    Greetings.  We hope you learn something
    from this guided interview.

    ${ disclaimer }

    To get started, press **Continue**.
"template-file": |-
  template: disclaimer
  content file: disclaimer.md
  ---
  field: intro_screen
  question: Welcome to the interview!
  subquestion: |
    Greetings.  We hope you learn something
    from this guided interview.

    ${ disclaimer }

    To get started, press **Continue**.
"template-file-code": |-
  code: |
    template_file_to_use = 'disclaimer.md'
  ---
  template: disclaimer
  content file:
    code: template_file_to_use
  ---
  field: intro_screen
  question: Welcome to the interview!
  subquestion: |
    Greetings.  We hope you learn something
    from this guided interview.

    ${ disclaimer }

    To get started, press **Continue**.
"template-show": |-
  template: disclaimer
  content: |
    The opinions expressed herein do not
    *necessarily* reflect the views
    of ${ company }.
  ---
  field: intro_screen
  question: Welcome to the interview!
  subquestion: |
    Greetings.  We hope you learn something
    from this guided interview.

    ${ disclaimer.show(company="ABC Widgets, Incorporated") }

    To get started, press **Continue**.
"template-subject": |-
  template: disclaimer
  subject: |
    Please be advised
  content: |
    The opinions expressed herein do not
    *necessarily* reflect the views
    of ${ company }.
  ---
  field: intro_screen
  question: Welcome to the interview!
  subquestion: |
    Greetings.  We hope you learn something
    from this guided interview.

    To get started, press **Continue**.
  under: |
    ### ${ disclaimer.subject }

    ${ disclaimer.content }
"terminal-screen": |-
  question: |
    Congratulations!
  subquestion: |
    You are all done with the interview.
  mandatory: True
"terms": |-
  terms:
    creeper: |
      A tall green creature that explodes if
      you get too close.
    zombie pigman: |
      A harmless creature who carries a gold
      sword.
  ---
  question: Have you ever met a {creeper}?
  subquestion: |
    If you have met a {zombie pigman}, you
    have almost certainly met a creeper.
  yesno: met_a_creeper
"terms-alternate": |-
  question: Have you ever met a {creeper}?
  subquestion: |
    If you have met a
    {zombie pigman|zombified pigman}, you
    have almost certainly met a creeper.
  yesno: met_a_creeper
"testage2": |-
  objects:
    - user: Individual
  ---
  question: |
    How old are you?
  fields:
    - Age in years: user.age
      datatype: number
  ---
  mandatory: True
  code: |
    need(user.age)
  ---
  mandatory: True
  question: |
    You are ${ user.age_in_years() } years old.
"testdalist": |-
  objects:
    - recipient: DAList
    - trustee: Individual
    - beneficiary: Individual
    - grantor: Individual
  ---
  mandatory: True
  code: |
    recipient.clear()
    recipient.append(trustee)
    recipient.append(beneficiary)
    recipient.append(grantor)
    recipient.appendObject(Individual)
    recipient.appendObject(Individual)
    recipient.gathered = True
  ---
  mandatory: True
  question: The recipients
  subquestion: |
    % for person in recipient:
    ${ person } is a recipient.
    % endfor
  ---
  generic object: Individual
  question: |
    What is the name of the ${ x.object_name() }?
  fields:
    - First Name: x.name.first
    - Last Name: x.name.last
  ---
  generic object: Individual
  question: |
    The ${ ordinal(i) } ${ x.object_name() } must have a name.  What is it?
  fields:
    - First Name: x[i].name.first
    - Last Name: x[i].name.last
"text-box-field": |-
  question: |
    Tell me the story of your life.
  fields:
    - Life Story: target_variable
      input type: area
"text-box-field-rows": |-
  question: |
    Tell me the story of your life.
  fields:
    - Life Story: target_variable
      input type: area
      rows: 10
"text-default": |-
  question: |
    What are your favorite things to eat?
  subquestion: |
    Please be specific.
  fields:
    - Vegetable: target_variable
      default: eggplant
    - Fruit: other_target_variable
      default: |
        ${ greatest_fruit }
  ---
  code: |
    greatest_fruit = "apples"
"text-field": |-
  question: |
    What are your favorite things to eat?
  subquestion: |
    Please be specific.
  fields:
    - Vegetable: target_variable
    - Fruit: other_target_variable
"text-field-example": |-
  question: Tell me about yourself
  fields:
    - Favorite color: user_favorite_color
    - Description of your ideal vacation: user_ideal_vacation
      input type: area
      required: False
"text-help": |-
  question: |
    What are your favorite things to eat?
  subquestion: |
    If you don't know what a vegetable
    or fruit is, click the green text.
  fields:
    - Vegetable: target_variable
      help: |
        A plant.
    - Fruit: other_target_variable
      help: |
        The pulpy, edible seed vessels
        of certain plants.
"text-hint": |-
  question: |
    What are your favorite things to eat?
  subquestion: |
    Please be specific.
  fields:
    - Vegetable: target_variable
      hint: e.g., eggplant, turnips
    - Fruit: other_target_variable
      hint: e.g., apples, oranges
"time-field": |-
  question: |
    What time is your appointment?
  fields:
    - Time: target_variable
      datatype: time
"timezone-list": |-
  question: |
    What is your time zone?
  fields:
    - Time zone: user_timezone
      default: "America/New_York"
      code: |
        timezone_list()
"title-case": |-
  question: |
    Title of your book
  subquestion: |
    If your book is about
    ${ subject },
    its title should be
    "${ title_case(subject) }."
  sets: all_done
"today": |-
  question: |
    Today's date is ${ today() }.
  mandatory: True
"true-values": |-
  question: |
    Please tell me what you think.
  fields:
    - "Select the fruits you like": likes_fruit
      datatype: checkboxes
      choices:
        - Apples
        - Peaches
        - Pears
        - Plums
  ---
  mandatory: True
  question: |
    Summary of your answer
  subquestion: |
    You like
    ${ likes_fruit.true_values() }.
"twocol": |-
  objects:
    - user: Individual
"umbrella-interview": |-
  include:
    - interview-fruit.yml
    - interview-vegetables.yml
    - interview-flowers.yml
  ---
  question: |
    What interview would you like to do?
  field: interview_choice
  choices:
    - Fruit
    - Vegetables
    - Flowers
  ---
  mandatory: true
  code: |
    if interview_choice == 'Fruit':
      interview_fruit_done
    elif interview_choice == 'Vegetables':
      interview_vegetables_done
    elif interview_choice == 'Flowers':
      interview_flowers_done
"under": |-
  question: |
    What is the airspeed velocity of an
    unladen swallow?
  fields:
    - Velocity: swallow_velocity
  under: |
    Note: if you did not catch this
    movie reference, you need to
    improve your cultural literacy.
"update-terms": |-
  terms:
    - creeper: |
        A tall green creature that explodes if
        you get too close.
    - zombie pigman: |
        A harmless creature who carries a gold
        sword.
  ---
  mandatory: True
  code: |
    update_terms({'zombie pigman': 'A nether dweller', 'nether': 'The underworld'})
"upload": "question: |\n  Please upload a picture of yourself.\nfields:\n  - Picture:\
  \ user_picture\n    datatype: file\n---\nquestion: |\n  You're so adorable, Fran\xE7\
  ois!\nsubquestion: |\n  ${ user_picture }\nmandatory: True"
"upload-accept": |-
  question: |
    Please upload a JPEG or PNG of yourself.
  fields:
    - Picture: user_picture
      datatype: file
      accept: |
        "image/jpeg, image/png"
"upload-max-image-size": |-
  question: |
    Please upload a picture of yourself.
  fields:
    - Picture: user_picture
      datatype: file
      maximum image size: 100
  ---
  question: |
    You're so small!
  subquestion: |
    ${ user_picture }
  mandatory: True
"upload-max-image-size-features": |-
  features:
    maximum image size: 100
"upload-max-image-size-type": |-
  question: |
    Please upload a picture of yourself.
  fields:
    - Picture: user_picture
      datatype: file
      maximum image size: 100
      image upload type: jpeg
  ---
  question: |
    You're so small!
  subquestion: |
    ${ user_picture }
  mandatory: True
"upload-max-image-size-type-features": |-
  features:
    maximum image size: 100
    image upload type: jpeg
"upload-multiple": |-
  question: |
    Please upload pictures of yourself.
  fields:
    - Pictures: user_pictures
      datatype: files
  ---
  question: |
    Look at all those adorable photos!
  subquestion: |
    ${ user_pictures }
  mandatory: True
"upload-show": |-
  question: |
    You're so adorable!
  subquestion: |
    ${ user_picture.show() }
  mandatory: True
"upload-show-width": |-
  question: |
    You're so adorable!
  subquestion: |
    ${ user_picture.show(width='250px') }
  mandatory: True
"upload_audio": |-
  question: Please record some audio.
  fields:
    - MP3 file: user_audio_file
      datatype: file
  ---
  question: |
    Let's listen to what you recorded.
  audio: ${ user_audio_file }
  mandatory: True
"upload_audio_microphone": |-
  question: Please record some audio.
  fields:
    - MP3 file: user_audio_file
      datatype: microphone
  ---
  question: |
    Let's listen to what you recorded.
  audio: ${ user_audio_file }
  mandatory: True
"upload_images": |-
  question: Please take a picture.
  fields:
    - Picture: user_image
      datatype: camera
      maximum image size: 1200
  ---
  question: |
    Let's look at what you uploaded.
  subquestion: |
    ${ user_image }
  mandatory: True
"url-of": |-
  question: |
    Read more about this interview.
  subquestion: |
    Feel free to
    [read more](${ url_of('docassemble.base:hello.pdf') })
    about this interview before
    proceeding.
  field: ready_to_proceed
"use-question-library": |-
  include:
    - question-library.yml
  ---
  mandatory: True
  code: |
    if user_agrees_it_is_a_nice_evening and user_wants_to_go_to_dance:
      good_news
  ---
  mandatory: True
  question: |
    Say, I have to run.  Bye!
  ---
  event: good_news
  question: |
    That is splendid news!
"user-is-trustee": |-
  mandatory: True
  question: |
    % if user is trustee:
    As the trustee of the estate, you need to understand that it is
    your fiduciary duty to safeguard the assets of the estate.
    % elif user is grantee:
    You are the grantee, which means that ${ trustee } is required to
    safeguard the assets of the estate on your behalf.
    % else:
    ${ trustee } will safeguard the assets of the estate on behalf of
    ${ grantee }.
    % endif
"user-logged-in": |-
  mandatory: True
  code: |
    favorite_fruit
    ok_to_finish
    final_screen
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  code: |
    if not user_logged_in():
      require_login_screen
    ok_to_finish = True
  ---
  event: require_login_screen
  question: |
    You need to log in to finish this interview.
  buttons:
    - Log in: leave
      url: ${ url_of('login', next=interview_url()) }
"val": |-
  question: |
    What do you want for
    dessert<span id="the_dessert"></span>?
  fields:
    - Dessert: dessert
    - html: |
        <a href="#" id="show_me" class="btn btn-primary">Eat it</a>
  script: |
    <script>
      $("#show_me").click(function(){
        $("#the_dessert").html(" besides " + val('dessert'));
        return false;
      });
    </script>
"valid-formats": |-
  question: Your document is ready.
  attachment:
    - name: A hello world document
      filename: Hello_World_Document
      valid formats:
        - pdf
      description: |
        A document with a classic message
      content: |
        Hello, world!
  mandatory: True
"validation-error": |-
  question: Repeat after me.
  subquestion: |
    To continue, type "I solemnly swear
    that I am up to no good."
  fields:
    - no label: oath
      validate: |
        lambda y: validation_error("No, you typed it wrong.") if y != 'I solemnly swear that I am up to no good.' else True
  ---
  mandatory: True
  need: oath
  question: |
    You are now allowed to use
    the Marauder's Map.
"validation-messages": |-
  question: |
    What is your favorite fruit?
  fields:
    - "Favorite Fruit": favorite_fruit
      validation messages:
        required: |
          Come on, everyone has a favorite
          fruit.
    - "How many seeds does it have?": number_of_seeds
      datatype: integer
      max: 100
      validation messages:
        max: |
          No fruit has that many seeds!
        required: |
          I really need to know this.
"value": |-
  question: Summary
  subquestion: |
    Your favorite fruit is
    ${ value('favorite_fruit') }.
  mandatory: True
"variables_as_json": "mandatory: True\ncode: |\n  multi_user = True\n---\nevent: query_variables\n\
  code: |\n  variables_as_json()\n---\nmandatory: True\nquestion: |\n  You currently\
  \ have\n  ${ nice_number(number_of_pieces) }\n  ${ noun_plural('piece', number_of_pieces)\
  \ }\n  of\n  ${ noun_singular(favorite_fruit) }.\nsubquestion: |\n  Use\n  [this\
  \ link](${ interview_url_action('query_variables') })\n  to query the information\
  \ from\n  another application.\n\n  You can also change the \n  [fruit](${ url_action('favorite_fruit')\
  \ })\n  and the\n  [number of pieces](${ url_action('number_of_pieces') })."
"verbatim": |-
  question: |
    Provide some text.
  subquestion: |
    Try inserting Markdown or HTML characters.
  fields:
    no label: user_input
    input type: area
  ---
  mandatory: True
  question: |
    This content should be devoid
    of formatting.
  subquestion: |
    ${ verbatim(user_input) }
  attachment:
    content: |
      ${ verbatim(user_input) }
"video": |-
  field: ready_to_proceed
  question: |
    Welcome to the interview.
  subquestion: |
    Please watch this introductory video
    before proceeding with the interview.
  video: |
    [YOUTUBE 9bZkp7q19f0]
"video-static": |-
  question: |
    Are you traveling to New York City?
  yesno: going_to_nyc
  video: nyc_tourism.mp4
"vimeo": |-
  field: ready_to_proceed
  question: |
    Welcome to the interview.
  subquestion: |
    Please watch this introductory video
    before proceeding with the interview.
  video: |
    [VIMEO 96044910]
"with-mandatory": |-
  question: |
    How are you doing?
  field: how_doing
  choices:
    - Fine
    - Ill
  ---
  question: |
    What is your favorite color?
  fields:
    Color: favorite_color
  ---
  mandatory: True
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    % if how_doing == 'Fine':
    I am glad you are doing well.
    % else:
    I am sorry you aren't feeling 100%.
    % endif
"with-mandatory-tweak-a": |-
  question: |
    How are you doing?
  field: how_doing
  choices:
    - Fine
    - Ill
  ---
  question: |
    What is your favorite color?
  fields:
    Color: favorite_color
  ---
  mandatory: True
  need:
    - how_doing
    - favorite_color
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    % if how_doing == 'Fine':
    I am glad you are doing well.
    % else:
    I am sorry you aren't feeling 100%.
    % endif
"with-mandatory-tweak-b": |-
  mandatory: True
  code: |
    how_doing
    final_screen
  ---
  question: |
    How are you doing?
  field: how_doing
  choices:
    - Fine
    - Ill
  ---
  question: |
    What is your favorite color?
  fields:
    Color: favorite_color
  ---
  event: final_screen
  question: |
    Your favorite color is
    ${ favorite_color }.
  subquestion: |
    % if how_doing == 'Fine':
    I am glad you are doing well.
    % else:
    I am sorry you aren't feeling 100%.
    % endif
"yaml-markdown-python": |-
  question: |
    What is your favorite number?
  fields:
    Favorite number: best_number
    datatype: number
  ---
  question: |
    % if best_number == 42:
    That's **my** favorite number!
    % else:
    What a _lousy_ favorite number.
    % endif
  mandatory: True
"yesno": |-
  question: |
    Are you at least 18 years of age?
  yesno: over_eighteen
"yesno-custom": |-
  question: |
    Are you satisfied?
  field: user_is_satisfied
  buttons:
    - "You bet": True
    - "No way": False
"yesnomaybe": |-
  question: |
    Is Topeka the capital of Kansas?
  yesnomaybe: topeka_is_capital_of_kansas
  ---
  question: |
    % if topeka_is_capital_of_kansas:
    You were right that Topeka is the capital of Kansas.
    % elif topeka_is_capital_of_kansas is None:
    You should know your state capitals!
    % else:
    Actually, Topeka is the capital of Kansas.
    % endif
  mandatory: True
"zip-file": |-
  objects:
    - coins_picture: DAStaticFile.using(filename='coins36.png')
  ---
  question: |
    Please upload a picture of yourself.
  fields:
    - Picture: user_picture
      datatype: file
  ---
  mandatory: True
  question: |
    Here is your ZIP file.
  subquestion: |
    ${ zip_file(user_picture, {'assets': [coins_picture, 'cow.jpg'] }, filename="Image files.zip") }

"ab-test": |-
  mandatory: true
  code: |
    import random
    if random.random() < 0.5:
      url = interview_url(i="docassemble.demo:data/questions/questions.yml")
    else:
      url = interview_url(i="docassemble.demo:data/questions/examples/redact-docx.yml")
    command('exit', url=url)
"advocate": |-
  objects:
    - child: Individual
"ajax": "code: |\n  favorite_fruit = \"apples\"\n---\nid: guess favorite fruit\nmandatory:\
  \ True\nquestion: |\n  Guess my favorite fruit.\nfields:\n  - Your guess: guess\n\
  \  - note: |\n      ${ action_button_html(\"#\", id_tag=\"getFavoriteFruit\", label=\"\
  Verify\", size=\"md\", color=\"primary\") }\nscript: |\n  <script>\n    $(document).on('daPageLoad',\
  \ function(){\n      // hide the Continue button\n      // and disable the form\
  \ for\n      // this question\n      if ($(\".question-guess-favorite-fruit\").length\
  \ > 0){\n        $(\".da-field-buttons\").remove();\n        $(\"#daform\").off().on('submit',\
  \ function(event){\n          event.preventDefault();\n          return false;\n\
  \        });\n      };\n    });\n    $(\"#getFavoriteFruit\").click(function(event){\n\
  \      event.preventDefault();\n      if (!/\\S/.test(val(\"guess\"))){\n      \
  \  flash(\"You need to guess something!\", \"danger\", true);\n        return false;\n\
  \      }\n      flash(\"Verifying . . .\", \"info\", true);\n      action_call(\"\
  verify_favorite_fruit\", {\"fruit\": val(\"guess\")}, function(data){\n        if\
  \ (data.success){\n          flash(\"You're right!\", \"info\", true);\n       \
  \ }\n        else {\n          flash(\"You're totally wrong.  I actually like \"\
  \ + data.fruit + \".\", \"danger\", true);\n        }\n      });\n      return false;\n\
  \    });\n  </script>\n---\nevent: verify_favorite_fruit\ncode: |\n  # No need to\
  \ save the interview\n  # answers after this action.\n  set_save_status('ignore')\n\
  \  \n  # Pretend we have to think\n  # about the answer.\n  import time\n  time.sleep(1)\n\
  \  \n  if favorite_fruit.lower() == action_argument('fruit').lower():\n    success\
  \ = True\n  else:\n    success = False\n  json_response(dict(success=success, fruit=favorite_fruit))"
"background-tail": "objects:\n  r: DARedis\n---\nmandatory: True\ncode: |\n  log_key\
  \ = r.key('log:' + user_info().session)\n  messages = list()\n---\nmandatory: True\n\
  code: |\n  if the_task.ready():\n    last_messages_retrieved\n    final_screen\n\
  \  else:\n    waiting_screen\n---\ncode: |\n  the_task = background_action('bg_task',\
  \ 'refresh', additional=value_to_add)\n---\nquestion: |\n  How much shall I add\
  \ to 553?\nfields:\n  - Number: value_to_add\n    datatype: integer\n---\nevent:\
  \ bg_task\ncode: |\n  import time\n  r.rpush(log_key, 'Waking up.')\n  time.sleep(10)\n\
  \  r.rpush(log_key, 'Ok, I am awake now.')\n  value = 553 + action_argument('additional')\n\
  \  time.sleep(17)\n  r.rpush(log_key, 'I did the hard work.')\n  time.sleep(14)\n\
  \  r.rpush(log_key, 'Ok, I am done.')\n  background_response_action('bg_resp', ans=value)\n\
  ---\nevent: bg_resp\ncode: |\n  answer = action_argument('ans')\n  background_response()\n\
  ---\nevent: waiting_screen\nquestion: |\n  Your process is running.\nsubquestion:\
  \ |\n  #### Message log\n  \n  <ul class=\"list-group\" id=\"logMessages\">\n  </ul>\n\
  check in: get_log\n---\nevent: get_log\ncode: |\n  import json\n  new_messages =\
  \ ''\n  while True:\n    message = r.lpop(log_key)\n    if message:\n      messages.append(message.decode())\n\
  \      new_messages += '<li class=\"list-group-item\">' + message.decode() + '</li>'\n\
  \      continue\n    break\n  background_response('$(\"#logMessages\").append('\
  \ + json.dumps(new_messages) + ')', 'javascript')\n---\ncode: |\n  while True:\n\
  \    message = r.lpop(log_key)\n    if message:\n      messages.append(message.decode())\n\
  \      continue\n    break\n  last_messages_retrieved = True\n---\nevent: final_screen\n\
  question: |\n  The answer is ${ answer }.\nsubquestion: |\n  #### Message log\n\
  \  \n  <ul class=\"list-group\" id=\"logMessages\">\n  % for message in messages:\n\
  \    <li class=\"list-group-item\">${ message }</li>\n  % endfor\n  </ul>"
"bates-number": |-
  question: |
    Upload a file
  fields:
    - File: the_file
      datatype: file
  ---
  mandatory: True
  code: |
    the_file.bates_number(prefix='FRUIT')
  ---
  mandatory: True
  question: |
    Your file
  subquestion: |
    ${ the_file }
"bootstrap-theme": |-
  features:
    bootstrap theme: lumen.min.css
"clauses": "objects:\n  - markdown_clause: DADict\n  - edited_clause: DADict\n---\n\
  code: |\n  markdown_clause[i] = assemble_docx('data/templates/contract.docx', fields={'clause':\
  \ i}, output_format='md', return_content=True)\n---\ncode: |\n  # This variable\
  \ is set to None \n  # so that the .docx file does \n  # not assemble a single clause\n\
  \  # when it is assembled at the\n  # end.\n  clause = None\n---\nquestion: |\n\
  \  A contract\nsubquestion: |\n  You are agreeing to a contract \n  with me.  Please\
  \ continue.\ncontinue button field: welcome_screen\n---\nquestion: The clauses\n\
  subquestion: |\n  The firstborn clause is:\n  \n  ${ quote_paragraphs(markdown_clause['firstborn'])\
  \ }\n\n  The counterparts clause is:\n  \n  ${ quote_paragraphs(markdown_clause['counterparts'])\
  \ }\ncontinue button field: clauses_shown\n---\nquestion: |\n  Make any necessary\
  \ changes to the ${ i } clause.\nfields:\n  - no label: edited_clause[i]\n    default:\
  \ ${ markdown_clause[i] }\n    input type: area\n---\nevent: final_screen\nquestion:\
  \ |\n  Here is the contract.\nattachment:\n  name: Contract\n  docx template file:\
  \ contract.docx"
"collate": "objects:\n  - favorite: DADict.using(object_type=DAObject, keys=['fruit',\
  \ 'vegetable', 'fungus'], gathered=True)\n  - cover_page: DAList\n---\nquestion:\
  \ |\n  What is your favorite ${ i }?\nfields:\n  - \"${ capitalize(i) }\": favorite[i].variety\n\
  \  - \"Do you have documentation of this?\": favorite[i].has_documentation\n   \
  \ datatype: yesnoradio\n  - \"Attach documentation\": favorite[i].documentation\n\
  \    datatype: file\n    show if: favorite[i].has_documentation\n---\nattachment:\n\
  \  variable name: summary_document\n  content: |\n    [BOLDCENTER] Your Favorite\
  \ Things\n    \n    % for key, val in favorite.items():\n    Your favorite ${ key\
  \ } is\n    ${ val.variety }.\n    % if val.has_documentation:\n    See Exhibit\n\
  \    ${ alpha(val.documentation_reference) }.\n    % endif\n    \n    % endfor\n\
  ---\nattachment:\n  variable name: cover_page[i]\n  docx template file: exhibit_insert.docx\n\
  ---\nmandatory: True\ncode: |\n  information_gathered\n  bundle\n  final_screen\n\
  ---\ncode: |\n  indexno = 0\n  for item in favorite.values():\n    item.variety\n\
  \    if item.has_documentation:\n      item.documentation\n      item.documentation_reference\
  \ = indexno\n      indexno += 1\n  information_gathered = True\n---\ncode: |\n \
  \ document_list = list()\n  document_list.append(summary_document)\n  for item in\
  \ favorite.values():\n    if item.has_documentation:\n      document_list.append(cover_page[item.documentation_reference])\n\
  \      document_list.append(item.documentation)\n  bundle = pdf_concatenate(document_list,\
  \ filename=\"Favorites.pdf\")\n---\nevent: final_screen\nquestion: |\n  Your documents\n\
  subquestion: |\n  ${ action_button_html(bundle.url_for(), color='link', label='Download\
  \ bundle', icon='file-pdf') }"
"companies": |-
  modules:
    - .companydb
"complete-attribute-method": |-
  modules:
    - .fishlist
  ---
  objects:
    - fishes: FishList
  ---
  question: |
    Are there any fish?
  yesno: fishes.there_are_any
  ---
  question: |
    Are there any more fish?
  yesno: fishes.there_is_another
  ---
  question: |
    What is the ${ ordinal(i) } fish's common name?
  fields:
    - Name: fishes[i].common_name
  ---
  question: |
    Tell me more about the ${ fishes[i] }.
  fields:
    - Species name: fishes[i].species
    - Number of scales: fishes[i].scales
      datatype: integer
  ---
  mandatory: True
  question: |
    Thank you for telling me about ${ fishes }.
"context": |-
  variable name: fruits
  use objects: True
  data:
    - question: Apple
      document: red fruit
    - question: Orange
      document: fruit that rhymes with nothing
    - question: Peach
      document: juicy fruit
      docx: peachy peach
      pandoc: very juicy fruit
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: object
      choices: fruits
"context-code": |-
  variable name: fruits
  use objects: True
  data from code:
    - question: |
        "Apple"
      document: |
        "red fruit"
    - question: |
        "Orange"
      document: |
        "fruit that rhymes " + "with nothing"
    - question: |
        "Peach"
      document: |
        "juicy fruit"
      docx: |
        "peachy peach"
      pandoc: |
        "very juicy " + "fruit"
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: object
      choices: fruits
"context-manual": |-
  objects:
    - fruits: DAList.using(auto_gather=False)
  ---
  code: |
    fruits.clear()
    fruits.appendObject(DAContext, 'Apple', 'red fruit')
    fruits.appendObject(DAContext, 'Orange', 'fruit that rhymes with nothing')
    fruits.appendObject(DAContext, question='Peach', document='juicy fruit', docx='peachy peach', pandoc='very juicy fruit')
    fruits.gathered = True
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
      datatype: object
      choices: fruits
"courtfile": "objects:\n  - user: Individual\n  - court_filing_unit: DAEmailRecipient.using(name='Prothonotary\
  \ of the Court', address='jpyle@docassemble.org')\n---\nquestion: |\n  Please provide\
  \ your name and\n  e-mail address.\nfields:\n  - First Name: user.name.first\n \
  \ - Last Name: user.name.last\n  - E-mail address: user.email\n    datatype: email\n\
  ---\nquestion: |\n  What is your favorite fruit?\nfields:\n  - Fruit: user.favorite_fruit\n\
  ---\nattachment:\n  name: |\n    Praecipe to Declare Favorite Fruit\n  filename:\
  \ Praecipe_Favorite_Fruit_${ space_to_underscore(user) }\n  content: |\n    [BOLDCENTER]\
  \ Praecipe to Declare\n    Favorite Fruit\n\n    I, ${ user }, on ${ today() },\
  \ hereby\n    inform all interested parties that my\n    favorite fruit is\n   \
  \ ${ user.favorite_fruit }.\n  variable name: court_document\n---\nmandatory: True\n\
  question: |\n  Your Praecipe to Declare Favorite Fruit\nsubquestion: |\n  % if task_performed('filed_in_court'):\n\
  \  You have filed your **Praecipe to Declare\n  Favorite Fruit** in court.\n  \n\
  \  Follow up with the court if you have\n  any questions about the legal process.\n\
  \  % else:\n  When you are ready to file your Praecipe\n  to Declare Favorite Fruit\
  \ in court, press\n  this button.\n  \n  ${ action_button_html(url_action('filing_process'),\n\
  \                        label='Submit this to the court',\n                   \
  \     size='md',\n                        color='warning') }\n\n  Until then, take\
  \ your time and look\n  over the document to make sure you\n  really want to file\
  \ it.\n  % endif\nattachment code: court_document\n---\nevent: filing_process\n\
  code: |\n  if task_performed('filed_in_court'):\n    # This is unlikely to happen\
  \ but\n    # still worth protecting against.\n    log('You have already filed the\
  \ document.', 'danger')\n  else:\n    force_ask('wants_to_file',\n             \
  \ 'email_address_confirmed',\n              'really_wants_to_file',\n          \
  \    {'recompute': ['document_filed']},\n              'end_of_filing_process')\n\
  ---\nquestion: |\n  Are you completely and totally\n  sure you want to file your\
  \ Praecipe\n  to Declare Favorite Fruit?\nsubquestion: |\n  Once you file your Praecipe,\
  \ you\n  can't take it back.\nfield: wants_to_file\nbuttons:\n  - \"Yes, I am sure\
  \ I want to file.\": True\n  - \"On second thought, I am not ready\": False\n---\n\
  if: wants_to_file\nquestion: |\n  What is your e-mail address?\nsubquestion: |\n\
  \  I am going to e-mail your document\n  to the court.  I need to cc you on\n  the\
  \ e-mail so you have it for your\n  records.\n\n  Please confirm that this is your\n\
  \  e-mail address.\nfields:\n  - E-mail: user.email\ncontinue button field: email_address_confirmed\n\
  ---\nif: wants_to_file\nquestion: |\n  Are you completely and totally sure\n  beyond\
  \ a shadow of a doubt that you\n  wish to file your Praecipe in court?\nsubquestion:\
  \ |\n  You can [take one last look at it]\n  before submitting.\n\n  [take one last\
  \ look at it]: ${ court_document.pdf.url_for() }\nfield: really_wants_to_file\n\
  buttons:\n  - \"Submit the document now\": True\n  - \"Get me out of here!\": False\n\
  ---\ntemplate: filing_template\nsubject: |\n  E-filing: Praecipe to Declare\n  Favorite\
  \ Fruit on behalf of\n  ${ user }\ncontent: |\n  To the Prothonotary:\n\n  Please\
  \ accept the attached\n  Praecipe to Declare Favorite Fruit,\n  which I am filing\
  \ on behalf of\n  ${ user }.\n\n  Thank you,\n\n  A local docassemble server\n\n\
  \  Cc: ${ user } via e-mail at ${ user.email }\n---\ncode: |\n  if wants_to_file\
  \ and really_wants_to_file:\n    document_filed = send_email(to=court_filing_unit,\n\
  \                                cc=user,\n                                template=filing_template,\n\
  \                                attachments=court_document,\n                 \
  \               task='filed_in_court')\n    if document_filed:\n      prevent_going_back()\n\
  \    else:\n      log('There was a problem with the e-mail system.  Your document\
  \ was not filed.', 'danger')\n  else:\n    document_filed = False\n---\nif: wants_to_file\
  \ and really_wants_to_file and document_filed\nquestion: |\n  Congratulations!\n\
  subquestion: |\n  Your document is now on its way to the\n  court.\ncontinue button\
  \ field: end_of_filing_process"
"custody": |-
  objects:
    - has_standing: DADict.using(auto_gather=False)
"customdate": |-
  features:
    javascript: datereplace.js
  ---
  question: |
    When were you born?
  fields:
    - Date of birth: date_of_birth
      datatype: date
"demo-multi-sign": |-
  include:
    - docassemble.demo:data/questions/sign.yml
  ---
  objects:
    - user: Person
    - witnesses: DAList.using(object_type=Person, there_are_any=True)
    - sign: SigningProcess.using(documents='statement')
  ---
  mandatory: True
  code: |
    user.name.text
    user.favorite_fruit
    witnesses.gather()
    sign.out_for_signature()
    final_screen
  ---
  attachment:
    name: |
      ${ user.possessive('Declaration of Favorite Fruit') }
    filename: |
      fruit_declaration_${ space_to_underscore(user) }
    docx template file: declaration_of_favorite_fruit.docx
    variable name: statement
  ---
  reload: 60
  event: final_screen
  question: |
    % if sign.all_signatures_in():
    Your document is ready.
    % else:
    Your document is out for signature.
    % endif
  subquestion: |
    % if not sign.all_signatures_in():
    You will receive an e-mail
    when your document has been
    signed by all parties.
    % endif
  attachment code: |
    sign.list_of_documents(refresh=True)
"demo-multi-sign-2": |-
  objects:
    - user: Person
    - witnesses: DAList.using(object_type=Person, there_are_any=True)
    - sign: SigningProcess.using(documents=['statement', 'certificate_of_service'])
"demo-with-basic-questions": |-
  include:
    - docassemble.demo:data/questions/demo-basic-questions.yml
  comment: |
    The "basic questions" loaded by this include
    block allow interview to gather information
    about names, e-mail addresses, and addresses
    in a variety of ways without specifying any
    question blocks.  The "basic questions" are
    configurable using object attributes.
  ---
  objects:
    - client: Individual
    - advocate: Individual
    - antagonist: Individual
  ---
  initial: True
  code: |
    set_info(user=client)
  comment: |
    Since this isn't a multi-user interview,
    setting up the user is just a single call to
    set_info().  The generic "basic questions"
    use the first person when the generic object
    instance is the user.
  ---
  code: |
    client.ask_email_with_name = True
  comment: |
    By default, the question that asks for an
    individual's name does not also ask for the
    individual's e-mail address, but if you set
    the ask_email_with_name attribute to True, an
    additional field will be included.
  ---
  code: |
    client.ask_about_homelessness = True
  comment: |
    There are multiple variations of the question
    that asks for an individual's address.  One
    variation allows the user to check a box
    stating that the individual is homeless, and
    if so, only the city and state are gathered.
    We want to ask the question this way when we
    ask for the client's address.
  ---
  code: |
    client.email_required = False
  comment: |
    When we ask for the client's e-mail address,
    we want to let the user leave the field
    blank.
  ---
  code: |
    advocate.ask_email_with_name = True
  comment: |
    When we ask for the advocate's name, we also
    want to ask for the advocate's e-mail
    address.
  ---
  code: |
    antagonist.name.default_first = "Brutus"
    antagonist.name.default_last = "Morpheus"
  comment: |
    By default, when the name of a user is asked,
    the field is blank if the name has not been
    defined yet.  The "basic questions" allow us
    to specify a default value.
  ---
  comment: |
    It is not strictly necessary in this
    interview to specify the above rules as
    separate code blocks, but it is good practice
    to do so because in interviews where such
    values may be pre-set or change as a result
    of user input, cramming the rules into a
    single rule may cause unintended side
    effects, such as overwriting the value of
    client.email_required just because the
    definition of advocate.ask_email_with_name
    was needed.
  ---
  mandatory: True
  code: |
    client.name.uses_parts = False
  comment: |
    We want to ask for the client's name in a
    single field.  This is useful because the
    client might have a name that does not fit
    the standard "first name, last name"
    structure.

    This block is mandatory because
    .name.uses_parts is defined automatically by
    the class definition; thus to override it we
    need to force this code to run.  The other
    settings in the previous block are undefined
    by default and their definitions will be
    sought out, so we can use non-mandatory
    blocks to provide their definitions.
  ---
  template: client.description
  content: petitioner
  comment: |
    This is a very small template, but it is
    useful to use a template because template
    content can be translated using the
    spreadsheet translation feature.
  ---
  template: advocate.description
  content: the lawyer
  ---
  template: advocate.ask_address_template
  subject: |
    How can we send mail to the lawyer's office?
  content: |
    Make sure you get this right.
  comment: |
    We want to ask the address question a little
    differently when when the object is the
    advocate.  The subject of the template
    corresponds to the "question" and the content
    corresponds to the "subquestion."
  ---
  mandatory: True
  question: |
    Summary
  subquestion: |
    % for person in (client, advocate, antagonist):
    ${ person.description } is:

    ${ person.name.full() } [BR]
    % if person.ask_about_homelessness and person.address.homeless:
    ${ person.address.city }, ${ person.address.state }
    % else:
    ${ person.address.block() }
    % endif
    % if person.email:
    [BR] ${ person.email }
    % endif

    % endfor
"discovery": |-
  template: discovery['rent records']
  content: |
    All records of any type whatsoever relating to the unit rented by ${
    client }.
"docxproperties": |-
  attachment:
    variable name: assembled_file
    docx template file: docx-with-metadata.docx
    valid formats:
      - docx
  ---
  mandatory: True
  code: |
    assembled_file
    user_name
    from docx import Document
    docx = Document(assembled_file.path())
    docx.core_properties.author = user_name
    docx.save(assembled_file.path())
    del docx
  ---
  mandatory: True
  question: Your document
  attachment code: assembled_file
  ---
  question: |
    What planet are you from?
  fields:
    - Planet: planet
  ---
  question: |
    What is your name?
  fields:
    - Name: user_name
"explain": |-
  modules:
    - .somefuncs
  ---
  mandatory: True
  code: |
    clear_explanations()
    if favorite_fruit in ('apple', 'orange'):
      explain("You said your favorite fruit was " + favorite_fruit + ".")
      if wrong_vegetable(favorite_vegetable):
        explain("Because your favorite vegetable is disgusting, you are not eligible for the space program.")
        eligible = False
      else:
        explain("Since you like apple or orange, and turnips are not your favorite, you are mentally fit to go to the moon.")
        eligible = True
    else:
      explain("Since you do not like apple or orange, you are not eligible for the space program.")
      eligible = False
    final_screen
  ---
  event: final_screen
  question: |
    % if eligible:
    You will be joining the Apollo mission.
    % else:
    You are not allowed to enter the space program.
    % endif
  subquestion: |
    Reasoning:

    % for reason in explanation():
    * ${ reason }
    % endfor
"fish-example": "code: |\n  fishes = objects_from_file(\"fishes.yml\")\n---\nmandatory:\
  \ true\nquestion: |\n  Fish summary\nsubquestion: |\n  % for fish in fishes:\n \
  \ ${ fish } has\n  ${ fish.scales } scales.\n  \n  % endfor"
"flags": |-
  image sets:
    freepik:
      attribution: |
        Icons made by <a href="https://www.freepik.com/?__hstc=57440181.1fcb7629de44ad5220609e6254ecdbbf.1559232254037.1559232254037.1559232917862.2&__hssc=57440181.3.1559232917862&__hsfp=2541736765" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/"                title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/"              title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a></div>
      images:
        flag-en: united-kingdom.svg
        flag-es: mexico.svg
        flag-de: germany.svg
  ---
  question: Pick a language
  field: user_language
  buttons:
    - English: en
      image: flag-en
    - Spanish: es
      image: flag-es
    - German: de
      image: flag-de
"food-with-sig": "include:\n  - docassemble.demo:data/questions/examples/signature-diversion.yml\n\
  ---\nmandatory: True\nquestion: |\n  Here is your document.\nattachment:\n  name:\
  \ Summary of food\n  filename: food\n  content: |\n    [BOLDCENTER] Food Attestation\n\
  \n    My name is ${ user }.\n    \n    My favorite fruit is\n    ${ favorite_fruit\
  \ }.\n\n    My favorite vegetable is\n    ${ favorite_vegetable }.\n\n    I solemnly\
  \ swear that the\n    foregoing is true and\n    correct.\n\n    ${ user.signature.show(width=\"\
  2in\") }\n\n    ${ user }"
"fruits-database": |-
  modules:
    - .fruit_database
  ---
  question: |
    Pick a fruit.
  fields:
    - Fruit: favorite_fruit
      code: get_fruit_names()
  ---
  mandatory: True
  question: |
    Your favorite fruit,
    ${ favorite_fruit },
    is
    ${ fruit_info(favorite_fruit)['color'] }
    and has
    ${ fruit_info(favorite_fruit)['seeds'] }
    seeds.
"generic-document": |-
  objects:
    - plaintiff: Individual
    - defendant: Individual
  ---
  code: |
    plaintiff.opponent = defendant
    defendant.opponent = plaintiff
  ---
  code: |
    title = "Summary of case"
  ---
  question: |
    What is the name of the plaintiff?
  fields:
    - Name: plaintiff.name.first
  ---
  question: |
    What is the name of the defendant?
  fields:
    - Name: defendant.name.first
  ---
  generic object: Individual
  attachment:
    variable name: x.document
    name: Document for ${ x.name.first }
    docx template file: generic-document.docx
  ---
  mandatory: True
  question: |
    Here are your documents.
  attachment code: |
    [plaintiff.document, defendant.document]
"get-time": |-
  modules:
    - docassemble.demo.gettime
  ---
  mandatory: True
  question: |
    The time
  subquestion: |
    According to the World Clock API, the
    current time in the Eastern time zone is
    ${ get_time() }.
"google-drive": |-
  modules:
    - .google_drive
"google-sheet": |-
  modules:
    - .google_sheets
  ---
  mandatory: True
  code: |
    data_stored_in_google_sheet
    final_screen_shown
  ---
  code: |
    append_to_sheet('Fruits and veggies', [user_name, favorite_fruit, favorite_vegetable])
    data_stored_in_google_sheet = True
  ---
  event: final_screen_shown
  question: |
    Thank you for your input!
  subquestion: |
    % if favorite_vegetable in ('turnips', 'brussel sprouts'):
    Although I disagree with your
    vegetable preferences!
    % endif
  ---
  question: |
    What is your first name?
  subquestion: |
    Note: This interview will store
    your answers in a public Google
    Sheet.
  fields:
    - Name: user_name
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  question: |
    What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
"google-sheet-2": |-
  modules:
    - .google_sheets
  ---
  objects:
    - court: Person
  ---
  mandatory: True
  code: |
    court_populated
    final_screen
  ---
  code: |
    need(county)
    # https://docs.google.com/spreadsheets/d/1SyLpF7ioE-PCLz3Pbll0AF0MVWR8ZZ_tyOvG7CczsAI/edit?usp=sharing
    for row in read_sheet('court_list'):
      if row['County'] == county:
        court.name.text = row['Name']
        court.address.address = row['Address']
        court.address.city = row['City']
        court.address.state = row['State']
        court.address.zip = row['Zip']
        court.address.county = row['County']
    court_populated = True
  ---
  question: |
    What is your county?
  field: county
  dropdown:
    - Adams County
    - Allen County
    - Beaver County
  ---
  event: final_screen
  question: |
    Your local court
  subquestion: |
    You need to go to the ${ court },
    which is located at:

    ${ court.address.block() }
"google-sheet-3": "modules:\n  - docassemble.demo.google_sheets\n---\nobjects:\n \
  \ - court: DAList.using(object_type=Person, auto_gather=False)\n---\ncode: |\n \
  \ court.clear()\n  for row in read_sheet('court_list'):\n    item = court.appendObject()\n\
  \    item.name.text = row['Name']\n    item.address.address = row['Address']\n \
  \   item.address.city = row['City']\n    item.address.state = row['State']\n   \
  \ item.address.zip = row['Zip']\n    item.address.county = row['County']\n    del\
  \ item\n  court.gathered = True\n---\nattachment:\n  name: |\n    ${ court[i].address.county\
  \ } court\n  filename: |\n    ${ space_to_underscore(court[i].address.county) }_court_info\n\
  \  variable name: court[i].info_sheet\n  content: |\n    [BOLDCENTER] ${ court[i]\
  \ }\n    \n    [NOINDENT] Your friendly court for\n    ${ court[i].address.county\
  \ }\n    is located at:\n\n    ${ court[i].address_block() }\n---\nmandatory: True\n\
  question: |\n  Court information\nsubquestion: |\n  Here are information sheets\n\
  \  for each court in your state.\nattachment code: |\n  [item.info_sheet for item\
  \ in court]"
"harry-potter-or-heidegger": |-
  mandatory: True
  code: |
    the_file.set_attributes(persistent=True)
  ---
  mandatory: True
  code: |
    the_task
    if not the_task.ready():
      waiting_screen
    ml = SimpleTextMachineLearner('hp_h')
    ml.save_for_classification(phrase, info=the_file)
    predictions = ml.predict(phrase, probabilities=True)
  ---
  question: |
    Upload a page
  subquestion: |
    Please upload or take a
    picture of a page from Harry Potter
    or Heidegger.
  fields:
    - no label: the_file
      datatype: file
  ---
  code: |
    the_task = background_action('ocr_start', None)
  ---
  event: ocr_start
  code: |
    background_response_action('ocr_finish', text=ocr_file(the_file))
  ---
  event: ocr_finish
  code: |
    phrase = action_argument('text')
    background_response()
  ---
  event: waiting_screen
  reload: 5
  question: |
    Please wait.
  ---
  mandatory: True
  question: |
    Your text
  subquestion: |
    % if len(predictions):
    Your document appears to be
    from ${ predictions[0][0] }
    (${ "%.0f%%" % (predictions[0][1] * 100.0) } sure).
    % else:
    There is not enough training data
    to make a determination yet.
    % endif
  buttons:
    - Restart: restart
"hook-on-gather": |-
  modules:
    .income
  ---
  objects:
    - income: |
        IncomeDict.using(
          object_type=DAObject,
          keys=['employment', 'benefits', 'interest'],
          complete_attribute='complete',
          there_is_another=False)
"interview_in_interview": "objects:\n  - user_global: Individual\n  - user: Individual\n\
  \  - endpoint: DADict\n---\nmandatory: True\ncode: |\n  while True:\n    del endpoint[user.goal]\n\
  \    del user\n---\nquestion: |\n  What interview would you like to complete?\n\
  field: user.goal\nchoices:\n  - Fruit quiz: fruit\n  - Vegetable quiz: vegetable\n\
  \  - Legume quiz: legume\n---\ncode: |\n  user.name.first = user_global.name.first\n\
  \  user.name.last = user_global.name.last\n---\ncode: |\n  user.age_category = user_global.age_category\n\
  ---\nquestion: |\n  What is your name?\nfields:\n  - First name: user_global.name.first\n\
  \  - Last name: user_global.name.last\n---\nquestion: |\n  How old are you, ${ user\
  \ }?\nfield: user_global.age_category\nchoices:\n  - \"Spring chicken\"\n  - \"\
  The music I like isn't cool anymore\"\n  - \"Wiser than most\"\n---\nquestion: |\n\
  \  Fruit quiz results\nsubquestion: |\n  Your favorite fruit is\n  ${ user.favorite_fruit\
  \ }.\nfield: endpoint['fruit']\ncontinue button label: Try again\n---\nquestion:\
  \ |\n  Vegetable quiz results\nsubquestion: |\n  % if user.age_category == 'Spring\
  \ chicken':\n  You are still growing, ${ user }, so you should eat lots of vegetables.\n\
  \  % endif\n  \n  Your favorite vegetable is\n  ${ user.favorite_vegetable }.\n\
  field: endpoint['vegetable']\ncontinue button label: Try again\n---\nquestion: |\n\
  \  Legume quiz results\nsubquestion: |\n  % if user.knows_legumes:\n  ${ user }\
  \ definitely knows what a legume is.\n  % else:\n  You don't know what a legume\
  \ is.\n  % endif\n  \n  % if user.age_category == 'Spring chicken':\n  You are still\
  \ growing, ${ user }, so you should eat lots of legumes.\n  % endif\n  \n  Your\
  \ favorite legume is\n  ${ user.favorite_legume }.\n\nfield: endpoint['legume']\n\
  continue button label: Try again\n---\nquestion: |\n  What is your favorite fruit?\n\
  fields:\n  Favorite fruit: user.favorite_fruit\n---\nquestion: |\n  What is your\
  \ favorite vegetable?\nfields:\n  Favorite vegetable: user.favorite_vegetable\n\
  ---\nquestion: |\n  What is your favorite legume?\nfields:\n  Favorite legume: user.favorite_legume\n\
  ---\nquestion: |\n  Which of these are legumes?\nfields:\n  - no label: user.legume_picks\n\
  \    datatype: checkboxes\n    choices:\n      - Peas\n      - Lentils\n      -\
  \ Mango\n      - String beans\n      - Potato\n      - Peanut\n---\ncode: |\n  if\
  \ user.legume_picks['Peas'] \\\n     and user.legume_picks['Lentils'] \\\n     and\
  \ user.legume_picks['String beans'] \\\n     and user.legume_picks['Peanut'] \\\n\
  \     and not user.legume_picks['Mango'] \\\n     and not user.legume_picks['Potato']:\n\
  \    user.knows_legumes = True\n  else:\n    user.knows_legumes = False"
"jinjayaml": |-
  # use jinja
  {% include "jinjayaml-included.yml" %}
  mandatory: True
  question: |
    Your favorite fruit is ${ favorite_fruit }.
  subquestion: |
    * `__version__`: {{ __version__ }}
    * `__architecture__`: {{ __architecture__ }}
    * `__filename__`: {{ __filename__ }}
    * `__current_package__`: {{ __current_package__ }}
    * `__interview_filename__`: {{ __interview_filename__ }}
    * `__interview_package__`: {{ __interview_package__ }}
    * `__parent_filename__`: {{ __parent_filename__ }}
    * `__parent_package__`: {{ __parent_package__ }}
"jinjayaml-included": ""
"jsondemo": "objects:\n  - user: Individual\n  - user.favorite_fruit: DAList.using(object_type=Thing)\n\
  ---\nmandatory: True\ncode: |\n  user.favorite_fruit.gather()\n  final_screen\n\
  ---\nquestion: |\n  Do you have any favorite fruit?\nyesno: user.favorite_fruit.there_are_any\n\
  ---\nquestion: |\n  Tell me about your \n  ${ ordinal(i) } favorite fruit.\nfields:\n\
  \  - Name: user.favorite_fruit[i].name.text\n  - Sweetness: user.favorite_fruit[i].sweetness\n\
  \    datatype: range\n    min: 1\n    max: 10\n---\nquestion: |\n  Do you have any\
  \ other favorite fruit \n  besides ${ user.favorite_fruit }?\nyesno: user.favorite_fruit.there_is_another\n\
  ---\nevent: final_screen\nquestion: |\n  You can use this to set the value \n  of\
  \ `user.favorite_fruit` using the POST\n  `/api/session` API endpoint.\nsubquestion:\
  \ |\n  #### JSON format\n  \n  `${ json.dumps(user.favorite_fruit.as_serializable())\
  \ }`\n  \n  #### Python format\n  \n  `${ repr(user.favorite_fruit.as_serializable())\
  \ }`"
"life_story": |-
  template: life_story
  content: |
    ${ single_to_double_newlines(life_story_text) }
"macros": |-
  event: final_screen
  question: |
    Here is a description of the team.
  attachment:
    name: Team
    filename: team_summary
    docx template file: team.docx
"make-ocr-pdf": "mandatory: True\ncode: |\n  ocr_finished\n  final_screen\n---\ncode:\
  \ |\n  uploaded_file.make_ocr_pdf() \n  ocr_finished = True\n---\nquestion: |\n\
  \  Upload a PDF file or image.\nsubquestion: |\n  I will convert it to a searchable\
  \ PDF.\nfields:\n  - File: uploaded_file\n    datatype: files\n---\nevent: final_screen\n\
  question: |\n  Your OCR PDF\nsubquestion: |\n  ${ uploaded_file }"
"make-ocr-pdf-in-background": |-
  mandatory: True
  code: |
    if not ocr_task.ready():
      waiting_screen
    final_screen
  ---
  code: |
    ocr_task = uploaded_file.make_ocr_pdf_in_background()
  ---
  question: |
    Upload a PDF file or image.
  subquestion: |
    I will convert it to a searchable PDF.
  fields:
    - File: uploaded_file
      datatype: files
  ---
  event: waiting_screen
  question: Please wait . . .
  reload: True
  ---
  event: final_screen
  question: |
    Your OCR PDF
  subquestion: |
    ${ uploaded_file }
"make-ocr-pdf-in-background-2": |-
  objects:
    - final_file: DAFile
"markdown-template": "template: the_template\ncontent: |\n  This is *italic text*.\n\
  \  This is **bold text**.\n  This is __some *bold italic* text__.\n\n  **bold**\
  \ at beginning of paragraph.\n\n  *italic* at beginning of paragraph.\n\n  > This\
  \ is some block-quoted\n  > text that goes on for many many\n  > lines and you might\
  \ wonder\n  > if it will ever even stop\n  > because it keeps going on and \n  >\
  \ on.\n  \n  ## This is a heading\n\n  This is some regular text.\n\n  This line\
  \ has a br.[BR] This is the second line.\n\n  ### Lists\n  \n  Here is a bullet\
  \ list:\n\n  * Apple\n  * Peach\n  * Pear\n\n  Here is a nested bullet list:\n\n\
  \  * Apple\n      * Fuji\n      * Red Delicious\n  * Peach\n  * Pear\n\n  Here is\
  \ a numbered list:\n\n  1. Nutmeg\n  2. Celery\n  3. Oregano\n\n  Your favorite\
  \ fruit is ${ favorite_fruit }.\n  \n  Here is a\n  [link to a web site](https://google.com).\n\
  \n  Here is a picture:\n\n  [FILE house.png]\n---\nmandatory: True\nquestion: |\n\
  \  Here is your document.\nattachment:\n  - name: Your attachment\n    filename:\
  \ the_file\n    docx template file: markdown_template_demo.docx"
"multi-signature": |-
  objects:
    - user: Person
    - witnesses: DAList.using(object_type=Person, there_are_any=True, complete_attribute='complete')
    - signatories: DADict.using(auto_gather=False)
  ---
  mandatory: True
  code: |
    multi_user = True
  ---
  mandatory: True
  code: |
    user.name.text
    user.agrees_to_sign
    user.signature
    witnesses.gather()
    emails_sent
    told_to_wait
  ---
  code: |
    told_to_wait = True
    force_ask('user.status')
  ---
  code: |
    user.code
    signatories.gather()
    background_action('send_out_for_signature')
    emails_sent = True
  ---
  mandatory: True
  code: |
    process_action()
    force_ask('unauthorized')
  ---
  question: |
    What is your name and e-mail address?
  fields:
    - Name: user.name.text
    - E-mail: user.email
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: user.favorite_fruit
  ---
  question: |
    If you attest that your
    favorite fruit is
    ${ user.favorite_fruit },
    press Continue.
  subquestion: |
    On the next page, you will sign
    your name to an attestation
    to this effect.
  continue button field: user.agrees_to_sign
  ---
  question: |
    What is the name and e-mail
    address
    % if i == 0:
    of a
    % else:
    of the ${ ordinal(i) }
    % endif
    witness who can attest that
    you like
    ${ user.favorite_fruit }?
  fields:
    - Name: witnesses[i].name.text
    - E-mail: witnesses[i].email
  ---
  question: |
    Besides ${ witnesses }, can anyone
    else attest that you like
    ${ user.favorite_fruit }?
  yesno: witnesses.there_is_another
  ---
  code: |
    witnesses[i].name.text
    witnesses[i].signed
    witnesses[i].signature
    witnesses[i].signature_date
    witnesses[i].complete = True
  ---
  generic object: Person
  code: |
    import random
    import string
    x.code = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
  ---
  code: |
    witnesses[i].sign_url = interview_url_action('request_signature', code=witnesses[i].code)
  ---
  code: |
    for witness in witnesses:
      signatories[witness.code] = witness
    signatories.gathered = True
  ---
  event: send_out_for_signature
  code: |
    for witness in witnesses:
      witness.notified
    user.notified
    background_response()
  ---
  code: |
    send_email(to=user, template=initial_email_template)
    user.notified = True
  ---
  code: |
    send_email(to=witness, template=witness.email_template)
    witnesses[i].notified = True
  ---
  template: initial_email_template
  subject: |
    Your Declaration of Favorite Fruit is out for signature.
  content: |
    ${ user },

    % if witnesses.number() == 1:
    I have e-mailed your
    witness to request a
    signature on the
    Declaration of Favorite Fruit.

    I will e-mail you when
    the witness has signed,
    but in the meantime you can
    [check the status].
    % else:
    I have e-mailed your
    witnesses
    to request that they sign the
    Declaration of Favorite Fruit.

    I will e-mail you when
    all the witnesses have
    signed.  You can
    [check the status] of your
    document to see who still has
    not signed.
    % endif

    [check the status]: ${ interview_url_action('status_page', code=user.code) }
  ---
  template: witnesses[i].email_template
  subject: |
    Your signature needed on
    a document for ${ user }
  content: |
    Dear ${ witnesses[i] },

    You are requested to
    witness a sworn statement
    attesting that ${ user }
    likes
    ${ user.favorite_fruit }.

    Please [click here] to
    view the document you are
    being asked to sign.

    [click here]: ${ witnesses[i].sign_url }
  ---
  attachment:
    name: |
      ${ user.possessive('Declaration of Favorite Fruit') }
    filename: |
      fruit_declaration_${ space_to_underscore(user) }
    docx template file: fruit_declaration.docx
    variable name: statement
  ---
  event: unauthorized
  code: |
    response('Page not found', response_code=404)
  ---
  event: status_page
  code: |
    if action_argument('code') != user.code:
      force_ask('unauthorized')
    force_ask('user.status')
  ---
  event: request_signature
  code: |
    if action_argument('code') not in signatories:
      force_ask('unauthorized')
    witness = signatories[action_argument('code')]
    if witness.signed:
      force_ask(witness.instanceName + '.thanked')
    force_ask(witness.instanceName + '.willing_to_sign',
              witness.instanceName + '.signature',
              { 'recompute': [ witness.instanceName + '.signature_obtained' ] },
              witness.instanceName + '.thanked')
  ---
  reconsider: statement
  question: |
    Are you willing to sign a
    statement attesting that
    ${ user } likes
    ${ user.favorite_fruit }?
  subquestion: |
    You can
    [preview the statement](${ statement.pdf.url_for() })
    now.

    If you are willing to sign,
    press Continue.  On
    the next screen, you will
    provide your signature.
  continue button field: witnesses[i].willing_to_sign
  ---
  generic object: Person
  question: |
    Sign your name
  signature: x.signature
  under: |
    ${ x }
  ---
  code: |
    for witness in witnesses:
      if not witness.signed:
        all_signatures_in = False
        break
    else:
      final_email_sent
      all_signatures_in = True
  ---
  code: |
    background_action('send_final_email')
    final_email_sent = True
  ---
  event: send_final_email
  code: |
    send_email(to=user, template=final_email_template, attachments=statement)
    background_response()
  ---
  template: final_email_template
  subject: Your Declaration of Favorite Fruit has been signed by all parties
  content: |
    ${ user },

    Your Declaration of Favorite
    Fruit has now been signed by
    all of your witnesses.
    Please see attached.
  ---
  code: |
    user.signature_date = today()
  ---
  only sets: witnesses[i].signature_obtained
  code: |
    witnesses[i].signed = True
    witnesses[i].signature_date = today()
    witnesses[i].signature_obtained = True
  ---
  code: |
    witnesses[i].signed = False
  ---
  code: |
    witnesses[i].signature_date = "_________________"
  ---
  code: |
    witnesses[i].signature = "____________________________"
  ---
  event: user.status
  reconsider:
    - all_signatures_in
    - statement
  question: |
    % if all_signatures_in:
    Your Declaration has been signed.
    % else:
    Your Declaration is out for signature.
    % endif
  subquestion: |
    % if not all_signatures_in:
      % for witness in witnesses:
        % if witness.signed:
    ${ witness } has signed.

        % else:
    ${ witness } has not signed yet.

        % endif
      % endfor
    % endif
  attachment code: statement
  ---
  event: witnesses[i].thanked
  reconsider:
    - all_signatures_in
    - statement
  question: |
    Thank you for witnessing
    ${ user.possessive('Declaration of Favorite Fruit') }
  subquestion: |
    If you would like a signed
    copy for your records, you
    may download it below.

    % if not all_signatures_in:
    Please note that not everyone
    has signed the document yet.
    % endif
  attachment code: statement
"multi-user": "objects:\n  firstparty: Individual\n  secondparty: Individual\n---\n\
  initial: true\ncode: |\n  multi_user = True\n  if user_logged_in():\n    if not\
  \ defined('firstparty.email'):\n      firstparty.email = user_info().email\n   \
  \ if user_info().email == firstparty.email:\n      firstparty.endpoint      \n \
  \   elif user_info().email == secondparty.email:\n      secondparty.endpoint\n \
  \   else:\n      user_kicked_out\n  else:\n    user_must_log_in\n---\nevent: firstparty.endpoint\n\
  code: |\n  firstparty.name.first\n  secondparty.name.first\n  firstparty.thing\n\
  \  firstparty.signature\n  if not defined('secondparty.signature'):\n    waiting_on_second_party\n\
  \  final_screen\n---\nevent: secondparty.endpoint\ncode: |\n  secondparty.consents\n\
  \  secondparty.signature\n  final_screen\n---\nquestion: |\n  What is your name?\n\
  fields:\n  - First Name: firstparty.name.first\n  - Last Name: firstparty.name.last\n\
  ---\nquestion: |\n  What is the name and e-mail address\n  of the other party to\
  \ the contract?\nfields:\n  - First Name: secondparty.name.first\n  - Last Name:\
  \ secondparty.name.last\n  - E-mail: secondparty.email\n    datatype: email\n---\n\
  question: |\n  If you agree to convey\n  ${ secondparty.thing }\n  to ${ firstparty\
  \ },\n  press Continue.\nfield: secondparty.consents\n---\ngeneric object: Individual\n\
  question: |\n  What is your least valuable possession?\nfields:\n  - no label: x.thing\n\
  ---\ngeneric object: Individual\nquestion: |\n  Please sign your name below.\nsignature:\
  \ x.signature\nunder: |\n  ${ x.name }\n---\nevent: user_must_log_in\nquestion:\
  \ |\n  In order to use this interview,\n  you need to log in.\nsubquestion: |\n\
  \  If you have not yet created an\n  account, press register.\nbuttons:\n  Register:\
  \ register\n  Log in: signin\nprevent going back: True\n---\nevent: user_kicked_out\n\
  question: |\n  You are not authorized.\nsubquestion: |\n  I'm not sure how you got\
  \ here,\n  but you do not belong.  Scram!\n---\nevent: waiting_on_second_party\n\
  question: |\n  Done for now.\nsubquestion: |\n  Please ask ${ secondparty } to go\
  \ to\n  [this link](${ interview_url() })\n  and register with the e-mail\n  address\
  \ ${ secondparty.email }.\n\n  After ${ secondparty } has done this,\n  you can\
  \ come back to this interview\n  (using the\n  [same link](${ interview_url() }))\n\
  \  and retrieve the signed agreement.\n---\nevent: final_screen\nquestion: |\n \
  \ Here is the signed contract.\nattachment:\n  name: |\n    An agreement between\n\
  \    ${ firstparty } and\n    ${ secondparty }\n  filename: agreement\n  docx template\
  \ file: Agreement_To_Transfer.docx"
"new-or-existing": |-
  objects:
    - boss: Individual
    - employee: Individual
    - customers: DAList.using(object_type=Individual)
  ---
  mandatory: True
  question: |
    Summary
  subquestion: |
    The boss is ${ boss }.

    The employee is ${ employee }.

    The customers are ${ customers }.

    % if boss in customers or employee in customers:
    Either the boss or the employee is also a customer.
    % else:
    Neither the boss nor the employee is also a customer.
    % endif
  ---
  question: Are there any customers?
  yesno: customers.there_are_any
  ---
  question: Is there another customer?
  yesno: customers.there_is_another
  ---
  code: |
    people = ([boss] if defined('boss') and boss.name.defined() else []) \
           + ([employee] if defined('employee') and employee.name.defined() else []) \
           + customers.complete_elements().elements
  ---
  reconsider:
    - people
  question: |
    Who is the boss?
  fields:
    - Existing or New: boss.existing_or_new
      datatype: radio
      default: Existing
      choices:
        - Existing
        - New
    - Person: boss
      show if:
        variable: boss.existing_or_new
        is: Existing
      datatype: object
      choices: people
    - First Name: boss.name.first
      show if:
        variable: boss.existing_or_new
        is: New
    - Last Name: boss.name.last
      show if:
        variable: boss.existing_or_new
        is: New
    - Birthday: boss.birthdate
      datatype: date
      show if:
        variable: boss.existing_or_new
        is: New
  ---
  reconsider:
    - people
  question: |
    Who is the employee?
  fields:
    - Existing or New: employee.existing_or_new
      datatype: radio
      default: Existing
      choices:
        - Existing
        - New
    - Person: employee
      show if:
        variable: employee.existing_or_new
        is: Existing
      datatype: object
      choices: people
    - First Name: employee.name.first
      show if:
        variable: employee.existing_or_new
        is: New
    - Last Name: employee.name.last
      show if:
        variable: employee.existing_or_new
        is: New
    - Birthday: employee.birthdate
      datatype: date
      show if:
        variable: employee.existing_or_new
        is: New
  ---
  reconsider:
    - people
  question: |
    Who is the ${ ordinal(i) } customer?
  fields:
    - Existing or New: customers[i].existing_or_new
      datatype: radio
      default: Existing
      choices:
        - Existing
        - New
    - Person: customers[i]
      show if:
        variable: customers[i].existing_or_new
        is: Existing
      datatype: object
      choices: people
    - First Name: customers[i].name.first
      show if:
        variable: customers[i].existing_or_new
        is: New
    - Last Name: customers[i].name.last
      show if:
        variable: customers[i].existing_or_new
        is: New
    - Birthday: customers[i].birthdate
      datatype: date
      show if:
        variable: customers[i].existing_or_new
        is: New
"oauth-test": |-
  modules:
    .oauthsheets
  ---
  objects:
    - google: GoogleAuth.using(url_args=url_args)
  ---
  initial: True
  code: |
    if not user_logged_in():
      message("Test Google Sheets Integration", "Sorry, you must be logged in to test this interview.")
  ---
  mandatory: True
  question: |
    Here is some data.
  subquestion: |
    `${ google.test() }`
"oauth-test-2": |-
  modules:
    .oauthsheets
  ---
  objects:
    - google: GoogleAuth.using(url_args=url_args)
  ---
  initial: True
  code: |
    if not user_logged_in():
      message("Test Google Sheets Integration", "Sorry, you must be logged in to test this interview.")
      menu_items = []
    intro_screen
  ---
  question: |
    You need to connect with Google Sheets.
  subquestion: |
    Press Continue to connect.
  field: intro_screen
  ---
  code: |
    if google.active():
      intro_screen = True
  ---
  initial: True
  code: |
    menu_items = [ action_menu_item('Manage Credentials', 'manage_credentials') ]
  ---
  mandatory: True
  question: |
    Here is some data.
  subquestion: |
    `${ google.test() }`
  ---
  question: |
    Manage credentials
  subquestion: |
    You do not have any stored credentials.
  field: manage_credentials
  continue button label: Resume
  ---
  if: google.active()
  question: |
    Manage credentials
  subquestion: |
    If you want to delete your credentials, you can do so.

    ${ action_button_html(url_action('delete_credentials'), label="Delete credentials", color="danger") }

    Otherwise, you can go back to the interview.
  continue button label: Resume
  field: manage_credentials
"oauth-test-3": |-
  objects:
    - google: GoogleAuth.using(url_args=url_args, use_random_unique_id=True)
"oauth-test-4": |-
  objects:
    - google: GoogleAuth.using(url_args=url_args, unique_id=user_code)
  ---
  question: |
    What is your user code?
  fields:
    - Code: user_code
"object-checkboxes-copy": |-
  question: |
    Which fruits does ${ person[i] } like?
  fields:
    - Fruits: person[i].fruit_preferences
      datatype: object_checkboxes
      choices:
        - fruit_data
  validation code: |
    person[i].fruit_preferences = person[i].fruit_preferences.copy_deep(person[i].instanceName + '.fruit_preferences')
  ---
  question: |
    How many seeds does
    ${ person[i].possessive('ideal ' + person[i].fruit_preferences[j].name.text) }
    have?
  fields:
    Seeds: person[i].fruit_preferences[j].seeds
  continue button field: person[i].fruit_preferences[j].preferred_seeds_verified
"object-checkboxes-custom": |-
  modules:
    - docassemble.base.legal
  ---
  objects:
    protagonist: Individual
    antagonist: Individual
  ---
  mandatory: True
  code: |
    protagonist.name.first = "Harry"
    protagonist.name.last = "Potter"
    antagonist.name.first = "Tom"
    antagonist.name.last = "Riddle"
  ---
  question: Who are the villains, if any?
  fields:
    no label: villain
    datatype: object_checkboxes
    choices:
      - protagonist
      - antagonist
  ---
  objects:
    villain: PartyList.using(auto_gather=False)
  ---
  question: |
    % if villain.number() == 0:
    There are no villains here.
    % else:
    The ${ villain.as_noun() }
    ${ villain.does_verb("include") }
    ${ villain }.
    % endif
  subquestion: |
    The class name of `villain` is
    `${ villain.__class__.__name__ }`.
  mandatory: True
"objects-from-file": "code: |\n  people = objects_from_file(\"contacts.yml\", use_objects=True)\n\
  ---\nmandatory: true\nquestion: |\n  How to contact us\nsubquestion: |\n  % for\
  \ person in people:\n  You can e-mail ${ person } at\n  ${ person.email }.\n  \n\
  \  % endfor"
"objects-from-file-dadict": "code: |\n  fruitseeds = objects_from_file(\"fruitseeds.yml\"\
  )\n---\nmandatory: True\nquestion: |\n  Summary of\n  ${ fruitseeds.number_as_word()\
  \ }\n  fruit\nsubquestion: |\n  % for fruit in fruitseeds:\n  The seeds of ${ fruit\
  \ } are\n  ${ fruitseeds[fruit] }\n  in number.\n  \n  % endfor"
"objects-from-file-gather": "code: |\n  fruitseeds = objects_from_file(\"fruitseeds.yml\"\
  , gathered=False, name='fruitseeds')\n---\nquestion: |\n  The fruits so far are\
  \ ${ fruitseeds }.\n  Are there more?\nyesno: fruitseeds.there_is_another\n---\n\
  question: |\n  What fruit would you like to add?\nfields:\n  - Fruit: fruitseeds.new_item_name\n\
  \  - Seeds: fruitseeds.new_item_value\n---\nmandatory: True\nquestion: |\n  Summary\
  \ of\n  ${ fruitseeds.number_as_word() }\n  fruit\nsubquestion: |\n  % for fruit\
  \ in fruitseeds:\n  The seeds of ${ fruit } are\n  ${ fruitseeds[fruit] }\n  in\
  \ number.\n  \n  % endfor"
"objects-from-file-json": "code: |\n  people = objects_from_file(\"contacts.json\"\
  )\n---\nmandatory: true\nquestion: |\n  How to contact us\nsubquestion: |\n  % for\
  \ person in people:\n  You can e-mail ${ person } at\n  ${ person.email }.\n  \n\
  \  % endfor"
"objects-from-file-template": |-
  objects:
    client: Individual
  ---
  question: |
    What is your name?
  fields:
    - First: client.name.first
    - Last: client.name.last
"overlay-pdf": |-
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  question: |
    What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
  ---
  question: |
    Upload your company logo.
  fields:
    - Logo: logo_image
      datatype: file
  ---
  attachment:
    variable name: logo_page
    docx template file: logo_template.docx
  ---
  attachment:
    variable name: the_document
    docx template file: food_template.docx
  ---
  mandatory: True
  question: |
    Here is your document.
  subquestion: |
    ${ overlay_pdf(the_document, logo_page) }
"phone-number": |-
  objects:
    - user: Individual
  ---
  question: |
    Is your mobile phone number
    based in the United States
    or Canada?
  field: user.phone_international
  buttons:
    - U.S. or Canada: False
    - Another country: True
  ---
  question: |
    What country is associated
    with your mobile phone number?
  field: user.phone_country
  dropdown:
    code: countries_list()
  ---
  code: |
    if not user.phone_international:
      user.phone_country = 'US'
  ---
  question: |
    What is your phone number?
  subquestion: |
    % if user.phone_international:
    Enter your phone number as you
    would dial it in
    ${ country_name(user.phone_country) }.
    % endif
  fields:
    - Phone number: user.phone_number
      validate: |
        lambda y: phone_number_is_valid(y, country=user.phone_country) or validation_error("Please enter a valid " + country_name(user.phone_country) + " phone number." )
  ---
  mandatory: True
  question: |
    I will text you at
    `${ user.sms_number(country=user.phone_country) }`.
"phone-number-2": |-
  objects:
    - user: Individual
  ---
  question: |
    What is your phone number?
  fields:
    - label: |
        Is your mobile phone number
        based in the United States
        or Canada?
      field: user.phone_international
      datatype: noyesradio
      default: False
    - label: |
        What country is associated
        with your mobile phone number?
      field: user.phone_country
      code: countries_list()
      show if: user.phone_international
    - label: |
        Enter your phone number
      field: user.mobile_number
  validation code: |
    if user.phone_international:
      if not phone_number_is_valid(user.mobile_number, country=user.phone_country):
        validation_error('Please enter a valid phone number for ' + country_name(user.phone_country) + '.', field='user.mobile_number')
    else:
      if not phone_number_is_valid(user.mobile_number):
        validation_error('Please enter a valid phone number.', field='user.mobile_number')
  ---
  code: |
    if not user.phone_international:
      user.phone_country = 'US'
  ---
  mandatory: True
  question: |
    I will text you at
    `${ user.sms_number(country=user.phone_country) }`.
"predict-activity": |-
  mandatory: True
  question: |
    % if present_activity.prediction == future_activity.prediction:
    It seems that you are fairly
    content with your current work.
    % else:
    That's interesting.
    % endif
  ---
  question: |
    What kind of work do you do now?
  fields:
    - Work: present_activity
      datatype: ml
  ---
  question: |
    What kind of work do you see
    yourself doing in five years?
  fields:
    - Work: future_activity
      datatype: ml
      using: present_activity
"predict-activity-activity": |-
  mandatory: True
  question: |
    % if present_activity.prediction == future_activity.prediction:
    It seems that you are fairly
    content with your current work.
    % else:
    That's interesting.
    % endif
  ---
  question: |
    What kind of work do you do now?
  fields:
    - Work: present_activity
      datatype: ml
      using: activity
  ---
  question: |
    What kind of work do you see
    yourself doing in five years?
  fields:
    - Work: future_activity
      datatype: ml
      using: activity
"predict-happy-sad": |-
  question: |
    Describe how you feel.
  fields:
    - no label: mood
      datatype: ml
  ---
  mandatory: True
  question: |
    You sound ${ mood }.
"predict-happy-sad-area": |-
  question: |
    Describe how you feel.
  fields:
    - no label: mood
      datatype: mlarea
  ---
  mandatory: True
  question: |
    You sound ${ mood }.
"prevent-dependency-satisfaction": |-
  modules:
    .legume
  ---
  objects:
    - bean: Legume
  ---
  mandatory: True
  code: |
    bean.sweet_index
    final_screen
  ---
  event: final_screen
  question: |
    % if bean.is_tasty():
    It is tasty.
    % else:
    It is not tasty.
    % endif
"preview": "question: |\n  The food section\nright: |\n  <div class=\"da-page-header\"\
  >\n    <h1 class=\"h3\">Preview</h1>\n  </div>\n  \n  [TARGET food_section_text]\n\
  fields:\n  - Favorite fruit: favorite_fruit\n  - Favorite vegetable: favorite_vegetable\n\
  \  - Like mushrooms: likes_mushrooms\n    datatype: yesnoradio\n  - Favorite mushroom:\
  \ favorite_mushroom\n  - Favorite dessert: favorite_dessert\n    choices:\n    \
  \  - Pie: pie\n      - Cake: cake\ncheck in: question_food\n---\ntemplate: question_food\n\
  content: |\n  I am a really big fan of \n  ${ action_argument('favorite_fruit')\
  \ or \"[BLANK]\" }.\n  With dinner I like to have a side of\n  ${ action_argument('favorite_vegetable')\
  \ or \"[BLANK]\" }.\n  % if action_argument('likes_mushrooms') == 'True':\n  And\
  \ I usually can't resist adding sauteed \n  ${ action_argument('favorite_mushroom')\
  \ or \"[BLANK]\" }\n  to my\n  ${ action_argument('favorite_vegetable') or \"[BLANK]\"\
  \ }.\n  % endif\n  [BR][BR]\n  My favorite part of the meal is dessert,\n  when\
  \ I can have a nice big slice of\n  ${ action_argument('favorite_dessert') or \"\
  [BLANK]\" }.\ntarget: food_section_text"
"progressive-disclosure": "modules:\n  - .progressivedisclosure\n---\nfeatures:\n\
  \  css: progressivedisclosure.css\n---\ntemplate: fruit_explanation\nsubject: |\n\
  \  Tell me more about fruit\ncontent: |\n  ##### What is a fruit?\n  \n  A fruit\
  \ is the the sweet and\n  fleshy product of a tree or\n  other plant that contains\n\
  \  seed and can be eaten as food.\n---\ntemplate: favorite_explanation\nsubject:\
  \ |\n  Explain favorites\ncontent: |\n  ##### What is a favorite?\n\n  If you have\
  \ a favorite something,\n  that means you like it more than\n  you like other things\
  \ of a similar\n  nature.\n---\nquestion: |\n  What is your favorite fruit?\nsubquestion:\
  \ |\n  Everybody has a favorite fruit.\n  \n  ${ prog_disclose(fruit_explanation)\
  \ }\n\n  Don't you have a favorite fruit?\n\n  ${ prog_disclose(favorite_explanation)\
  \ }\n\n  You must have a favorite.\nfields:\n  - Favorite fruit: favorite_fruit"
"pytojs-dom": "imports:\n  - json\n---\nquestion: |\n  What are your favorites?\n\
  fields:\n  - Color: color\n  - Flavor: flavor\n---\nquestion: |\n  What is your\
  \ favorite fruit?\nsubquestion: |\n  <div id=\"myinfo\"\n       data-color=${ json.dumps(color)\
  \ } \n       data-flavor=${ json.dumps(flavor) }\n       class=\"d-none\"></div>\n\
  fields:\n  - Fruit: favorite_fruit\nscript: |\n  <script>\n    var myInfo = $(\"\
  #myinfo\").data();\n    console.log(\"You like \" + myInfo.color + \" things that\
  \ taste like \" + myInfo.flavor + \".\"); \n  </script>\n---\nmandatory: True\n\
  question: |\n  Your favorite fruit is\n  ${ favorite_fruit }."
"pytojs-hidden": |-
  imports:
    - json
  ---
  question: |
    What is your favorite color?
  fields:
    - Color: favorite_color
  ---
  question: |
    What is your favorite fruit?
  subquestion: |
    <input type="hidden"
           name="${ encode_name('favorite_color') }"
           value=${ json.dumps(favorite_color) }>
  fields:
    - Fruit: favorite_fruit
  script: |
    <script>
      var myColor = val('favorite_color');
      console.log("You said you liked " + myColor);
      setField('favorite_color', 'dark ' + myColor);
      console.log("But now you like " + val('favorite_color'));
    </script>
  ---
  mandatory: True
  question: |
    Your favorites
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.

    Your favorite color is
    ${ favorite_color }.
"pytojs-log": |-
  imports:
    - json
  ---
  question: |
    What is your favorite color?
  fields:
    - Color: favorite_color
  ---
  initial: True
  code: |
    log("var myColor = " + json.dumps(favorite_color) + ";", "javascript")
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  script: |
    <script>
      console.log("I know that your favorite color is " + myColor);
    </script>
  ---
  mandatory: True
  question: |
    Your favorites
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.

    Your favorite color is
    ${ favorite_color }.
"pytojs-script": |-
  imports:
    - json
  ---
  question: |
    What is your favorite color?
  fields:
    - Color: favorite_color
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  script: |
    <script>
      var myColor = ${ json.dumps(favorite_color) };
      console.log("I know your favorite color is " + myColor);
    </script>
  ---
  mandatory: True
  question: |
    Your favorites
  subquestion: |
    Your favorite fruit is
    ${ favorite_fruit }.

    Your favorite color is
    ${ favorite_color }.
"questionless": |-
  mandatory: True
  code: |
    json_response({'final': True, 'inhabitants': inhabitant_count})
  ---
  code: |
    if favorite_number == 42 and user_agrees_to_waive_penalties:
      inhabitant_count = 2
    else:
      inhabitant_count = 2000 + favorite_number * 45
"quotes-in-code": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    - name: Fruit and vegetable summary
      filename: fruit_vegetable
      docx template file: quotes-in-code.docx
"random-forest": |-
  mandatory: True
  code: |
    rf = RandomForestMachineLearner('fruit', use_initial_file=True)
    if rf.is_empty():
      rf.add_to_training_set(dict(a=1, b=2.0, c=3.0, d='A'), 'apple')
      rf.add_to_training_set(dict(a=0.9, b=2, c=3.0, d='A'), 'apple')
      rf.add_to_training_set(dict(a=0.8, b=2.0, c=3.0, d='A'), 'apple')
      rf.add_to_training_set(dict(a=1.0, b=2.1, c=3, d='B'), 'apple')
      rf.add_to_training_set(dict(a=1.2, b=2.0, c=3.1, d='A'), 'apple')
      rf.add_to_training_set(dict(a=1.0, b=7.0, c=3.0, d='B'), 'orange')
      rf.add_to_training_set(dict(a=0.9, b=6.9, c=3.0, d='A'), 'orange')
      rf.add_to_training_set(dict(a=0.8, b=6.7, c=2.9, d='B'), 'orange')
      rf.add_to_training_set(dict(a=1.0, b=7.1, c=2.95, d='B'), 'orange')
      rf.add_to_training_set(dict(a=1.05, b=6.8, c=3.1, d='B'), 'orange')
  ---
  code: |
    sample_data = dict(a=1, b=3.8, c=3.1, d='B')
    predictions = rf.predict(sample_data, probabilities=True)
"random-forest-interview": |-
  objects:
    - characteristics: DADict.using(gathered=True)
  ---
  mandatory: True
  question: |
    Think of a fruit.
  subquestion: |
    When you have thought of a fruit,
    press Continue.
  field: thought_of_fruit
  ---
  mandatory: True
  question: |
    Is it round?
  yesno: characteristics['round']
  ---
  mandatory: True
  question: |
    What color is it when ripe?
  field: characteristics['color']
  choices:
    - Red
    - Yellow
    - Purple
    - Blue
    - Green
    - Orange
  ---
  mandatory: True
  question: |
    Where are its seeds?
  field: characteristics['seed location']
  choices:
    - Inside
    - Outside
    - Throughout
  ---
  mandatory: True
  question: |
    How many inches wide is a
    typical specimen?
  fields:
    - no label: characteristics['width']
      datatype: range
      min: 0.1
      max: 12.0
      step: 0.1
      default: 6.0
  ---
  mandatory: True
  question: |
    How sweet is it, on a scale from
    1 to 5?
  fields:
    - no label: characteristics['sweetness']
      datatype: range
      min: 1
      max: 5
      default: 3
  ---
  code: |
    rf = RandomForestMachineLearner('fruit', use_initial_file=True)
  ---
  code: |
    predictions = rf.predict(characteristics, probabilities=True)
  ---
  mandatory: True
  code: |
    if len(predictions) > 0 and prediction_correct:
      rf.add_to_training_set(characteristics, predictions[0][0])
    else:
      fruit_name = fruit_name.lower()
      fruit_name = noun_singular(fruit_name)
      rf.add_to_training_set(characteristics, fruit_name)
  ---
  mandatory: True
  question: |
    Thank you!
  buttons:
    Try another one: restart
  ---
  question: |
    With
    ${ '{0:.1f}%'.format(predictions[0][1]*100) }
    certainty, I think it is
    ${ indefinite_article(predictions[0][0]) }.
    Am I right?
  yesno: prediction_correct
  ---
  question: |
    What fruit were you thinking of?
  fields:
    - Fruit: fruit_name
"raw": |-
  mandatory: True
  question: |
    Here is the source code.
  attachment:
    name: Hello, world program
    filename: hello_world
    raw: True
    content file: sample.cpp
"raw-data-example": "code: |\n  raw_data = objects_from_file(\"raw_data.yml\", recursive=False)\n\
  ---\nmandatory: true\nquestion: |\n  The imported data\nsubquestion: |\n  % for\
  \ item in raw_data:\n  The `inventory` of\n  \"${ item.title }\" is:\n  \n  > `${\
  \ item.inventory }`\n  \n  % endfor"
"redact-docx": |-
  mandatory: True
  question: |
    Here is your document.
  subquestion: |
    You need to print both copies
    and file them in court.

    The unredacted version goes
    to the judge, and the redacted
    version will go in the public
    record.
  attachments:
    - name: Unredacted petition
      redact: False
      filename: petition_unredacted
      docx template file: redact_demo.docx
    - name: Redacted petition
      filename: petition_redacted
      docx template file: redact_demo.docx
"redact-pdf": |-
  mandatory: True
  question: |
    Here is your document.
  subquestion: |
    You need to print both copies
    and file them in court.

    The unredacted version goes
    to the judge, and the redacted
    version will go in the public
    record.
  attachments:
    - name: Unredacted petition
      redact: False
      filename: petition_unredacted
      pdf template file: redact_demo.pdf
      field code:
        - today_date: today()
        - name: user
        - ssn: redact(user.ssn)
        - phone: user.phone_number
        - address: redact(user.address)
        - money: currency(money_claimed)
    - name: Redacted petition
      filename: petition_redacted
      pdf template file: redact_demo.pdf
      field code:
        - today_date: today()
        - name: user
        - ssn: redact(user.ssn)
        - phone: user.phone_number
        - address: redact(user.address)
        - money: currency(money_claimed)
"repeatable": |-
  mandatory: True
  code: |
    version = 0
  ---
  event: new_version
  code: |
    version += 1
  ---
  depends on: version
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  depends on: version
  question: |
    What is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
  ---
  depends on: version
  question: |
    What is your favorite apple?
  fields:
    - Apple: favorite_apple
  ---
  mandatory: True
  question: |
    Summary
  subquestion: |
    You like ${ favorite_fruit }
    and ${ favorite_vegetable }.
    % if favorite_fruit == 'apple':

    Your favorite apple is
    ${ favorite_apple }
    % endif
  action buttons:
    - label: Try again
      action: new_version
      color: primary
"report-version": |-
  imports:
    - docassemble.demo
  ---
  mandatory: True
  code: |
    json_response({'version': docassemble.demo.__version__})
"run-python-module": |-
  code: |
    output, return_code = run_python_module('hello.py')
  ---
  mandatory: True
  question: |
    ${ output }
"run-python-module-2": |-
  code: |
    output, return_code = run_python_module('docassemble.demo.hello')
  ---
  mandatory: True
  question: |
    ${ output }
"run-python-module-3": |-
  code: |
    output, return_code = run_python_module('.hello')
  ---
  mandatory: True
  question: |
    ${ output }
"run-python-module-tests": "code: |\n  output, return_code = run_python_module('tests.py',\
  \ ['-v'])\n---\nmandatory: True\nquestion: |\n  Result of unit tests\nsubquestion:\
  \ |\n  % if return_code == 0:\n  Command succeeded.\n  % else:\n  Command failed!\n\
  \  % endif\n  \n  ${ indent(output) }"
"save-continue-later": "default screen parts:\n  under: |\n    % if show_save_resume_message:\n\
  \    [Save and resume later](${ url_action('save_and_resume') })\n    % endif\n\
  ---\nmandatory: True\ncode: |\n  target = 'normal'\n  show_save_resume_message =\
  \ True\n  multi_user = True\n---\nmandatory: True\nscan for variables: False\ncode:\
  \ |\n  if target == 'save_and_resume':\n    if wants_email:\n      if email_sent:\n\
  \        log(\"We sent an e-mail to your e-mail address.\", \"info\")\n      else:\n\
  \        log(\"There was a problem with e-mailing.\", \"danger\")\n      show_save_resume_message\
  \ = False\n    undefine('wants_email')\n    undefine('email_sent')\n    target =\
  \ 'normal'\n  final_screen\n---\nquestion: |\n  What is your favorite fruit?\nfields:\n\
  \  - Favorite fruit: favorite_fruit\n---\nquestion: |\n  What is your favorite vegetable?\n\
  fields:\n  - Favorite vegetable: favorite_vegetable\n---\nquestion: |\n  What is\
  \ your favorite legume?\nfields:\n  - Favorite legume: favorite_legume\n---\nevent:\
  \ final_screen\nquestion: |\n  I would like you to cook a\n  ${ favorite_fruit },\n\
  \  ${ favorite_vegetable }, and\n  ${ favorite_legume } stew.\n---\nevent: save_and_resume\n\
  code: |\n  target = 'save_and_resume'\n---\ncode: |\n  send_email(to=user_email_address,\
  \ template=save_resume_template)\n  email_sent = True\n---\nquestion: |\n  How to\
  \ resume your interview later\nsubquestion: |\n  If you want to resume your interview\
  \ later, we can\n  e-mail you a link that you can click on to resume\n  your interview\
  \ at a later time.\nfields:\n  - no label: wants_email\n    input type: radio\n\
  \    choices:\n      - \"Ok, e-mail me\": True\n      - \"No thanks\": False\n \
  \   default: True\n  - E-mail address: user_email_address\n    datatype: email\n\
  \    show if: wants_email\nunder: \"\"\n---\ntemplate: save_resume_template\nsubject:\
  \ |\n  Your interview\ncontent: |\n  To resume your interview, \n  [click here](${\
  \ interview_url() })."
"sign": "mandatory: True\ncode: |\n  multi_user = True\n---\nmandatory: True\ncode:\
  \ |\n  multi_user = True\n  signature = '(Your signature will go here)'\n---\nmandatory:\
  \ True\ncode: |\n  intro_seen\n  email_address\n  template_file\n  notified_of_url\n\
  \  agrees_to_sign\n  signature_reset\n  signature\n  document_emailed\n  final_screen\n\
  ---\ncode: |\n  notified_of_url = True\n  prevent_going_back()\n  force_ask('screen_with_link')\n\
  ---\nquestion: |\n  What is your e-mail address?\nsubquestion: |\n  The signed document\
  \ will be e-mailed to this address.\nfields:\n  - E-mail: email_address\n---\nevent:\
  \ screen_with_link\nquestion: |\n  Share this link with the signer.\nsubquestion:\
  \ |\n  Suggested content for e-mailing to the signer:\n    \n  > I need you to sign\
  \ a document.  You can\n  > sign it using a touchscreen or with a\n  > mouse.  To\
  \ see the document and start\n  > the signing process, [click here].\n\n  [click\
  \ here]: ${ interview_url() }\n---\nsignature: signature\nquestion: Sign your name\n\
  ---\nquestion: |\n  Do you agree to sign this document?\nsubquestion: |\n  Click\
  \ the document image below to read the document\n  before signing it.\n  \n  ${\
  \ draft_document.pdf }\nfield: agrees_to_sign\ncontinue button label: I agree to\
  \ sign\n---\nattachment:\n  name: Document\n  filename: signed_document\n  variable\
  \ name: draft_document\n  docx template file:\n    code: template_file\n---\nquestion:\
  \ |\n  Collect an electronic signature\nsubquestion: |\n  If you provide your e-mail\
  \ address and upload a document,\n  you can get a link that you can give to someone,\
  \ where\n  they can click the link, sign their name, and then the\n  signed document\
  \ will be e-mailed to you.\n\n  The document you upload needs to be in .docx format.\n\
  \n  In the place where you want the signature to be, you need to\n  include the\
  \ word \"signature\" surrounded by double curly brackets.\n  For example:\n\n  >\
  \ I swear that the above is true and correct.\n  >\n  > {{ signature }}\n  >\n \
  \ > Angela Washington\n\n  If you do not include \"{{ signature }}\" in exactly\
  \ this way,\n  a signature will not be inserted.\nfield: intro_seen\n---\nquestion:\
  \ |\n  Please upload the document you want to be signed.\nfields:\n  - Document:\
  \ template_file\n    datatype: file\n    accept: |\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\
  \n---\ncode: |\n  del signature\n  signature_reset = True\n---\nattachment:\n  name:\
  \ Document\n  filename: signed_document\n  variable name: signed_document\n  valid\
  \ formats:\n    - pdf\n  docx template file:\n    code: template_file\n---\nevent:\
  \ final_screen\nprevent going back: True\nquestion: |\n  Here is your signed document.\n\
  attachment code: signed_document\n---\ntemplate: email_template\nsubject: Signed\
  \ document\ncontent: |\n  The attached document has been signed.\n---\ncode: |\n\
  \  send_email(to=email_address, template=email_template, attachments=signed_document.pdf)\n\
  \  document_emailed = True"
"signature-diversion": |-
  question: |
    Sign your name
  subquestion: |
    % if not device().is_touch_capable:
    Please sign your name below with your mouse.
    % endif
  signature: user.signature
  under: |
    ${ user }
"signature-preview": |-
  objects:
    - user: Individual
    - friend: Individual
  ---
  mandatory: True
  code: |
    user.name.first
    friend.name.first
    prized_collection
    draft_screen_shown
    user.signature
    document_finalized
    final_screen
  ---
  attachment:
    variable name: instrument
    name: Transfer of Ownership
    filename: Transfer-of-Ownership
    pdf template file: |
      Transfer-of-Ownership.pdf
    fields:
      - "grantor": ${ user }
      - "grantee": ${ friend }
      - "collection": ${ prized_collection }
      - "signature": ${ user.signature if final else "[FILE sign-here.png]" }
  # If the variable "final" changes,
  # the document needs to be reassembled
  depends on: final
  ---
  # What it means for the document
  # to be finalized
  code: |
    # Put the document into final mode
    final = True
    # Submit the document somewhere
    # send_email(...)
    # Prevent duplicate submissions
    prevent_going_back()
    document_finalized = True
  ---
  # Set an initial value for final
  code: |
    final = False
  ---
  question: |
    What is your name?
  fields:
    - First Name: user.name.first
    - Last Name: user.name.last
  ---
  question: |
    What is your best friend's name?
  fields:
    - First Name: friend.name.first
    - Last Name: friend.name.last
  ---
  question: What objects do you collect?
  fields:
    - Collection: prized_collection
      hint: baseball cards, fine china
  ---
  question: |
    Please sign your name below.
  signature: user.signature
  under: |
    ${ user }
  ---
  question: Your draft document
  subquestion: |
    Please review the attached document and
    press Continue if you agree to sign it.
  continue button field: draft_screen_shown
  attachment code: instrument
  ---
  event: final_screen
  question: Congratulations!
  subquestion: |
    You have now transferred everything
    you own to ${ friend }.

    Here is your signed document.
  attachment code: instrument
"signature-template": "objects:\n  - signer: DAList.using(object_type=Individual,\
  \ there_are_any=True)\n---\nquestion: |\n  Is there another signer?\nyesno: signer.there_is_another\n\
  ---\nquestion: |\n  Tell me about the ${ ordinal(i) } signer.\nfields:\n  - First\
  \ Name: signer[i].name.first\n  - Last Name: signer[i].name.last\n  - Likes Fruit:\
  \ signer[i].likes_fruit\n    datatype: yesno\n---\ntemplate: signer[i].signature_block\n\
  content: |\n  \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\
  _\\_\\_\\_\\_\\_\\_\\_\\_\n  \n  ${ signer[i] }, fruit\n  % if signer[i].likes_fruit:\n\
  \  lover\n  % else:\n  hater\n  % endif\n  \n  Dated: ${ today() }\n---\nmandatory:\
  \ True\nquestion: |\n  Here is your document.\nattachment:\n  docx template file:\
  \ signature_template.docx"
"signdoc": |-
  translations:
    - signdoc_es.xlsx
"single-code": |-
  mandatory: True
  code: |
    if likes_fruit:
      favorite_fruit
      if puts_fruit_in_smoothies:
        favorite_smoothie_flavor
    else:
      favorite_vegetable
    final_screen
  ---
  question: Do you like fruit?
  yesno: likes_fruit
  ---
  question: What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  question: Do you like to put fruit in smoothies?
  yesno: puts_fruit_in_smoothies
  ---
  question: What is your favorite flavor of smoothie?
  fields:
    - Flavor: favorite_smoothie_flavor
  ---
  question: Well, since you don't like fruit, what is your favorite vegetable?
  fields:
    - Vegetable: favorite_vegetable
  ---
  event: final_screen
  question: Thanks for that information.
"snapshot": |-
  modules:
    - .read_snapshot
  ---
  mandatory: True
  code: |
    favorite_fruit
    store_variables_snapshot()
    final_screen
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  event: final_screen
  question: |
    Your favorite fruit is
    ${ favorite_fruit }.
  subquestion: |
    Here is a summary of fruits
    and how many people like them.

    % for fruit, count in sorted(analyze().items(), key=lambda y: y[1], reverse=True):
    * **${ fruit }**:
      % if count == 1:
      1 person
      % else:
      ${ count } people
      % endif
    % endfor
"someone-already-mentioned": |-
  objects:
    cook: Individual
    gardener: Individual
    maid: Individual
  ---
  question: |
    Who is the cook?
  fields:
    - Somebody already mentioned: cook
      datatype: object
      disable others: True
      choices: |
        [person for person in [cook, gardener, maid] if person.name.defined()]
    - First Name: cook.name.first
    - Last Name: cook.name.last
    - Suffix: cook.name.suffix
      required: False
      code: name_suffix()
  ---
  question: |
    Who is the gardener?
  fields:
    - Somebody already mentioned: gardener
      datatype: object
      disable others: True
      choices: |
        [person for person in [cook, gardener, maid] if person.name.defined()]
    - First Name: gardener.name.first
    - Last Name: gardener.name.last
    - Suffix: gardener.name.suffix
      required: False
      code: name_suffix()
"stage-one": |-
  objects:
    - user: Individual
  ---
  question: |
    What is your name?
  fields:
    - First name: user.name.first
    - Last name: user.name.last
  ---
  question: |
    What is your favorite fruit?
  fields:
    - Fruit: favorite_fruit
  ---
  code: |
    part_two = user_info().package + ':data/questions/examples/stage-two.yml'
  ---
  code: |
    user.name.first
    favorite_fruit
    session_id = create_session(part_two)
    set_session_variables(part_two, session_id, dict(user=user, favorite_fruit=favorite_fruit), overwrite=True)
    new_session_created = True
  ---
  event: final_screen
  question: |
    All done
  subquestion: |
    [Proceed to the next part](${ interview_url(i=part_two, session=session_id) })
  ---
  mandatory: True
  code: |
    new_session_created
    final_screen
"stage-two": |-
  mandatory: True
  question: |
    You like ${ favorite_fruit } and
    ${ favorite_vegetable }.
"subdoc-params": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    name: A document
    filename: final_document
    docx template file: main_doc_params.docx
"subdocument": |-
  mandatory: True
  question: |
    Here is your document.
  attachment:
    name: A document
    filename: final_document
    docx template file: main_document.docx
"tagged-pdf": |-
  question: Your document is ready.
  subquestion: |
    The file is tagged PDF.
  attachment:
    - name: A hello world document
      filename: Hello_World_Document
      valid formats:
        - pdf
      description: |
        A document with a classic message
      docx template file: tagged.docx
      tagged pdf: True
  mandatory: True
"testcooking": |-
  modules:
    - .objects
  ---
  objects:
    - submission: Recipe
  ---
  mandatory: True
  question: |
    Recipe for ${ submission.name }
  subquestion: |
    ${ submission.summary() }
  ---
  generic object: Recipe
  question: |
    What do you want to cook?
  fields:
    - Food: x.name
  ---
  generic object: Recipe
  question: |
    What are the ingredients in
    ${ x.name }?
  fields:
    - no label: x.ingredients
      input type: area
  ---
  generic object: Recipe
  question: |
    What are the instructions
    for cooking ${ x.name }?
  fields:
    - no label: x.instructions
      input type: area
"testdatabase": |-
  modules:
    - .demodb
  ---
  objects:
    - customer: Customer
    - bank: Bank
  ---
  question: |
    What is the customer's SSN?
  fields:
    - SSN: customer.ssn
      default: 023-43-2412
  validation code: |
    customer.db_read()
  ---
  question: |
    What is the bank's routing number?
  fields:
    - SSN: bank.routing
      default: "234234223"
  validation code: |
    bank.db_read()
  ---
  question: |
    What is the name of the bank?
  fields:
    - Name: bank.name.text
  ---
  question: |
    What is the customer's name?
  fields:
    - First Name: customer.name.first
    - Last Name: customer.name.last
  ---
  question: |
    What is the customer's address?
  fields:
    - Address: customer.address.address
      address autocomplete: True
    - City: customer.address.city
    - State: customer.address.state
      code: |
        states_list()
    - Zip: customer.address.zip
      required: False
    - County: customer.address.county
  ---
  mandatory: True
  code: |
    customer.ssn
    customer.name.first
    customer.address.address
    bank.routing
    bank.name.text
    bank.add_customer(customer)
  ---
  mandatory: True
  question: |
    The bank is
    ${ bank }
    and the customer is
    ${ customer }.
  buttons:
    - Restart: restart
"testgeolocate": |-
  objects:
    - user: Individual
    - enemy: Individual
  ---
  initial: True
  code: |
    set_info(user=user, role='user')
    track_location = user.location.status()
  ---
  mandatory: True
  code: |
    need(welcome_screen, user.address.address, enemy.name.first, enemy.address.address, map_shown)
  ---
  event: map_shown
  question: Map of you and your enemy
  subquestion: |
    ${ map_of(user, enemy) }
"testssn": |-
  modules:
    - .ssn
  ---
  mandatory: True
  question: |
    Your SSN is ${ user_ssn }.
  ---
  question: |
    What is your SSN?
  fields:
    - SSN: user_ssn
      datatype: ssn
"translation": |-
  modules:
    - .translate
"turnips-worms": |-
  question: Do you like turnips?
  yesno: likes_turnips
  ---
  question: When did you stop idolizing worms?
  fields:
    - Date: worm_idolizing_stop_date
      datatype: date
"universal-document": "features:\n  use catchall: True\n---\ngeneric object: DACatchAll\n\
  question: |\n  What is ${ x.object_name() }?\nfields:\n  - no label: x.value\nvalidation\
  \ code: |\n  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'float'\
  \ or (x.context == 'add' and isinstance(x.operand, float))\ngeneric object: DACatchAll\n\
  question: |\n  How much is ${ x.object_name() }?\nfields:\n  - Amount: x.value\n\
  \    datatype: currency\nvalidation code: |\n  define(x.instanceName, x.value)\n\
  ---\nif: |\n  x.context == 'int' or (x.context == 'add' and isinstance(x.operand,\
  \ int))\ngeneric object: DACatchAll\nquestion: |\n  How much is ${ x.object_name()\
  \ }?\nfields:\n  - Amount: x.value\n    datatype: integer\nvalidation code: |\n\
  \  define(x.instanceName, x.value)\n---\nif: |\n  x.context == 'str' and x.instanceName.lower()\
  \ == 'signature'\ngeneric object: DACatchAll\nquestion: |\n  Sign your name\nsignature:\
  \ x.value\nvalidation code: |\n  define(x.instanceName, x.value)\n---\nquestion:\
  \ |\n  Please attach a .docx file that you would like to assemble.\nsubquestion:\
  \ |\n  Place variables in brackets like so:\n\n  > The quick brown {{ animal }}\
  \ jumped \n  > over the {{ adjective }} {{ other_animal }}.\n\n  To enter a signature,\
  \ use `{{ signature }}`.\n\n  To see how this works, try uploading this [test file].\n\
  \n  [test file]: ${ DAStaticFile(filename='universal-test.docx').url_for() }\nfields:\n\
  \  - no label: attached_template\n    datatype: file\n    accept: |\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\
  \n---\nmandatory: True\nquestion: Here is your document.\nattachment:\n  - docx\
  \ template file:\n      code: attached_template"
"update-references": |-
  mandatory: True
  question: Here is your document
  attachment:
    name: Brief
    filename: brief
    update references: True
    docx template file: doc-with-toc.docx
"upload-file-size": |-
  question: |
    Please upload a file.
  fields:
    File: uploaded_file
    datatype: file
  validation code: |
    if uploaded_file.size_in_bytes() > 100000:
      validation_error("That file is way too big!  Upload a smaller file.")
"validation-code": |-
  question: |
    There are 10 fruit in all.
  subquestion: |
    How many apples and oranges
    are there?
  fields:
    - Apples: number_of_apples
      datatype: integer
    - Oranges: number_of_oranges
      datatype: integer
  validation code: |
    if number_of_oranges + number_of_apples != 10:
      validation_error("The number of fruit must add up to 10!")
"validation-test": |-
  modules:
    - docassemble.demo.validationfuncs
  ---
  mandatory: True
  question: |
    There were ${ number_of_tires }
    tires in the garage.
  ---
  question: |
    How many car tires are in the
    garage?
  fields:
    - Tires: number_of_tires
      datatype: integer
      validate: is_multiple_of_four
"validation-test-two": |-
  modules:
    docassemble.demo.validationfuncstwo
  ---
  mandatory: True
  question: |
    There were ${ number_of_tires }
    tires in the garage.
  ---
  question: |
    How many car tires are in the
    garage?
  fields:
    - Tires: number_of_tires
      datatype: integer
      validate: is_multiple_of_four
"wc_common": |-
  code: |
    user_key = 'workers_comp_user:' + user_info().email
"wc_side_of_bed": |-
  include:
    - wc_common.yml

